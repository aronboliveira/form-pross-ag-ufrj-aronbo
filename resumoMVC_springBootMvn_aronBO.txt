ETAPAS PARA MONTAR SERVIDOR "TODOLIST" SPRING EM MAVEN, NO VSCODE:
- obs1: fazer equivalência no nome da package/hierarquia de pastas
- obs2: rever equivalência em Docker
- obs3: conferir versão do Spring, Java e Dependências usadas|desejadas

-----------------------------------------------------------------------------------

1. Estabelecer todas as dependências no `pom.xml`:

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>3.0.11</version>
    <relativePath/> <!-- lookup parent from repository -->
  </parent>
  <groupId>br.com.danieleleao</groupId>
  <artifactId>todolist</artifactId>
  <version>1.0.0</version>
  <name>todolist</name>
  <description>Gerenciador de Tarefas</description>
  <properties>
    <java.version>21</java.version>
  </properties>
  <dependencies>


    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>


    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>


    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>


    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>


    <dependency>
      <groupId>com.h2database</groupId>
      <artifactId>h2</artifactId>
      <scope>runtime</scope>
    </dependency>


      <dependency>
        <groupId>at.favre.lib</groupId>
        <artifactId>bcrypt</artifactId>
        <version>0.10.2</version>
    </dependency>


      <dependency>
        <groupId>org.mindrot</groupId>
        <artifactId>jbcrypt</artifactId>
        <version>0.4</version> <!-- Use a versão mais recente, se disponível -->
    </dependency>


    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <version>1.18.30</version>
      <scope>provided</scope>
    </dependency>


    <dependency>
      <groupId>org.springframework.security</groupId>
      <artifactId>spring-security-crypto</artifactId>
      <version>5.7.0</version> <!-- Use a versão mais recente -->
    </dependency>


    <dependency>
      <groupId>commons-beanutils</groupId>
      <artifactId>commons-beanutils</artifactId>
      <version>1.9.4</version> <!-- Use a versão mais recente -->
    </dependency>


    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-beans</artifactId>
      <version>3.2.8.RELEASE</version> <!-- Use a versão correspondente à sua versão do Spring -->
    </dependency>


    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-devtools</artifactId>
      <version>3.1.4</version>
    </dependency>


  </dependencies>


  <build>
    <plugins>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
      </plugin>
    </plugins>
  </build>


</project>



----------------------------------------------------------------------------------------------------


2.  Criar um `DOCKERFILE` para deploy posterior:

FROM ubuntu:latest AS build


RUN apt-get update
RUN apt-get install openjdk-17-jdk -y


COPY . .


RUN apt-get instlal maven -y
RUN mvn clean install


FROM openjdk:17-jdk-slim
EXPOSE 8080


COPY --from=build /target/todolist-1.0.0.jar app.jar


ENTRYPOINT [ "java", "-jar", "app.jar"]


------------------------------------------------------------------------------------------------------


3. Checar `/.mvn/wrapper`

Deve conter `maven-wrapper.jar` + `maven-wrapper.properties`:

# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.8.7/apache-maven-3.8.7-bin.zip
wrapperUrl=https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.1.1/maven-wrapper-3.1.1.jar


--------------------------------------------------------------------------------------------------------


4. Estabelecer configurações do Vscode - checar `/.vscode`:

Deve conter `launch.json`:

{
  "configurations": [
    {
      "type": "java",
      "name": "Spring Boot-TodolistApplication<todolist>",
      "request": "launch",
      "cwd": "${workspaceFolder}",
      "mainClass": "br.com.danieleleao.todolist.TodolistApplication",
      "projectName": "todolist",
      "args": "",
      "envFile": "${workspaceFolder}/.env"
    }
  ]
}



Deve conter `settings.json`:

{
  "java.configuration.updateBuildConfiguration": "interactive",
  "java.compile.nullAnalysis.mode": "automatic"


---------------------------------------------------------------------------------------------------------

5. Configurar `/src/main/resources/application.properties`:

Define acesso ao banco de dados

spring.datasource.url=jdbc:h2:mem:todolist
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=admin
spring.datasource.password=admin
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.h2.console.enabled=true

----------------------------------------------------------------------------------------------------------

6. Checar se há de fato pasta com nome do projeto dentro da do artefato

----------------------------------------------------------------------------------------------------------


Dentro da anterior, criar hierarquia:

7.1: Arquivo [nomeDoProjeto]Application.java

7.2: Pasta `errors`:

ExceptionHandlerController.java

7.3: Pasta `filter`:

 FilterTaskAuth.java

7.4: Pasta `utils`:

 Utils.java

7.5: Pasta `task`:

ITaskRepository.java
TaskController.java
TaskModel.java

7.6: Pasta `user`:

IUserRepository.java
UserController.java
UserModel.java


-----------------------------------------------------------------------------------------------------------

8. Checar `/target`

Deve conter `classes`,  `generated-sources/annotations`, `generated-test-sources/test-annotations`, `maven-status/maven-compiler-plugin/compile/default-compile/createdFiles.lst` e `maven-status/maven-compiler-plugin/compile/default-compile/inputFiles.lst` e `test-classes/[extensão]/[TLD]/[SLD]` (todos gerados automaticamente no decorrer do projeto)

------------------------------------------------------------------------------------------------------------

Conjunto de todas as Annotations (Usar em função de necessidade no arquivo):


 @Autowired
 @Controller
 @Column
 @ControllerAdvice
 @CreationTimestamp
 @Data
 @Entity
 @ExceptionHandler
 @GetMapping
 @Id
 @Override
 @PostMapping
 @PutMapping
 @RequestBody
 @RequestMapping
 @RestController
 @SpringBootApplication
 @GeneratedValue

--------------------------------------------------------------------------------------------------------------

Conjunto de todos os imports (Usar em função de necessidade no arquivo):


import at.favre.lib.crypto.bcrypt.BCrypt;
import br.com.aronbarbosa.todolist.user.IUserRepository;
import br.com.aronbarbosa.todolist.utils.Utils;
import jakarta.servlet.FilterChain;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.ServletException;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import java.io.IOException;
import java.time.LocalDateTime;
import java.util.Base64;
import java.util.List;
import java.util.UUID;
import lombok.Data;
import org.hibernate.annotations.CreationTimestamp;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.SpringApplication;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.http.converter.HttpMessageNotReadableException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.filter.OncePerRequestFilter;

