/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/edFisNutHandler.tsx":
/*!*********************************!*\
  !*** ./src/edFisNutHandler.tsx ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addRowAtivFis: () => (/* binding */ addRowAtivFis),
/* harmony export */   addRowComorb: () => (/* binding */ addRowComorb),
/* harmony export */   createArraysRels: () => (/* binding */ createArraysRels),
/* harmony export */   defineTargInps: () => (/* binding */ defineTargInps),
/* harmony export */   fluxFormIMC: () => (/* binding */ fluxFormIMC),
/* harmony export */   getNumCol: () => (/* binding */ getNumCol),
/* harmony export */   matchPersonPropertiesDC: () => (/* binding */ matchPersonPropertiesDC),
/* harmony export */   matchPersonPropertiesWH: () => (/* binding */ matchPersonPropertiesWH),
/* harmony export */   matchTMBElements: () => (/* binding */ matchTMBElements),
/* harmony export */   switchAutoFill: () => (/* binding */ switchAutoFill),
/* harmony export */   switchNumConsTitles: () => (/* binding */ switchNumConsTitles),
/* harmony export */   switchRequiredCols: () => (/* binding */ switchRequiredCols),
/* harmony export */   updateAtvLvl: () => (/* binding */ updateAtvLvl),
/* harmony export */   updateGETContext: () => (/* binding */ updateGETContext),
/* harmony export */   updateIndexesContexts: () => (/* binding */ updateIndexesContexts),
/* harmony export */   updatePGC: () => (/* binding */ updatePGC),
/* harmony export */   updateTMBContext: () => (/* binding */ updateTMBContext),
/* harmony export */   validateEvResultNum: () => (/* binding */ validateEvResultNum)
/* harmony export */ });
/* harmony import */ var _edFisNutModel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./edFisNutModel */ "./src/edFisNutModel.tsx");
/* harmony import */ var _global_scripts_src_gModel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global-scripts/src/gModel */ "../../global-scripts/src/gModel.tsx");
/* harmony import */ var _global_scripts_src_gHandlers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../global-scripts/src/gHandlers */ "../../global-scripts/src/gHandlers.tsx");
/* harmony import */ var _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../global-scripts/src/errorHandler */ "../../global-scripts/src/errorHandler.tsx");
//nesse file estão presentes principalmente as funções de manipulação dinâmica de texto e layout




let rowCountAtivFisRot = 3;
let rowCountAtivFisProp = 3;
let rowCountComorb = 3;
var EnumTargInpTypes;
(function (EnumTargInpTypes) {
    EnumTargInpTypes[EnumTargInpTypes["weight"] = 0] = "weight";
    EnumTargInpTypes[EnumTargInpTypes["height"] = 1] = "height";
    EnumTargInpTypes[EnumTargInpTypes["IMC"] = 2] = "IMC";
    EnumTargInpTypes[EnumTargInpTypes["MLG"] = 3] = "MLG";
    EnumTargInpTypes[EnumTargInpTypes["TMB"] = 4] = "TMB";
    EnumTargInpTypes[EnumTargInpTypes["GET"] = 5] = "GET";
})(EnumTargInpTypes || (EnumTargInpTypes = {}));
const enumTargInpTypes = EnumTargInpTypes;
function switchAutoFill(autoFillBtn, locksTabInd) {
    let autoFillActivation = true;
    if (autoFillBtn instanceof HTMLButtonElement) {
        if (autoFillBtn.innerText.match(/Desativar Cálculo Automático/)) {
            autoFillActivation = false;
            autoFillBtn.textContent = "Ativar Cálculo Automático";
            switchLockInputs(locksTabInd, autoFillActivation);
        }
        else if (autoFillBtn.innerText.match(/Ativar Cálculo Automático/)) {
            autoFillActivation = true;
            autoFillBtn.textContent = "Desativar Cálculo Automático";
            switchLockInputs(locksTabInd, autoFillActivation);
        }
    }
    else {
        const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
        _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_3__.elementNotFound(autoFillBtn ?? null, "autoFillBtn", slicedError ?? "NULL");
    }
    return autoFillActivation;
}
function switchLockInputs(locksTabInd, autoFillActivation) {
    if (locksTabInd.length > 0 &&
        locksTabInd.every((lock) => lock instanceof HTMLSpanElement)) {
        if (autoFillActivation) {
            locksTabInd.forEach((lock) => {
                const siblingInput = _global_scripts_src_gHandlers__WEBPACK_IMPORTED_MODULE_2__.searchPreviousSiblings(lock, "inpInd");
                if (siblingInput instanceof HTMLInputElement) {
                    lock.innerHTML = `
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-lock" viewBox="0 0 16 16">
            <path d="M8 1a2 2 0 0 1 2 2v4H6V3a2 2 0 0 1 2-2m3 6V3a3 3 0 0 0-6 0v4a2 2 0 0 0-2 2v5a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2M5 8h6a1 1 0 0 1 1 1v5a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1V9a1 1 0 0 1 1-1"/>
          </svg>`;
                }
                else {
                    const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
                    _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_3__.inputNotFound(siblingInput ?? null, "siblingInput", slicedError ?? "NULL");
                }
            });
        }
        else {
            locksTabInd.forEach((lock) => {
                const siblingInput = _global_scripts_src_gHandlers__WEBPACK_IMPORTED_MODULE_2__.searchPreviousSiblings(lock, "inpInd");
                if (siblingInput instanceof HTMLInputElement) {
                    lock.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-unlock" viewBox="0 0 16 16">
          <path d="M11 1a2 2 0 0 0-2 2v4a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V9a2 2 0 0 1 2-2h5V3a3 3 0 0 1 6 0v4a.5.5 0 0 1-1 0V3a2 2 0 0 0-2-2M3 8a1 1 0 0 0-1 1v5a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V9a1 1 0 0 0-1-1z"/>
        </svg>`;
                }
                else {
                    const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
                    _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_3__.inputNotFound(siblingInput ?? null, "siblingInput", slicedError ?? "NULL");
                }
            });
        }
    }
    else {
        console.error(`Erro validando Locks de Tábela de Índices.
    Length obtida: ${locksTabInd?.length ?? 0};
    Todos os Elements como Span: ${locksTabInd.every((lock) => lock instanceof HTMLSpanElement) ?? false}`);
    }
}
function getNumCol(evEl) {
    let numCol = undefined;
    if ((evEl && evEl.id.match(/[0-9]+_[0-9]+$/g)) ||
        (evEl instanceof HTMLInputElement && evEl.name.match(/[0-9]+_[0-9]+$/g)) ||
        (evEl instanceof HTMLLabelElement && evEl.htmlFor.match(/[0-9]+_[0-9]+$/g))) {
        numCol = parseInt(evEl.id.slice(-1), 10) ?? undefined;
        if (Number.isNaN(numCol)) {
            console.warn(`numCol retornado como NaN. Revertido para undefined.`);
            numCol = undefined;
        }
    }
    else {
        const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
        _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_3__.matchError(".id do Elemento de Evento", evEl ?? null, evEl?.id ?? "null", slicedError ?? "NULL");
    }
    return numCol;
}
function validateEvResultNum(evEl, property) {
    if (evEl instanceof HTMLInputElement && evEl.type === "number") {
        const returnedProperty = _global_scripts_src_gHandlers__WEBPACK_IMPORTED_MODULE_2__.updateSimpleProperty(evEl) || 0;
        if (typeof returnedProperty === "number") {
            property = returnedProperty;
        }
        else if (typeof returnedProperty === "string") {
            property = parseInt(returnedProperty.replaceAll(/[^0-9.,+-]/g, "")) || 0;
            if (Number.isNaN(property)) {
                console.warn(`Propriedade de input para ${evEl?.id ?? "undefined Event Element"}
        retornada como NaN e revertida para 0.`);
                property = 0;
            }
        }
        else {
            const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
            _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_3__.typeError(`property relacionada a ${evEl?.id ?? "undefined Event Element"}`, property, "number", slicedError ?? "NULL");
            property = 0;
        }
    }
    else {
        const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
        _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_3__.elementNotFound(evEl, `${evEl?.id ?? "undefined Event Element"}`, slicedError ?? "NULL");
        property = 0;
    }
    return property;
}
function matchPersonPropertiesWH(person, targInpWeight, targInpHeight) {
    if (targInpWeight instanceof HTMLInputElement) {
        person.weight = validateEvResultNum(targInpWeight, person.weight);
    }
    else {
        const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
        _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_3__.inputNotFound(targInpWeight ?? null, "targInpWeight", slicedError ?? "NULL");
    }
    if (targInpHeight instanceof HTMLInputElement) {
        person.height = validateEvResultNum(targInpHeight, person.height);
    }
    else {
        const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
        _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_3__.inputNotFound(targInpHeight ?? null, "targInpHeight", slicedError ?? "NULL");
    }
    return [person.weight, person.height];
}
function matchPersonPropertiesDC(person, targInpSumDCut) {
    if (targInpSumDCut instanceof HTMLInputElement) {
        person.sumDCut = validateEvResultNum(targInpSumDCut, person.sumDCut);
    }
    else {
        const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
        _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_3__.inputNotFound(targInpSumDCut ?? null, "targInpSumDCut", slicedError ?? "NULL");
    }
    return person.sumDCut;
}
function updateIndexesContexts(person, gordCorpLvl, targInpIMC, targInpMLG, targInpTMB, targInpGET, formTMBTypeElement, factorAtvLvl, factorAtleta) {
    let IMC = 0;
    let MLG = 0;
    let TMB = 0;
    let GET = 0;
    const IMCMLGArray = person.calcIMC(person) ?? ["", 0, 0];
    if (Number.isNaN(IMCMLGArray[1]) || isNaN(IMCMLGArray[1])) {
        console.warn(`IMCMLGCArray[1] retornando como NaN`);
        IMCMLGArray[1] = 0;
    }
    IMC = parseFloat(IMCMLGArray[1].toFixed(4)) ?? 0;
    if (Number.isNaN(IMCMLGArray[2]) || isNaN(IMCMLGArray[2])) {
        console.warn(`IMCMLGCArray[2] retornando como NaN`);
        IMCMLGArray[2] = 0;
    }
    MLG = parseFloat(IMCMLGArray[2].toFixed(4)) ?? 0;
    updateIMCMLGContext(IMCMLGArray, gordCorpLvl, targInpIMC, targInpMLG, formTMBTypeElement, "NONE");
    if (IMCMLGArray[0] === "" || IMCMLGArray[1] === 0 || IMCMLGArray[2] === 0) {
        console.warn(`IMCMLGArray não atualizado.
              Valores obtidos: ${IMCMLGArray[0] ?? "null"}; ${IMCMLGArray[1] ?? 0}; ${IMCMLGArray[2] ?? 0} }`);
    }
    TMB = updateTMBContext(IMCMLGArray ?? [gordCorpLvl.value, 0, 0], person, factorAtleta, formTMBTypeElement, targInpTMB);
    if (TMB >= 0 && factorAtvLvl) {
        GET = updateGETContext(person, targInpGET, TMB, factorAtvLvl);
    }
    else {
        console.warn(`Valor de TMB obtido: ${TMB};
    factorAtvLvl obtido: ${factorAtvLvl ?? 0}`);
        targInpGET.value = "0";
    }
    return [IMC, MLG, TMB, GET];
}
function updateIMCMLGContext(IMCMLGArray, gordCorpLvl, targInpIMC, targInpMLG, formTMBTypeElement, ignoredIndex) {
    let IMC = 0;
    let MLG = 0;
    if (gordCorpLvl instanceof HTMLSelectElement &&
        targInpIMC instanceof HTMLInputElement &&
        targInpMLG instanceof HTMLInputElement &&
        formTMBTypeElement instanceof HTMLSelectElement &&
        (ignoredIndex === "MLG" ||
            ignoredIndex === "IMC" ||
            ignoredIndex === "BOTH" ||
            ignoredIndex === "NONE")) {
        if (!(ignoredIndex === "MLG" || ignoredIndex === "BOTH") &&
            typeof IMCMLGArray[2] === "number") {
            MLG = IMCMLGArray[2];
            targInpMLG.value = MLG.toFixed(4) || "0";
        }
        else {
            const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
            _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_3__.typeError("IMCMLGArray[2]", IMCMLGArray[2] ?? null, "number", slicedError ?? "NULL");
        }
        if (!(ignoredIndex === "IMC" || ignoredIndex === "BOTH") &&
            typeof IMCMLGArray[1] === "number") {
            IMC = IMCMLGArray[1];
            targInpIMC.value = IMC.toFixed(4) || "0";
        }
        else {
            const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
            _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_3__.typeError("IMCMLGArray[1]", IMCMLGArray[1] ?? null, "number", slicedError ?? "NULL");
        }
        if (typeof IMCMLGArray[0] === "string") {
            gordCorpLvl.value = IMCMLGArray[0] || "";
            fluxFormIMC(IMC, formTMBTypeElement, gordCorpLvl);
        }
        else {
            const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
            _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_3__.typeError("IMCMLGArray[0]", IMCMLGArray[0] ?? null, "string", slicedError ?? "NULL");
        }
        if (IMCMLGArray[0] === "" || IMCMLGArray[1] === 0 || IMCMLGArray[2] === 0) {
            console.warn(`IMCMLGArray não atualizado.
      Valores obtidos: ${IMCMLGArray[0] ?? "null"}; ${IMCMLGArray[1] ?? 0}; ${IMCMLGArray[2] ?? 0} }`);
        }
    }
    else {
        const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
        _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_3__.multipleElementsNotFound(slicedError ?? "NULL", "instâncias de elementos em updateIMCMLGContext", gordCorpLvl ?? null, targInpIMC ?? null, targInpMLG ?? null, formTMBTypeElement ?? null);
        console.warn(`ignoredIndex: ${ignoredIndex}`);
    }
}
function fluxFormIMC(IMC, formTMBTypeElement, gordCorpLvl) {
    if (formTMBTypeElement instanceof HTMLSelectElement &&
        formTMBTypeElement.value !== "" &&
        gordCorpLvl instanceof HTMLSelectElement &&
        gordCorpLvl.value !== "") {
        if (IMC >= 0 && IMC < 25.0) {
            formTMBTypeElement.value = "harrisBenedict";
            if (IMC < 18.5) {
                gordCorpLvl.value = "abaixo";
            }
            else if (IMC >= 18.5) {
                gordCorpLvl.value = "eutrofico";
            }
        }
        else if (IMC >= 25.0) {
            formTMBTypeElement.value = "mifflinStJeor";
            if (IMC < 30) {
                gordCorpLvl.value = "sobrepeso";
                formTMBTypeElement.value = "mifflinStJeor";
            }
            else if (IMC >= 30 && IMC < 35) {
                gordCorpLvl.value = "obeso1";
                formTMBTypeElement.value = "mifflinStJeor";
            }
            else if (IMC >= 35 && IMC < 40) {
                gordCorpLvl.value = "obeso2";
                formTMBTypeElement.value = "mifflinStJeor";
            }
            else if (IMC > 40) {
                gordCorpLvl.value = "obeso3";
                formTMBTypeElement.value = "mifflinStJeor";
            }
        }
        else {
            console.error(`Erro obtendo valor de IMC em função fluxFormIMC().
      Valor obtido: ${IMC ?? "NaN"}`);
        }
    }
    else {
        const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
        _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_3__.multipleElementsNotFound(slicedError ?? "NULL", "obtendo formTMBTypeElement e/ou gordCorpLvl Element", formTMBTypeElement ?? null, gordCorpLvl ?? null);
    }
}
function updateTMBContext(IMCMLGArray, person, factorAtleta, formTMBTypeElement, targInpTMB) {
    let TMB = 0;
    if (IMCMLGArray.length === 3) {
        const TMBArray = person.calcTMB(person, IMCMLGArray[1] ?? 0, factorAtleta, IMCMLGArray[2] ?? 0) ?? ["", 0];
        if (formTMBTypeElement instanceof HTMLSelectElement) {
            formTMBTypeElement.value = TMBArray[0];
        }
        else {
            const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
            _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_3__.elementNotFound(formTMBTypeElement ?? null, "formTMBTypeElement", slicedError ?? null);
        }
        TMB = parseFloat(TMBArray[1].toFixed(4)) ?? 0;
        if (Number.isNaN(TMB) || isNaN(TMB)) {
            console.warn(`TMB retornando como NaN`);
            TMB = 0;
        }
        targInpTMB.value = TMB.toString();
    }
    else {
        console.error(`Erro validando argumentos.
      IMC obtido: ${IMCMLGArray[1]};
      MLG obtido: ${IMCMLGArray[2]};
      factorAtleta obtido: ${factorAtleta}`);
    }
    return TMB;
}
function matchTMBElements(mainSelect, formTMBTypeElement, spanFactorAtleta, gordCorpLvl, lockGordCorpLvl, IMC) {
    if (!IMC) {
        IMC = 0;
    }
    if (mainSelect instanceof HTMLSelectElement &&
        formTMBTypeElement instanceof HTMLSelectElement &&
        spanFactorAtleta instanceof HTMLSpanElement &&
        gordCorpLvl instanceof HTMLSelectElement &&
        lockGordCorpLvl instanceof HTMLSpanElement) {
        switch (formTMBTypeElement.value) {
            case "harrisBenedict":
                fluxFormIMC(IMC, formTMBTypeElement, gordCorpLvl);
                break;
            case "mifflinStJeor":
                fluxFormIMC(IMC, formTMBTypeElement, gordCorpLvl);
                break;
            case "tinsley":
                mainSelect.value = "muitoIntenso";
                break;
        }
        if (mainSelect.value === "muitoIntenso") {
            formTMBTypeElement.value = "tinsley";
            spanFactorAtleta.hidden = false;
        }
        else if (mainSelect.value === "sedentario" ||
            mainSelect.value === "leve" ||
            mainSelect.value === "moderado" ||
            mainSelect.value === "intenso") {
            spanFactorAtleta.hidden = true;
            if (gordCorpLvl.value === "sobrepeso" ||
                gordCorpLvl.value === "obeso1" ||
                gordCorpLvl.value === "obeso2" ||
                gordCorpLvl.value === "obeso3" ||
                (IMC && IMC >= 25)) {
                formTMBTypeElement.value = "mifflinStJeor";
            }
            else if (gordCorpLvl.value === "abaixo" ||
                gordCorpLvl.value === "eutrofico" ||
                (IMC && IMC < 25)) {
                formTMBTypeElement.value = "harrisBenedict";
            }
            else {
                console.error(`Erro obtendo valor de Gordura Corporal.
        Nível de Gordura Corporal obtido: ${gordCorpLvl?.value ?? "null"};
        IMC obtido: ${IMC ?? 0}.`);
            }
        }
        else {
            console.error(`Erro obtendo valor de mainSelect.
      Valor obtido: ${mainSelect.value || "null"}`);
        }
        if (mainSelect.value === "muitoIntenso" ||
            formTMBTypeElement.value === "tinsley") {
            lockGordCorpLvl.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-unlock" viewBox="0 0 16 16">
      <path d="M11 1a2 2 0 0 0-2 2v4a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V9a2 2 0 0 1 2-2h5V3a3 3 0 0 1 6 0v4a.5.5 0 0 1-1 0V3a2 2 0 0 0-2-2M3 8a1 1 0 0 0-1 1v5a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V9a1 1 0 0 0-1-1z"/>
    </svg>`;
        }
        else {
            lockGordCorpLvl.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-lock" viewBox="0 0 16 16">
      <path d="M8 1a2 2 0 0 1 2 2v4H6V3a2 2 0 0 1 2-2m3 6V3a3 3 0 0 0-6 0v4a2 2 0 0 0-2 2v5a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2M5 8h6a1 1 0 0 1 1 1v5a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1V9a1 1 0 0 1 1-1"/>
    </svg>`;
        }
    }
    else {
        const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
        _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_3__.multipleElementsNotFound(slicedError ?? "NULL", "argumentos em matchTMBElements()", mainSelect ?? null, formTMBTypeElement ?? null, spanFactorAtleta ?? null, gordCorpLvl ?? null, lockGordCorpLvl ?? null);
        console.warn(`Tipo primitivo obtido para IMC: ${typeof IMC ?? "undefined"}.`);
    }
}
function updateGETContext(person, targInpGET, TMB, factorAtvLvl) {
    let GET = parseFloat(person.calcGET(TMB || 0, factorAtvLvl).toFixed(4)) ?? 0;
    if (Number.isNaN(GET) || isNaN(GET)) {
        console.warn(`GET retornando como NaN`);
        GET = 0;
    }
    targInpGET.value = GET.toFixed(4);
    return GET;
}
function updatePGC(person, numRef, context, parentElement) {
    let targInpPGC = undefined;
    let targInpSumDCut = undefined;
    let PGC = 0;
    if (context === "cons" || context === "tab") {
        if (context === "cons") {
            targInpPGC = parentElement.querySelector(`#inpPgc${numRef}Cel4_${numRef + 1}`);
            targInpSumDCut = parentElement.querySelector(`#tabInpRowDCut9_${numRef + 1}`);
        }
        else if (context === "tab") {
            targInpPGC = parentElement.querySelector(`#inpPgc${numRef - 1}Cel4_${numRef}`);
            targInpSumDCut = parentElement.querySelector(`#tabInpRowDCut9_${numRef}`);
        }
    }
    else {
        const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
        _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_3__.stringError("validando contexto.  Valores de string aceitos: cons || tab.", context ?? "undefined", slicedError ?? "NULL");
    }
    if (targInpSumDCut instanceof HTMLInputElement &&
        targInpSumDCut.type === "number") {
        person.sumDCut = parseInt(targInpSumDCut?.value ?? 0);
        targInpSumDCut.value = person.sumDCut.toString();
    }
    else {
        const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
        _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_3__.inputNotFound(targInpSumDCut, "targInpSumDCut", slicedError ?? "NULL");
    }
    if (targInpPGC instanceof HTMLInputElement && targInpPGC.type === "number") {
        console.log("sumdcut capturado " + person.sumDCut);
        console.log("age capturada " + person.age);
        PGC = parseFloat(person.calcPGC(person).toFixed(4)) ?? 0;
        if (Number.isNaN(PGC) || isNaN(PGC)) {
            console.warn(`PGC retornando como NaN`);
            PGC = 0;
        }
        const PGCDecayArray = _edFisNutModel__WEBPACK_IMPORTED_MODULE_0__.isPGCDecaying(person, PGC, targInpPGC);
        if (PGCDecayArray[0] === true) {
            PGC = PGCDecayArray[1];
            targInpPGC.value = PGC.toFixed(2);
        }
        else {
            targInpPGC.value = PGC.toFixed(4);
        }
    }
    else {
        const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
        _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_3__.inputNotFound(targInpPGC, "targInpPGC", slicedError ?? "NULL");
    }
    if (PGC <= 0) {
        console.warn(`Valor de PGC não atualizado.
    Valor obtido: ${PGC || 0}`);
    }
    return [PGC ?? 0, targInpSumDCut ?? null, targInpPGC ?? null];
}
function updateAtvLvl(mainSelect, atvLvl, secondarySelect) {
    const returnedAtvLvl = _global_scripts_src_gHandlers__WEBPACK_IMPORTED_MODULE_2__.updateSimpleProperty(mainSelect) ?? "";
    if (typeof returnedAtvLvl === "string") {
        atvLvl = returnedAtvLvl;
        secondarySelect.value = atvLvl;
    }
    else {
        const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
        _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_3__.typeError("atualização de mainSelect em updateAtLvl()", returnedAtvLvl ?? null, "string", slicedError ?? "NULL");
    }
    return atvLvl;
}
function defineTargInps(numRef, context, parentEl) {
    const arrayTargInps = [];
    const validTargInps = [];
    let targInpWeight = undefined;
    let targInpHeight = undefined;
    let targInpIMC = undefined;
    let targInpMLG = undefined;
    let targInpTMB = undefined;
    let targInpGET = undefined;
    if (typeof numRef === "string") {
        numRef =
            numRef
                .replaceAll(/["']/g, "")
                .match(/^[0-9]{1,2}$/g)
                ?.toString() ?? "";
        if (numRef && numRef !== "") {
            numRef = parseInt(numRef, 10);
            if (Number.isNaN(numRef)) {
                console.warn(`numRef retornado como NaN. Revertido para 1`);
                numRef = 1;
            }
        }
        else {
            const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
            _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_3__.stringError("convertendo Número de Consulta de string para número", numRef, slicedError ?? "NULL");
        }
    }
    if (typeof numRef === "number") {
        if (context === "cons" || context === "tab") {
            if (context === "cons") {
                targInpWeight = parentEl.querySelector(`#tabInpRowMedAnt2_${numRef + 1}`);
                arrayTargInps.push(targInpWeight);
                targInpHeight = parentEl.querySelector(`#tabInpRowMedAnt3_${numRef + 1}`);
                arrayTargInps.push(targInpHeight);
                targInpIMC = parentEl.querySelector(`#inpImc${numRef}Cel2_${numRef + 1}`);
                arrayTargInps.push(targInpIMC);
                targInpMLG = parentEl.querySelector(`#inpMlg${numRef}Cel3_${numRef + 1}`);
                arrayTargInps.push(targInpMLG);
                targInpTMB = parentEl.querySelector(`#inpTmb${numRef}Cel5_${numRef + 1}`);
                arrayTargInps.push(targInpTMB);
                targInpGET = parentEl.querySelector(`#inpGet${numRef}Cel6_${numRef + 1}`);
                arrayTargInps.push(targInpGET);
            }
            else if (context === "tab") {
                targInpWeight = parentEl.querySelector(`#tabInpRowMedAnt2_${numRef}`);
                arrayTargInps.push(targInpWeight);
                targInpHeight = parentEl.querySelector(`#tabInpRowMedAnt3_${numRef}`);
                arrayTargInps.push(targInpHeight);
                targInpIMC = parentEl.querySelector(`#inpImc${numRef - 1}Cel2_${numRef}`);
                arrayTargInps.push(targInpIMC);
                targInpMLG = parentEl.querySelector(`#inpMlg${numRef - 1}Cel3_${numRef}`);
                arrayTargInps.push(targInpMLG);
                targInpTMB = parentEl.querySelector(`#inpTmb${numRef - 1}Cel5_${numRef}`);
                arrayTargInps.push(targInpTMB);
                targInpGET = parentEl.querySelector(`#inpGet${numRef - 1}Cel6_${numRef}`);
                arrayTargInps.push(targInpGET);
            }
        }
        else {
            const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
            _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_3__.typeError("numRef", numRef ?? null, "number ou string somente com números", slicedError ?? "NULL");
        }
    }
    else {
        const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
        _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_3__.stringError("validando contexto. Valores de string aceitos: cons || tab.", context ?? "undefined", slicedError ?? "NULL");
    }
    if (arrayTargInps.length === 6) {
        for (let iA = 0; iA < arrayTargInps.length; iA++) {
            if (arrayTargInps[iA] instanceof HTMLInputElement &&
                arrayTargInps[iA].type === "number") {
                validTargInps.push(arrayTargInps[iA]);
            }
            else {
                const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
                _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_3__.inputNotFound(arrayTargInps[iA], `arrayTargInps ${enumTargInpTypes[iA]}`, slicedError ?? "NULL");
                arrayTargInps[iA] = null;
            }
        }
    }
    else {
        const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
        _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_3__.elementNotPopulated(arrayTargInps ?? null, "arrayTargInps", slicedError ?? "NULL");
    }
    return validTargInps;
}
function addRowAtivFis(container) {
    if (container instanceof HTMLButtonElement &&
        container.tagName === "BUTTON") {
        if (container.classList.contains("addAtFisRot")) {
            const tBodyContainer = document.getElementById("tabTbodyAtFisRot");
            const newRow = document.createElement("tr");
            newRow.className = "contQuint tabRowAtFisRot";
            newRow.id = `tabRowAtFisRotId${rowCountAtivFisRot}`;
            newRow.innerHTML = `
      <td class="contSext tabCelAtFisRot" id="tabCelRowAtFisRot${rowCountAtivFisRot}_1" itemprop="celAtFisRot">${rowCountAtivFisRot - 1}&#41</td>
      <td class="contSext tabCelAtFisRot" id="tabCelRowAtFisRot${rowCountAtivFisRot}_2" itemprop="celAtFisRot">
        <input type="text" min="0" max="255" class="contSet tabInpAtFisRot tabInpRowAtFisRot2" id="tabInpRowAtFisRot${rowCountAtivFisRot}_1" itemprop="inpAtFisRot" />
      <td class="contSext tabCelAtFisRot" id="tabCelRowAtFisRot${rowCountAtivFisRot}_3" itemprop="celAtFisRot">
        <input type="number" min="0" max="255" class="contSet inpAtivFis tabInpAtFisRot tabInpRowAtFisRot2" id="tabInpRowAtFisRot${rowCountAtivFisRot}_2" itemprop="inpAtFisRot" />
      </td>
      <td class="contSext tabCelAtFisRot" id="tabCelRowAtFisRot${rowCountAtivFisRot}_4" itemprop="celAtFisRot">
        <input type="number" min="0" max="255" class="contSet tabInpAtFisRot tabInpRowAtFisRot2" id="tabInpRowAtFisRot${rowCountAtivFisRot}_3" itemprop="inpAtFisRot" />
      </td>
      <td class="contSext tabCelAtFisRot" id="tabCelRowAtFisRot${rowCountAtivFisRot}_5" itemprop="celAtFisRot">
        <input type="number" min="0" max="255" class="contSet tabInpAtFisRot tabInpRowAtFisRot2" id="tabInpRowAtFisRot${rowCountAtivFisRot}_4" itemprop="inpAtFisRot" />
      </td>
        `;
            if (tBodyContainer) {
                tBodyContainer.appendChild(newRow);
                const numInps = newRow.querySelectorAll('input[type="number"]');
                const textElements = newRow.querySelectorAll('input[type="text"]');
                for (let iT = 0; iT < textElements.length; iT++) {
                    textElements[iT].addEventListener("input", () => _global_scripts_src_gModel__WEBPACK_IMPORTED_MODULE_1__.autoCapitalizeInputs(textElements[iT]));
                }
                for (let iN = 0; iN < numInps.length; iN++) {
                    numInps[iN].addEventListener("input", () => _global_scripts_src_gModel__WEBPACK_IMPORTED_MODULE_1__.numberLimit(numInps[iN]));
                }
            }
            rowCountAtivFisRot++;
        }
        else if (container.classList.contains("removeAtFisRot")) {
            const validParent = document.getElementById("tabAtFisRot");
            if (validParent) {
                const siblingsCollection = validParent.children;
                const validNextParent = siblingsCollection.namedItem(`tabTbodyAtFisRot`);
                if (validNextParent) {
                    const nextSiblingsCollection = validNextParent.children;
                    const rowToRemove = nextSiblingsCollection.namedItem(`tabRowAtFisRotId${rowCountAtivFisRot - 1}`);
                    if (rowToRemove &&
                        rowCountAtivFisRot !== 3 &&
                        rowToRemove.id !== "tabRowAtFisRotId2") {
                        rowToRemove.remove();
                        rowCountAtivFisRot -= 1;
                    }
                }
            }
        }
        else if (container.classList.contains("addAtFisProp")) {
            const tBodyContainer = document.getElementById("tabTbodyAtFisProp");
            const newRow = document.createElement("tr");
            newRow.className = "contQuint tabRowAtFisProp";
            newRow.id = `tabRowAtFisPropId${rowCountAtivFisProp}`;
            newRow.innerHTML = `
      <td class="contSext tabCelAtFisProp" id="tabCelRowAtFisProp${rowCountAtivFisProp}_1" itemprop="celAtFisProp">${rowCountAtivFisProp - 1}&#41</td>
      <td class="contSext tabCelAtFisProp" id="tabCelRowAtFisProp${rowCountAtivFisProp}_2" itemprop="celAtFisProp">
        <input type="text" min="0" max="255" class="contSet tabInpAtFisProp tabInpRowAtFisProp2" id="tabInpRowAtFisProp${rowCountAtivFisProp}_1" itemprop="inpAtFisProp" required />
      <td class="contSext tabCelAtFisProp" id="tabCelRowAtFisProp${rowCountAtivFisProp}_3" itemprop="celAtFisProp">
        <input type="number" min="0" max="255" class="contSet inpAtivFis tabInpAtFisProp tabInpRowAtFisProp2" id="tabInpRowAtFisProp${rowCountAtivFisProp}_2" itemprop="inpAtFisProp" required />
      </td>
      <td class="contSext tabCelAtFisProp" id="tabCelRowAtFisProp${rowCountAtivFisProp}_4" itemprop="celAtFisProp">
        <input type="number" min="0" max="255" class="contSet tabInpAtFisProp tabInpRowAtFisProp2" id="tabInpRowAtFisProp${rowCountAtivFisProp}_3" itemprop="inpAtFisProp" required />
      </td>
      <td class="contSext tabCelAtFisProp" id="tabCelRowAtFisProp${rowCountAtivFisProp}_5" itemprop="celAtFisProp">
        <input type="number" min="0" max="255" class="contSet tabInpAtFisProp tabInpRowAtFisProp2" id="tabInpRowAtFisProp${rowCountAtivFisProp}_4" itemprop="inpAtFisProp" required />
      </td>
        `;
            if (tBodyContainer) {
                tBodyContainer.appendChild(newRow);
                const numInps = newRow.querySelectorAll('input[type="number"]');
                const textElements = newRow.querySelectorAll('input[type="text"]');
                for (let iT = 0; iT < textElements.length; iT++) {
                    textElements[iT].addEventListener("input", () => _global_scripts_src_gModel__WEBPACK_IMPORTED_MODULE_1__.autoCapitalizeInputs(textElements[iT]));
                }
                for (let iN = 0; iN < numInps.length; iN++) {
                    numInps[iN].addEventListener("input", () => _global_scripts_src_gModel__WEBPACK_IMPORTED_MODULE_1__.numberLimit(numInps[iN]));
                }
            }
            rowCountAtivFisProp++;
        }
        else if (container.classList.contains("removeAtFisProp")) {
            const validParent = document.getElementById("tabAtFisProp");
            if (validParent) {
                const siblingsCollection = validParent.children;
                const validNextParent = siblingsCollection.namedItem(`tabTbodyAtFisProp`);
                if (validNextParent) {
                    const nextSiblingsCollection = validNextParent.children;
                    const rowToRemove = nextSiblingsCollection.namedItem(`tabRowAtFisPropId${rowCountAtivFisProp - 1}`);
                    if (rowToRemove &&
                        rowCountAtivFisProp !== 3 &&
                        rowToRemove.id !== "tabRowAtFisPropId2") {
                        rowToRemove.remove();
                        rowCountAtivFisProp -= 1;
                    }
                }
            }
        }
    }
}
function addRowComorb(container) {
    if (container.tagName === "BUTTON" && container.id === "addComorb") {
        const parentTab = document.getElementById("tabComorb");
        const newComorbRow = document.createElement("tr");
        newComorbRow.className = "contTerc tabRowComorb";
        newComorbRow.id = `tabRowComorb${rowCountComorb}`;
        newComorbRow.innerHTML = `
    <td class="contQuat tabCelComorb tabCelRowComorb${rowCountComorb}" id="tabCelRowComorb${rowCountComorb}_1">${rowCountComorb - 1}</td>
    <td class="contQuat tabCelComorb tabCelRowComorb${rowCountComorb}" id="tabCelRowComorb${rowCountComorb}_2">
      <input type="text" class="contQuint tabInpComorb tabInpRowComorb${rowCountComorb}" id="tablInpRowComorb${rowCountComorb}_2"/>
    </td>
    <td class="contQuat tabCelComorb tabCelRowComorb${rowCountComorb}" id="tabCelRowComorb${rowCountComorb}_3">
      <input type="date" class="contQuint tabInpComorb tabInpRowComorb${rowCountComorb} id="tablInpRowComorb${rowCountComorb}_3"/>
    </td>
    `;
        if (parentTab) {
            parentTab.appendChild(newComorbRow);
            const textElements = newComorbRow.querySelectorAll('input[type="text"]');
            for (let iB = 0; iB < textElements.length; iB++) {
                textElements[iB].addEventListener("input", () => _global_scripts_src_gModel__WEBPACK_IMPORTED_MODULE_1__.autoCapitalizeInputs(textElements[iB]));
            }
            rowCountComorb++;
        }
    }
    else if (container.tagName === "BUTTON" &&
        container.id === "removeComorb") {
        const validComorbParent = document.getElementById("tabComorb");
        if (validComorbParent) {
            const siblingsComorbCollection = validComorbParent.children;
            if (validComorbParent) {
                const comorbRowToRemove = siblingsComorbCollection.namedItem(`tabRowComorb${rowCountComorb - 1}`);
                if (comorbRowToRemove &&
                    rowCountComorb !== 3 &&
                    comorbRowToRemove.id !== "tabRowComorb2") {
                    comorbRowToRemove.remove();
                    rowCountComorb--;
                }
            }
        }
    }
}
function switchRequiredCols(elements) {
    if (elements.length > 0 && elements[1] instanceof HTMLSelectElement) {
        const consTablesFs = elements[0];
        const numConsElement = elements[1];
        const tabSVi = elements[2];
        const tabMedAnt = elements[3];
        const tabDC = elements[4];
        const tabIndPerc = elements[5];
        let numCons = parseInt(numConsElement?.value || "1");
        if (Number.isNaN(numCons)) {
            console.warn(`numCons retornado como NaN, revertido para 1`);
            numCons = 1;
        }
        //adiciona listener para responder à mudança no valor de consulta
        let returnedNum = parseInt(_global_scripts_src_gHandlers__WEBPACK_IMPORTED_MODULE_2__.updateSimpleProperty(numConsElement) ?? "0", 10);
        if (Number.isNaN(returnedNum)) {
            console.warn(`returnedNum retornado como NaN, revertido para 0`);
            returnedNum = 0;
        }
        if (typeof returnedNum === "number" &&
            returnedNum > 0 &&
            returnedNum <= 3) {
            numCons = returnedNum;
            //inicia construção de matriz para reset de required na tabela
            const totalTables = consTablesFs?.querySelectorAll("table");
            const totalRows = consTablesFs?.querySelectorAll("tr");
            let nTotalRows = 0;
            if (totalRows && totalRows.length > 0) {
                nTotalRows = totalRows.length - totalTables.length;
            }
            else {
                const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
                _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_3__.elementNotPopulated(totalRows ?? null, "NodeList de elementos <tr> em switchRequiredCols()", slicedError ?? "NULL");
            }
            const totalCols = consTablesFs?.querySelectorAll("col");
            let nTotalCols = 0;
            if (totalCols && totalCols.length > 0) {
                nTotalCols = totalCols.length - totalTables.length;
            }
            else {
                const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
                _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_3__.elementNotPopulated(totalCols ?? null, "NodeList de elementos <col> em switchRequiredCols()", slicedError ?? "NULL");
            }
            let nTotalMatrixValidAxes = 0;
            if (nTotalRows !== 0 &&
                !Number.isNaN(nTotalRows) &&
                nTotalCols !== 0 &&
                !Number.isNaN(nTotalCols)) {
                nTotalMatrixValidAxes = nTotalRows * nTotalCols;
            }
            else {
                console.error(`Erro na construção da Matriz para eixos de preenchimento.
        Número de Linhas obtidas: ${nTotalRows ?? 0};
        Número de Colunas obtidas: ${nTotalCols ?? 0}.`);
            }
            //captura elementos de input para reset baseado nas matrizes inpsCells e nTotalMatrixValidAxes
            const inpsCellsSVi = tabSVi.querySelectorAll(".tabInpProgSVi");
            const inpsCellsMedAnt = tabMedAnt.querySelectorAll(".tabInpProgMedAnt");
            const inpsCellsDC = tabDC.querySelectorAll(".tabInpProgCons");
            const inpsCellsIndPerc = tabIndPerc.querySelectorAll(".inpInd");
            const inpsCells = [
                ...inpsCellsSVi,
                ...inpsCellsMedAnt,
                ...inpsCellsDC,
                ...inpsCellsIndPerc,
            ];
            //reseta o atributo required das cells para novas atribuições de required
            if (inpsCells.length > 0 &&
                inpsCells.length === nTotalMatrixValidAxes / totalTables.length) {
                inpsCells.forEach((inpCel) => {
                    if (inpCel instanceof HTMLInputElement) {
                        inpCel.required = false;
                    }
                    else {
                        const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
                        _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_3__.inputNotFound(inpCel ?? null, "inpCel", slicedError ?? "NULL");
                    }
                });
            }
            else {
                console.error(`Erro na determinação de .length do array de Input em Células.
        Número obtido: ${inpsCells.length ?? 0};
        Equivale ao número desejado para a matriz de Eixos de Preenchimento: ${inpsCells.length === nTotalMatrixValidAxes ?? false};
        Número aceito: ${nTotalMatrixValidAxes / totalTables.length};
        Número de Inputs para Sinais Vitais obtido: ${inpsCellsSVi?.length ?? 0};
        Número de Inputs para Medidas Antropométricas obtido: ${inpsCellsMedAnt?.length ?? 0};
        Número de Inputs para Dobras Cutâneas obtido: ${inpsCellsDC?.length ?? 0};
        Número de Inputs para Índices e Percentuais obtido: ${inpsCellsIndPerc?.length ?? 0}.`);
            }
            //determinação das novas cells required
            const validInpsNodeLists = [false, false, false, false];
            //formação das matrizes para validar os números de inputs obtidos para cada tabela
            const nRowsSVi = tabSVi.querySelectorAll("tr");
            const nColsSVi = tabSVi.querySelectorAll("col");
            let matrixValidAxesSVi = 0;
            if (nRowsSVi.length > 0 && nColsSVi.length > 0) {
                matrixValidAxesSVi = (nRowsSVi.length - 1) * (nColsSVi.length - 1);
            }
            else {
                console.error(`Erro validando Número de Linhas na Tabela de Sinais Vitais.
        Número de Linhas obtidas: ${nRowsSVi?.length ?? 0};
        Número de Colunas obtidas: ${nColsSVi?.length ?? 0}.`);
            }
            const nRowsMedAnt = tabMedAnt.querySelectorAll("tr");
            const nColsMedAnt = tabMedAnt.querySelectorAll("col");
            let matrixValidAxesMedAnt = 0;
            if (nRowsMedAnt.length > 0 && nColsMedAnt.length > 0) {
                matrixValidAxesMedAnt =
                    (nRowsMedAnt.length - 1) * (nColsMedAnt.length - 1);
            }
            else {
                console.error(`Erro validando Número de Linhas na Tabela de Medidas Antropométricas.
        Número de Linhas obtidas: ${nRowsMedAnt?.length ?? 0};
        Número de Colunas obtidas: ${nColsMedAnt?.length ?? 0}.`);
            }
            const nRowsDC = tabDC.querySelectorAll("tr");
            const nColsDC = tabDC.querySelectorAll("col");
            let matrixValidAxesDC = 0;
            if (nRowsDC.length > 0 && nColsDC.length > 0) {
                matrixValidAxesDC = (nRowsDC.length - 1) * (nColsDC.length - 1);
            }
            else {
                console.error(`Erro validando Número de Linhas na Tabela de Dobras Cutâneas.
        Número de Linhas obtidas: ${nRowsDC?.length ?? 0};
        Número de Colunas obtidas: ${nColsDC?.length ?? 0}.`);
            }
            const nRowsIndPerc = tabIndPerc.querySelectorAll("tr");
            const nColsIndPerc = tabIndPerc.querySelectorAll("col");
            let matrixValidAxesIndPerc = 0;
            if (nRowsIndPerc.length > 0 && nColsIndPerc.length > 0) {
                matrixValidAxesIndPerc =
                    (nRowsIndPerc.length - 1) * (nColsIndPerc.length - 1);
            }
            else {
                console.error(`Erro validando Número de Linhas na Tabela de Índices e Percentuais.
        Número de Linhas obtidas: ${nRowsIndPerc?.length ?? 0};
        Número de Colunas obtidas: ${nColsIndPerc?.length ?? 0}.`);
            }
            //validação das NodeLists de Inputs nas células
            if (Array.from(inpsCellsSVi).every((inpCell) => inpCell instanceof HTMLInputElement) &&
                inpsCellsSVi.length > 0 &&
                inpsCellsSVi.length === matrixValidAxesSVi) {
                validInpsNodeLists[0] = true;
            }
            else {
                console.warn(`Erro capturando inputs de Sinais Vitais com querry.
          Array obtido: ${JSON.stringify(inpsCellsSVi) ?? "null"};
          Todos os elementos como HTMLInputs: ${Array.from(inpsCellsSVi).every((inpCell) => inpCell instanceof HTMLInputElement) ?? false};
          Length esperada: ${matrixValidAxesSVi ?? 0}.`);
            }
            if (Array.from(inpsCellsMedAnt).every((inpCell) => inpCell instanceof HTMLInputElement) &&
                inpsCellsMedAnt.length > 0 &&
                inpsCellsMedAnt.length === matrixValidAxesMedAnt) {
                validInpsNodeLists[1] = true;
            }
            else {
                console.warn(`Erro capturando inputs de Medidas Antropométricas com querry.
          Array obtido: ${JSON.stringify(inpsCellsMedAnt) ?? "null"};
          Todos os elementos como HTMLInputs: ${Array.from(inpsCellsMedAnt).every((inpCell) => inpCell instanceof HTMLInputElement) ?? false};
          Length esperada: ${matrixValidAxesMedAnt ?? 0}`);
            }
            if (Array.from(inpsCellsDC).every((inpCell) => inpCell instanceof HTMLInputElement) &&
                inpsCellsDC.length > 0 &&
                inpsCellsDC.length === matrixValidAxesDC) {
                validInpsNodeLists[2] = true;
            }
            else {
                console.warn(`Erro capturado inputs de Dobras Cutâneas com querry.
          Array obtido: ${JSON.stringify(inpsCellsDC) ?? "null"};
          Todos os elementos como HTMLInputs: ${Array.from(inpsCellsDC).every((inpCell) => inpCell instanceof HTMLInputElement) ?? false};
          Length esperada: ${matrixValidAxesDC ?? 0}`);
            }
            if (Array.from(inpsCellsIndPerc).every((inpCell) => inpCell instanceof HTMLInputElement) &&
                inpsCellsIndPerc.length > 0 &&
                inpsCellsIndPerc.length === matrixValidAxesIndPerc) {
                validInpsNodeLists[3] = true;
            }
            else {
                console.warn(`Erro capturando inputs de Índices e Percentuais com querry.
          Array obtido: ${JSON.stringify(inpsCellsIndPerc) ?? "null"};
          Todos os elementos como HTMLInputs: ${Array.from(inpsCellsIndPerc).every((inpCell) => inpCell instanceof HTMLInputElement) ?? false};
          Length esperada: ${matrixValidAxesIndPerc ?? 0}`);
            }
            const consRequiredCellsSVi = [];
            const consRequiredCellsMedAnt = [];
            const consRequiredCellsDC = [];
            const consRequiredCellsIndPerc = [];
            //validação de NodeLists para inputs nas tabelas
            if (validInpsNodeLists.every((inpsNodeListValidation) => inpsNodeListValidation === true)) {
                /* percorre a tabela usando o número de consulta como números de ciclos
                ou seja, length dos arrays formados pelas querries === length do número de consulta === número de colunas
                + são extraídas as células de interesse, com base na .id relativa à coluna, e então populam requiredCels */
                for (let iC = 0; iC < numCons; iC++) {
                    const filterPattern = new RegExp(`_${iC + 2}`);
                    const filterInpCellSVi = Array.from(inpsCellsSVi).filter((inpCellSVi) => filterPattern.test(inpCellSVi.id));
                    if (filterInpCellSVi.length > 0) {
                        consRequiredCellsSVi.push(filterInpCellSVi);
                    }
                    else {
                        console.warn(`Erro na filtragem de .id dos elementos da Tabela de Sinais Vitais, coluna ${iC}.`);
                    }
                    const filterInpCellMedAnt = Array.from(inpsCellsMedAnt).filter((inpCellMedAnt) => filterPattern.test(inpCellMedAnt.id));
                    if (filterInpCellMedAnt.length > 0) {
                        consRequiredCellsMedAnt.push(filterInpCellMedAnt);
                    }
                    else {
                        console.warn(`Erro na filtragem de .id dos elementos da Tabela de Medidas Antropomórfias, coluna ${iC}.`);
                    }
                    const filterInpCellDC = Array.from(inpsCellsDC).filter((inpCellDC) => filterPattern.test(inpCellDC.id));
                    if (filterInpCellDC.length > 0) {
                        consRequiredCellsDC.push(filterInpCellDC);
                    }
                    else {
                        console.warn(`Erro na filtragem de .id dos elementos da Tabela de Dobras Cutâneas, coluna ${iC}.`);
                    }
                    if (Array.from(inpsCellsIndPerc).every((inpCell) => inpCell instanceof HTMLInputElement)) {
                        const filterInpCellIndPerc = Array.from(inpsCellsIndPerc).filter((inpCellIndPerc) => filterPattern.test(inpCellIndPerc.name));
                        if (filterInpCellIndPerc.length > 0) {
                            consRequiredCellsIndPerc.push(filterInpCellIndPerc);
                        }
                        else {
                            console.warn(`Erro na filtragem de .id dos elementos da Tabela de Índices e Percentuais, coluna ${iC}.`);
                        }
                    }
                    else {
                        console.warn(`Erro na validação de instâncias para inpsCellsIndPerc.`);
                    }
                }
            }
            else {
                console.error(`Erro na validação de NodeLists de Inputs nas Tabelas.
        Array de Validação para NodeLists obtido: ${JSON.stringify(validInpsNodeLists) ?? "undefined"}`);
            }
            const requiredCells = [
                ...consRequiredCellsSVi,
                ...consRequiredCellsMedAnt,
                ...consRequiredCellsDC,
                ...consRequiredCellsIndPerc,
            ];
            const flatRequiredCells = requiredCells.flat(1);
            if (flatRequiredCells.length > 0 &&
                flatRequiredCells.length === nTotalRows * numCons) {
                for (let iR = 0; iR < flatRequiredCells.length; iR++) {
                    if (flatRequiredCells[iR] instanceof HTMLInputElement ||
                        flatRequiredCells[iR] instanceof HTMLTextAreaElement ||
                        flatRequiredCells[iR] instanceof HTMLSelectElement)
                        flatRequiredCells[iR].required = true;
                }
            }
            else {
                const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
                _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_3__.elementNotPopulated(flatRequiredCells ?? null, "flatRequiredCells", slicedError ?? "NULL");
            }
        }
        else {
            console.error(`Erro atualizando Número de Consulta.
          Número obtido: ${returnedNum ?? 0}`);
        }
    }
    else {
        console.error(`Erro obtendo HTMLElements a partir de operador rest.
    Length obtida: ${elements?.length ?? 0};
    Instância obtida para elements[1]: ${Object.prototype.toString.call(elements[1]).slice(8, -1) ?? "null"}`);
    }
}
function switchNumConsTitles(consTitles, trioEl, numTitledCons, numTabs) {
    const iniTrioValue = trioEl.value;
    const iniValue = parseInt(iniTrioValue) ?? 0;
    const trioNums = [];
    if (Number.isNaN(iniValue)) {
        console.warn(`iniValue retornado como NaN. Revertido para 0.`);
        for (let t = 0; t <= numTabs * numTabs - 1; t += numTitledCons / numTabs) {
            trioNums.push(1, 2, 3);
        }
    }
    else {
        for (let j = 0; j <= numTabs * numTabs - 1; j += numTitledCons / numTabs) {
            trioNums.push(iniValue, iniValue + 1, iniValue + 2);
        }
    }
    for (let i = 0; i < consTitles.length; i++) {
        console.log(JSON.stringify(trioNums));
        consTitles[i].textContent = `${trioNums[i] || `${1 + i}`}ª Consulta`;
    }
}
function createArraysRels(btnId, arrayRows, protocolValue) {
    let arrayConsultasNum = [];
    let rowValues = [];
    let tabValues = [];
    let columnValues = [];
    let colAcc = 0;
    const btnRowMatch = btnId?.match(/[0-9]+(?=_)/)?.toString();
    const btnColMatch = btnId?.match(/(?<=_)[0-9]+/)?.toString();
    if (btnColMatch && btnRowMatch) {
        let btnCol = parseInt(btnColMatch, 10);
        if (Number.isNaN(btnCol)) {
            console.warn(`btnCol retornado como NaN, revertido para 1`);
            btnCol = 1;
        }
        let btnRow = parseInt(btnRowMatch, 10);
        if (Number.isNaN(btnRow)) {
            console.warn(`btnRow retornado como NaN, revertido para 1`);
            btnRow = 1;
        }
        for (let iR = 0; iR < arrayRows.length; iR++) {
            const isValidRowArray = arrayRows.every((row) => row instanceof HTMLTableRowElement);
            if (iR === 0 && isValidRowArray) {
                arrayConsultasNum = getConsultasNums(arrayRows[iR]) ?? [0]; //obtém os números dos headers de consulta na forma de um array
                continue;
            }
            const nCels = arrayRows[iR].childElementCount;
            const arrayCelsIds = [];
            for (let iCh = 1; iCh < nCels; iCh++) {
                arrayCelsIds.push(arrayRows[iR].children[iCh].id);
            }
            if (iR !== arrayRows.length - 1 && arrayConsultasNum) {
                rowValues = getRowValues(arrayRows, arrayConsultasNum, arrayCelsIds) ?? [""];
                if (rowValues) {
                    tabValues = [...tabValues, ...rowValues];
                }
            }
        }
        for (let iT = btnCol - 2; iT < tabValues.length; iT += 3) {
            columnValues = [...columnValues, tabValues[iT]];
        }
        if (arrayConsultasNum &&
            btnCol - 1 === arrayConsultasNum[btnCol - 2] &&
            columnValues) {
            //define qual coluna será utilizada de acordo com a posição do botão e validando se há algum preenchimento na coluna
            let slicedError = "";
            let inputAcc = 0;
            let protocoloNum = 0;
            switch (protocolValue) {
                case "pollock3":
                    protocoloNum = 3;
                    break;
                case "pollock7":
                    protocoloNum = 7;
                    break;
                default:
                    slicedError =
                        new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
                    _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_3__.elementNotFound(protocolValue ?? null, "protocolo", slicedError ?? "NULL");
            }
            if (protocoloNum === 3 || protocoloNum === 7) {
                for (let iR = 0; iR < btnRow - 1; iR++) {
                    const targCelInp = document.getElementById(`tabInpRowDCut${2 + iR}_${btnCol}`);
                    if (targCelInp instanceof HTMLInputElement) {
                        if (iR < btnRow - 2) {
                            //acumula valor de inputs na coluna (em correto funcionamento, para rows sem o input de somatório)
                            if (targCelInp && targCelInp.value !== "") {
                                if (Number.isNaN(parseFloat(parseFloat(targCelInp?.value).toFixed(4)))) {
                                    console.warn(`targCelInp.value retornado como NaN, revertido para 0`);
                                    colAcc = 0;
                                }
                                else {
                                    colAcc += parseFloat(parseFloat(targCelInp?.value).toFixed(4));
                                }
                            }
                        }
                        else if (iR < btnRow - 1) {
                            //inicia busca e validação para encontrar row do botão
                            const tbodyQuery = document.getElementById("tabTbodyDCut");
                            if (tbodyQuery) {
                                const tBodyChildren = Array.from(tbodyQuery.children);
                                if (tBodyChildren &&
                                    tBodyChildren.every((tBodyChild) => tBodyChild instanceof HTMLElement)) {
                                    for (let iC = 0; iC < tBodyChildren.length; iC++) {
                                        const innerInp = tBodyChildren[iC].querySelector("input");
                                        if (!tBodyChildren[iC].hidden &&
                                            inputAcc < protocoloNum &&
                                            innerInp) {
                                            if (innerInp.value !== "") {
                                                inputAcc++;
                                            }
                                            else if (innerInp.value === "") {
                                                innerInp.value = "0";
                                                inputAcc++;
                                            }
                                        }
                                    }
                                }
                                else {
                                    const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) ||
                                        "";
                                    _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_3__.elementNotPopulated(tBodyChildren ?? null, "tBodyChildren", slicedError ?? "NULL");
                                }
                                //deposita valor no último input da coluna (em correto funcionamente, o de somatório)
                                if (inputAcc === protocoloNum) {
                                    targCelInp.value = colAcc.toString();
                                    return colAcc;
                                }
                                else {
                                    //TODO DIALOG DE ALERTA
                                    console.warn(`Número de preenchimentos insuficiente. Número obtido: ${inputAcc}; Número exigido: 3`);
                                }
                            }
                        }
                    }
                }
            }
            else {
                console.error(`Erro obtendo número de protocolo.
        Número obtido: ${protocoloNum ?? 0}`);
            }
        }
        else if (!columnValues) {
            //TODO DIALOG DE ALERTA
        }
    }
    return 0;
}
function getConsultasNums(arrayRow) {
    const strConsultasNum = arrayRow.innerText.replaceAll(/[\D]/g, "");
    let arrayConsultasNum = [];
    for (let iL = 0; iL < strConsultasNum.length; iL++) {
        let consultasLetter = parseInt(strConsultasNum.slice(0 + iL, 1 + iL) ?? "0", 10);
        if (Number.isNaN(consultasLetter)) {
            console.warn(`consultasLetter retornado como NaN, revertido para 1`);
            consultasLetter = 1;
        }
        arrayConsultasNum = arrayConsultasNum.concat(consultasLetter);
        if (iL === strConsultasNum.length - 1) {
            return arrayConsultasNum;
        }
    }
}
function getRowValues(arrayRows, arrayConsultasNum, arrayCelIds) {
    const arrayRowValues = [""];
    arrayConsultasNum.forEach((num) => {
        if (typeof num === "string") {
            num = parseInt(num, 10);
            if (Number.isNaN(num)) {
                console.warn(`Número de consulta retornado como NaN. Revertido para 0.`);
            }
        }
    });
    if (typeof arrayCelIds[0] === "string") {
        const idMatch = arrayCelIds[0]?.match(/[0-9]+(?=_)/);
        if (idMatch) {
            let numRow = (arrayCelIds[0] = parseInt(idMatch.toString(), 10));
            if (Number.isNaN(numRow)) {
                console.warn(`numRow retornado como NaN, revertido para 1`);
                numRow = 1;
            }
            if (numRow !== arrayRows.length) {
                for (let iCol = 0; iCol < arrayConsultasNum.length; iCol++) {
                    const targCelInp = document.getElementById(`tabInpRowDCut${numRow}_${1 + arrayConsultasNum[iCol]}`);
                    if (targCelInp && targCelInp instanceof HTMLInputElement) {
                        if (targCelInp.value !== "") {
                            arrayRowValues.push(targCelInp.value);
                        }
                    }
                    else {
                        const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
                        _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_3__.inputNotFound(targCelInp ?? null, "targCelInp", slicedError ?? "NULL");
                    }
                    if (arrayRowValues.length === arrayConsultasNum.length) {
                        return arrayRowValues;
                    }
                }
            }
        }
    }
    return arrayRowValues;
}


/***/ }),

/***/ "./src/edFisNutModel.tsx":
/*!*******************************!*\
  !*** ./src/edFisNutModel.tsx ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   changeTabDCutLayout: () => (/* binding */ changeTabDCutLayout),
/* harmony export */   checkInnerColGroups: () => (/* binding */ checkInnerColGroups),
/* harmony export */   isPGCDecaying: () => (/* binding */ isPGCDecaying)
/* harmony export */ });
/* harmony import */ var _global_scripts_src_gModel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../global-scripts/src/gModel */ "../../global-scripts/src/gModel.tsx");
/* harmony import */ var _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../global-scripts/src/errorHandler */ "../../global-scripts/src/errorHandler.tsx");
/* harmony import */ var _global_scripts_src_classes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../global-scripts/src/classes */ "../../global-scripts/src/classes.tsx");
//nesse file estão presentes principalmente as funções relacionadas à exigência de modelo textual e de visualização



function checkInnerColGroups(parentElement) {
    const validColGroupsChildCount = [];
    let areAllCoolGroupsSimilar = false;
    if (parentElement instanceof HTMLElement) {
        const colGroups = Array.from(parentElement.querySelectorAll("colgroup"));
        const areColGroupValids = colGroups.every((colGroup) => colGroup instanceof HTMLTableColElement);
        //popula arrays de colgroups com base em filtragem de instância
        if (areColGroupValids && colGroups.length > 0) {
            for (let i = 0; i < colGroups.length; i++) {
                const colGrpChilds = colGroups[i].children;
                const cols = Array.from(colGrpChilds);
                if (cols.every((col) => col instanceof HTMLTableColElement)) {
                    validColGroupsChildCount.push(colGroups[i].childElementCount);
                }
                else {
                    const colsInstances = [];
                    for (let j = 0; j < cols.length; j++) {
                        const childInstance = `${Object.prototype.toString.call(cols[j]).slice(8, -1) ?? "null"}`;
                        colsInstances.push(childInstance);
                        if (childInstance !== `HTMLTableColElement`) {
                            const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
                            _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_1__.elementNotFound(cols[j] ?? null, "child <col>", slicedError ?? "NULL");
                        }
                    }
                    const validCols = cols.filter((col) => col instanceof HTMLTableColElement);
                    validColGroupsChildCount.push(validCols.length);
                }
            }
        }
        else {
            console.warn(`Erro validando colGroups.
      areColGroupValids: ${areColGroupValids ?? false};
      Instância obtida: ${Object.prototype.toString.call(colGroups).slice(8, -1) ?? "null"};
      Length obtida: ${colGroups.length ?? 0}`);
        }
        //filtra array de colgroups válida com base em colunas de tamanho similar
        const pairedColGroupsValid = [];
        for (let m = 0; m < validColGroupsChildCount.length; m++) {
            if (m === 0) {
                continue;
            }
            else {
                if ((validColGroupsChildCount[m] = validColGroupsChildCount[m - 1])) {
                    pairedColGroupsValid.push(true);
                }
                else {
                    console.warn(`Erro validando par de Col Groups.
          Par invalidado: ${validColGroupsChildCount[m] ?? "null"} com ${validColGroupsChildCount[m - 1] ?? "null"}`);
                    pairedColGroupsValid.push(false);
                }
            }
        }
        //verifica se todos os pares são válidos para, em caso negativo, fornecer warn
        if (pairedColGroupsValid.every((pairedColGroup) => pairedColGroup === true)) {
            areAllCoolGroupsSimilar = true;
        }
        else {
            console.warn(`Grupos de Colunas não são similares no número de children`);
            areAllCoolGroupsSimilar = false;
        }
    }
    return [validColGroupsChildCount?.length ?? 0, areAllCoolGroupsSimilar];
}
function changeTabDCutLayout(protocolo, tabDC) {
    const bodyType = document.getElementById("textBodytype");
    if (protocolo &&
        tabDC &&
        bodyType &&
        (bodyType instanceof HTMLSelectElement ||
            bodyType instanceof HTMLInputElement)) {
        const optionElementMatch7 = protocolo?.value
            .match(/^pollock7$/i)
            ?.toString();
        const optionElementMatch3 = protocolo?.value
            .match(/^pollock3$/i)
            ?.toString();
        const opsProtocolo = Array.from(protocolo.children);
        const filteredOpsProtocolo = opsProtocolo.filter((childProtocolo) => childProtocolo instanceof HTMLOptionElement);
        if (filteredOpsProtocolo.length < opsProtocolo.length) {
            console.warn(`Algum elementos de Protocolo não foram reconhecidos como opções. Total de reconhecimentos: ${filteredOpsProtocolo.length}`);
        }
        for (let iOp = 0; iOp < filteredOpsProtocolo.length - 1; iOp++) {
            if (optionElementMatch3) {
                const arrayTabIds = checkTabRowsIds(tabDC);
                if (arrayTabIds && arrayTabIds.length !== tabDC.rows.length) {
                    const genderedIds = _global_scripts_src_gModel__WEBPACK_IMPORTED_MODULE_0__.filterIdsByGender(arrayTabIds, bodyType.value);
                    if (bodyType.value === "masculino" || bodyType.value === "feminino") {
                        if (genderedIds && genderedIds.length === 3) {
                            const matchedIds = [];
                            for (let iG = 0; iG < genderedIds.length; iG++) {
                                for (let iR = 0; iR < arrayTabIds.length; iR++) {
                                    if (genderedIds[iG].toLowerCase() === arrayTabIds[iR]) {
                                        const slice1 = genderedIds[iG].charAt(0).toUpperCase();
                                        const slice2 = genderedIds[iG].slice(1);
                                        if (slice1 && slice2) {
                                            const capitalizedGenderedId = slice1 + slice2;
                                            matchedIds.push(`row${capitalizedGenderedId}`);
                                        }
                                    }
                                }
                            }
                            const medTrs = Array.from(tabDC.querySelectorAll("tr.tabRowDCutMed"));
                            for (let iTr = 0; iTr < medTrs.length; iTr++) {
                                medTrs[iTr].setAttribute("hidden", "");
                                const innerInp = medTrs[iTr].querySelector("input");
                                if (innerInp && innerInp.required) {
                                    innerInp.removeAttribute("required");
                                    if (medTrs[iTr].id?.slice(-4) !== "Coxa") {
                                        innerInp.value = "";
                                    }
                                }
                            }
                            for (let iMat = 0; iMat < matchedIds.length; iMat++) {
                                const matchedTr = document.getElementById(matchedIds[iMat]);
                                if (matchedTr) {
                                    const isRowHidden = matchedTr.hidden;
                                    if (isRowHidden) {
                                        matchedTr.removeAttribute("hidden");
                                    }
                                    const innerInp = matchedTr.querySelector("input");
                                    if (innerInp) {
                                        innerInp.setAttribute("required", "");
                                    }
                                }
                            }
                        }
                        else {
                            console.warn(`Erro na validação de ids de row. Elemento ${JSON.stringify(genderedIds)}; Número obtido ${genderedIds?.length ?? null}; Número esperado: 3`);
                        }
                    }
                    else if (bodyType.value === "neutro") {
                        if (genderedIds && genderedIds.length === 5) {
                            const matchedIds = [];
                            for (let iG = 0; iG < genderedIds.length; iG++) {
                                for (let iR = 0; iR < arrayTabIds.length; iR++) {
                                    if (genderedIds[iG].toLowerCase() === arrayTabIds[iR]) {
                                        const slice1 = genderedIds[iG].charAt(0).toUpperCase();
                                        const slice2 = genderedIds[iG].slice(1);
                                        const capitalizedGenderedId = slice1 + slice2;
                                        matchedIds.push(`row${capitalizedGenderedId}`);
                                    }
                                }
                            }
                            const medTrs = Array.from(tabDC.querySelectorAll("tr.tabRowDCutMed"));
                            for (let iTr = 0; iTr < medTrs.length; iTr++) {
                                medTrs[iTr].setAttribute("hidden", "");
                                const innerInp = medTrs[iTr].querySelector("input");
                                if (innerInp) {
                                    if (medTrs[iTr].id?.slice(-4) !== "Coxa") {
                                        innerInp.value = "";
                                    }
                                }
                            }
                            for (let iM = 0; iM < matchedIds.length; iM++) {
                                const matchedTr = document.getElementById(matchedIds[iM]);
                                if (matchedTr) {
                                    const isRowHidden = matchedTr.hidden;
                                    if (isRowHidden) {
                                        matchedTr.removeAttribute("hidden");
                                        const innerInp = matchedTr.querySelector("input");
                                        if (innerInp && matchedTr.id?.slice(-4) !== "Coxa") {
                                            innerInp.removeAttribute("required");
                                        }
                                    }
                                }
                            }
                        }
                        else {
                            console.warn(`Erro na validação de ids de row. Elemento ${JSON.stringify(genderedIds)}; Número obtido ${genderedIds?.length ?? null}; Número esperado: 3`);
                        }
                    }
                    else {
                        const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
                        _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_1__.stringError("validando .value de bodyType", bodyType?.value ?? null, slicedError ?? "NULL");
                    }
                }
                else {
                    console.warn(`Erro na verificação do número de rows. Elemento ${JSON.stringify(arrayTabIds)}; Número obtido: ${arrayTabIds?.length ?? null}; Número esperado: ${tabDC.rows.length}`);
                }
                return "pollock3";
            }
            else if (optionElementMatch7) {
                const medTrs = Array.from(tabDC.querySelectorAll("tr.tabRowDCutMed"));
                for (let iTr = 0; iTr < medTrs.length; iTr++) {
                    const isRowHidden = medTrs[iTr].hidden;
                    if (isRowHidden) {
                        medTrs[iTr].removeAttribute("hidden");
                        const innerInp = medTrs[iTr].querySelector("input");
                        if (innerInp) {
                            innerInp.setAttribute("required", "");
                        }
                    }
                }
                return "pollock7";
            }
            else {
                const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
                _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_1__.stringError("obtendo pollock.value", protocolo?.value ?? null, slicedError ?? "NULL");
                return "pollock3";
            }
        }
    }
    else {
        const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
        _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_1__.elementNotFound(bodyType ?? null, "bodyType", slicedError ?? "NULL");
        return "pollock3";
    }
    return "pollock3";
}
function checkTabRowsIds(tab) {
    const arrayTabIds = [];
    if (tab.id === "tabDCut") {
        const tableRows = Array.from(tab.querySelectorAll("tr.tabRowDCutMed"));
        for (let iR = 0; iR < tableRows.length; iR++) {
            const rowId = tableRows[iR].id;
            const rowIdMatch = rowId.match(/^row/)?.toString();
            if (rowIdMatch) {
                const slicedRowId = rowId.slice(3).toLowerCase();
                arrayTabIds.push(slicedRowId);
            }
            else {
                const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
                _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_1__.stringError(`obtendo id da row ${tableRows[iR] ?? null}`, rowId ?? null, slicedError ?? "NULL");
            }
        }
    }
    else {
        const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
        _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_1__.stringError(`obtendo id da table ${tab ?? null}`, tab.id ?? null, slicedError ?? "NULL");
    }
    return arrayTabIds;
}
//correção para limitação da fórmula de PGC
function isPGCDecaying(person, PGC, targInpPGC) {
    let foundDecayPoint = false;
    let sumAcc = 1;
    const initSumDCut = person.sumDCut;
    const decreasedPerson = _global_scripts_src_classes__WEBPACK_IMPORTED_MODULE_2__.Person.clonePerson(person);
    const spanRoundingAlertIcon = document.getElementById(`alert_${targInpPGC.id}`);
    if (!(spanRoundingAlertIcon instanceof HTMLSpanElement)) {
        const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
        _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_1__.elementNotFound(spanRoundingAlertIcon ?? null, "spanRoundingAlertIcon", slicedError ?? "NULL");
    }
    else {
        if (spanRoundingAlertIcon.hidden === false) {
            spanRoundingAlertIcon.hidden = true;
        }
    }
    if (decreasedPerson) {
        decreasedPerson.sumDCut = decreasedPerson.sumDCut - 1;
        let decreasedPGC = decreasedPerson.calcPGC(decreasedPerson);
        //caso padrão de decay
        if (decreasedPGC > PGC) {
            if (spanRoundingAlertIcon?.hidden === true) {
                spanRoundingAlertIcon.hidden = false;
            }
            const arrDecreasedPGC = [];
            while (decreasedPerson.sumDCut > 0) {
                sumAcc++;
                decreasedPerson.sumDCut = decreasedPerson.sumDCut - 1;
                decreasedPGC = decreasedPerson.calcPGC(decreasedPerson);
                arrDecreasedPGC.push(decreasedPGC);
                if (decreasedPGC < PGC) {
                    break;
                }
                if (sumAcc > 999) {
                    console.warn(`Ciclo 2 exaurido.`);
                    break;
                }
            }
            if (arrDecreasedPGC.length > 0) {
                const factorNormDecayedPGC = ((initSumDCut - 260) / 100) * 5;
                PGC =
                    Math.ceil((Math.max(...arrDecreasedPGC) + 0.05) * 10) / 10 +
                        factorNormDecayedPGC;
                if (decreasedPerson.sumDCut > 515) {
                    PGC = 60.5;
                }
            }
            else {
                PGC = decreasedPGC;
            }
            foundDecayPoint = true;
        }
        else if (decreasedPGC <= PGC) {
            //casos específicos para handling de input anômalo (além do possível para um ser humano), evitando bugs nos listeners devido a NaN e loops de normalização
            if (PGC > 100 || decreasedPerson.sumDCut > 514) {
                console.warn(`Valor anômalo de entrada para sumDCut e/ou PGC. Valor aproximado fornecido`);
                if (spanRoundingAlertIcon?.hidden === true) {
                    spanRoundingAlertIcon.hidden = false;
                }
                foundDecayPoint = true;
                PGC = 60.45 + 0.05 * ((decreasedPerson?.sumDCut ?? 514) - 513);
            }
        }
    }
    else {
        const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
        _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_1__.objectError("decreasedPerson", person ?? null, "person", "6", slicedError);
    }
    return [foundDecayPoint, PGC];
}


/***/ }),

/***/ "../../global-scripts/src/classes.tsx":
/*!*****************************************!*\
  !*** ../global-scripts/src/classes.tsx ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   JSONStorager: () => (/* binding */ JSONStorager),
/* harmony export */   JSONTitleStorager: () => (/* binding */ JSONTitleStorager),
/* harmony export */   Man: () => (/* binding */ Man),
/* harmony export */   Neutro: () => (/* binding */ Neutro),
/* harmony export */   Person: () => (/* binding */ Person),
/* harmony export */   Woman: () => (/* binding */ Woman)
/* harmony export */ });
// import React from "react";
class JSONStorager {
    #id;
    #value;
    constructor(id, value) {
        this.#id = id;
        this.#value = value;
        Object.freeze(this);
    }
    get showInpId() {
        return this.#id;
    }
    get showInpValue() {
        return this.#value;
    }
    get showAllInfo() {
        return [this.#id, this.#value];
    }
}
class JSONTitleStorager {
    #title;
    constructor(title) {
        this.#title = title;
        Object.freeze(this);
    }
    get showInpTitle() {
        return this.#title;
    }
}
class Person {
    gen;
    age;
    weight;
    height;
    sumDCut;
    atvLvl;
    constructor(gen, age, weight, height, sumDCut, atvLvl) {
        this.gen = gen;
        this.age = age;
        this.weight = weight;
        this.height = height;
        this.sumDCut = sumDCut;
        this.atvLvl = atvLvl;
    }
    checkAtvLvl(person) {
        if (person && "atvLvl" in person && this.atvLvl !== "") {
            switch (this.atvLvl) {
                case "sedentario":
                    return 1.2;
                case "leve":
                    return 1.4;
                case "moderado":
                    return 1.6;
                case "intenso":
                    return 1.9;
                case "muitoIntenso":
                    return 2.2;
                default:
                    console.error(`Erro validando caso. Caso obtido: ${this.atvLvl ?? "null"}; Casos possíveis: sedentário || leve || moderado || intenso || muitoIntenso`);
            }
        }
        else {
            console.error(`Erro validando instância de pessoa. Valor obtido: ${person ?? "null"}; instância ${Object.prototype.toString.call(person).slice(8, -1) ?? "null"}; Valor de Nível de Atividade Física obtido: ${this.atvLvl ?? "null"}`);
            return 0;
        }
        return 0;
    }
    calcIMC(person) {
        try {
            if (person &&
                "weight" in person &&
                this.weight > 0 &&
                "height" in person &&
                this.height > 0) {
                const IMC = this.weight / this.height ** 2;
                if (IMC && IMC > 0) {
                    const MLG = this.weight - this.weight * (IMC / 100) ?? 0;
                    if (IMC < 18.5) {
                        return ["abaixo", IMC, MLG];
                    }
                    else if (IMC >= 18.5 && IMC < 25.0) {
                        return ["eutrofico", IMC, MLG];
                    }
                    else if (IMC >= 25.0 && IMC < 30) {
                        return ["sobrepeso", IMC, MLG];
                    }
                    else if (IMC >= 30 && IMC < 35) {
                        return ["obeso1", IMC, MLG];
                    }
                    else if (IMC >= 35 && IMC < 40) {
                        return ["obeso2", IMC, MLG];
                    }
                    else if (IMC > 40) {
                        return ["obeso3", IMC, MLG];
                    }
                    else {
                        throw new Error(`Erro classificando IMC. Valor obtido: ${IMC ?? 0}; Valores possíveis devem ser positivos`);
                    }
                }
                else {
                    throw new Error(`Erro calculando IMC. Valores usados: Peso ${this.weight ?? 0} e Altura ${this.height ?? 0}`);
                }
            }
            else {
                throw new Error(`Erro validando dados fornecidos. Elemento pessoa: ${Object.prototype.toString.call(person).slice(8, -1) ?? "null"}; weight presente: ${"weight" in person ?? false};
          Peso obtido: ${this.weight ?? 0};
          height presente: ${"height" in person ?? false};
          Altura obtida: ${this.height ?? 0}`);
            }
        }
        catch (IMCError) {
            console.error(IMCError.message);
            return ["", 0, 0];
        }
    }
    calcPGC(person) {
        if ("sumDCut" in person && this.sumDCut >= 0) {
            if (person instanceof Man) {
                let DC = 1.10938 -
                    0.0008267 * this.sumDCut +
                    0.0000016 * this.sumDCut ** 2 -
                    0.0002574 * person.age;
                if (DC <= 0 || Number.isNaN(DC)) {
                    DC = 0.01;
                }
                let PGC = 495 / DC - 450;
                if (PGC <= 0 || Number.isNaN(PGC)) {
                    PGC = 0.01;
                }
                if (PGC > 100) {
                    PGC = 100;
                }
                return PGC;
            }
            else if (person instanceof Woman) {
                let DC = 1.0994921 -
                    0.0009929 * this.sumDCut +
                    0.0000023 * this.sumDCut ** 2 -
                    0.0001392 * person.age;
                if (DC <= 0 || Number.isNaN(DC)) {
                    DC = 0.01;
                }
                let PGC = 495 / DC - 450;
                if (PGC <= 0 || Number.isNaN(PGC)) {
                    PGC = 0.01;
                }
                if (PGC > 100) {
                    PGC = 100;
                }
                return PGC;
            }
            else if (person instanceof Neutro) {
                let DC = 1.10443605 -
                    0.0009098 * this.sumDCut +
                    0.00000195 * this.sumDCut ** 2 -
                    0.0001983 * person.age;
                if (DC <= 0 || Number.isNaN(DC)) {
                    DC = 0.01;
                }
                let PGC = 495 / DC - 450;
                if (PGC <= 0 || Number.isNaN(PGC)) {
                    PGC = 0.01;
                }
                if (PGC > 100) {
                    PGC = 100;
                }
                return PGC;
            }
            else {
                console.error(`Instância de objeto inválida. Instância obtida: ${Object.prototype.toString.call(person).slice(8, -1) ?? "null"}`);
                return 0;
            }
        }
        else {
            console.warn(`Erro validado Propriedade sumDCut:
      Está presente: ${"sumDCut" in person ?? false};
      Valor obtido: ${this.sumDCut ?? 0}`);
            return 0;
        }
    }
    calcTMB(person, IMC, factorAtleta, MLG) {
        try {
            if (person && "atvLvl" in person && this.atvLvl) {
                if (this.atvLvl === "muitoIntenso" &&
                    (factorAtleta === "MLG" || factorAtleta === "Peso")) {
                    if (factorAtleta === "MLG") {
                        if (MLG && MLG > 0) {
                            const TMB = 25.9 * MLG + 284;
                            return ["tinsley", TMB];
                        }
                        else {
                            throw new Error(`Erro validando MLG.
              Valor obtido: ${MLG ?? 0}`);
                        }
                    }
                    else if (factorAtleta === "Peso") {
                        if ("weight" in person && this.weight > 0) {
                            const TMB = 24.8 * this.weight + 10;
                            return ["tinsley", TMB];
                        }
                        else {
                            throw new Error(`Erro validando weight.
              Valor obtido: ${this.weight ?? 0}`);
                        }
                    }
                }
                else if (this.atvLvl === "sedentario" ||
                    this.atvLvl === "leve" ||
                    this.atvLvl === "moderado" ||
                    this.atvLvl === "intenso") {
                    if ("weight" in person &&
                        this.weight > 0 &&
                        "height" in person &&
                        this.height > 0 &&
                        "age" in person) {
                        if (IMC < 25.0 && IMC > 0) {
                            if (person instanceof Man) {
                                const TMB = 66 +
                                    (13.8 * this.weight + 5.0 * this.height - 6.8 * this.age);
                                return ["harrisBenedict", TMB];
                            }
                            else if (person instanceof Woman) {
                                const TMB = 655 +
                                    (9.6 * this.weight + 1.9 * this.height - 4.7 * this.age);
                                return ["harrisBenedict", TMB];
                            }
                            else if (person instanceof Neutro) {
                                const TMB = 360.5 +
                                    (11.7 * this.weight + 3.45 * this.height - 5.75 * this.age);
                                return ["harrisBenedict", TMB];
                            }
                            else {
                                throw new Error(`Erro validando instância de Person. Instância obtida: ${Object.prototype.toString.call(person).slice(8, -1) ??
                                    "null"}`);
                            }
                        }
                        else if (IMC >= 25.0) {
                            if (person instanceof Man) {
                                const TMB = 10 * this.weight + 6.25 * this.height - 5.0 * this.age + 5;
                                return ["mifflinStJeor", TMB];
                            }
                            else if (person instanceof Woman) {
                                const TMB = 10 * this.weight + 6.25 * this.height - 5.0 * this.age - 161;
                                return ["mifflinStJeor", TMB];
                            }
                            else if (person instanceof Neutro) {
                                const TMB = 10 * this.weight + 6.25 * this.height - 5.0 * this.age - 78;
                                return ["mifflinStJeor", TMB];
                            }
                            else {
                                throw new Error(`Erro validando instância de Person. Instância obtida: ${Object.prototype.toString
                                    .call(person)
                                    .slice(8, -1)}`);
                            }
                        }
                        else {
                            throw new Error(`Erro validando IMC. IMC obtido: ${IMC ?? 0}; Valor deve ser númerico, positivo e float`);
                        }
                    }
                    else {
                        throw new Error(`Erro validando propriedades de person.
            weight presente: ${"weight" in person ?? false};
            Valor de weight obtido: ${this.weight ?? 0};
            height presente: ${"height" in person ?? false};
            Valor de height obtido: ${this.height ?? 0};
            age presente: ${"age" in person ?? false};
            `);
                    }
                }
                else {
                    throw new Error(`Erro validando atvLvl e/ou factorAtleta.
            atvLvl obtido: ${this.atvLvl ?? "null"}
            Fator obtido: ${factorAtleta ?? "null"}; Fatores válidos: "MLG" || "Peso"`);
                }
            }
            else {
                throw new Error(`Erro validando person.
        Elemento: ${person ?? "null"};
        Instância: ${Object.prototype.toString.call(person).slice(8, -1) ?? "null"};
        atvLvl presente: ${"atvLvl" in person ?? false};
        Valor de atvLvl obtido: ${this.atvLvl ?? "null"}`);
            }
        }
        catch (TMBError) {
            console.error(TMBError.message);
            return ["", 0];
        }
    }
    calcGET(TMB, factorAtvLvl) {
        if (TMB && factorAtvLvl) {
            const GET = TMB * factorAtvLvl;
            return GET;
        }
        else {
            console.error(`Erro validando argumentos.
      TMB obtido: ${TMB ?? 0};
      factorAtvLvl obtido: ${factorAtvLvl ?? 0}`);
            return 0;
        }
    }
    static clonePerson(person) {
        if (person && "gen" in person) {
            switch (person.gen) {
                case "masculino":
                    return new Man(person.gen, person.age, person.weight, person.height, person.sumDCut, person.atvLvl);
                case "feminino":
                    return new Woman(person.gen, person.age, person.weight, person.height, person.sumDCut, person.atvLvl);
                case "neutro":
                    return new Neutro(person.gen, person.age, person.weight, person.height, person.sumDCut, person.atvLvl);
                default:
                    console.error(`Erro validando .gen de person passada para .clonePerson()
          .gen obtido: ${person?.gen ?? "null"}.`);
            }
        }
        else {
            console.error(`Erro validando person.
      Objeto obtido: ${Object.prototype.toString.call(person).slice(8, -1) ?? "null"};
      .gen presente: ${"gen" in person ?? false}.`);
        }
    }
}
class Man extends Person {
}
class Woman extends Person {
}
class Neutro extends Person {
}


/***/ }),

/***/ "../../global-scripts/src/errorHandler.tsx":
/*!**********************************************!*\
  !*** ../global-scripts/src/errorHandler.tsx ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   elementNotFound: () => (/* binding */ elementNotFound),
/* harmony export */   elementNotPopulated: () => (/* binding */ elementNotPopulated),
/* harmony export */   elementWithArrayError: () => (/* binding */ elementWithArrayError),
/* harmony export */   elementWithObjectError: () => (/* binding */ elementWithObjectError),
/* harmony export */   elementsNotFoundFunction: () => (/* binding */ elementsNotFoundFunction),
/* harmony export */   inputNotFound: () => (/* binding */ inputNotFound),
/* harmony export */   matchError: () => (/* binding */ matchError),
/* harmony export */   maxNumberError: () => (/* binding */ maxNumberError),
/* harmony export */   multipleElementsNotFound: () => (/* binding */ multipleElementsNotFound),
/* harmony export */   objectError: () => (/* binding */ objectError),
/* harmony export */   stringError: () => (/* binding */ stringError),
/* harmony export */   typeError: () => (/* binding */ typeError)
/* harmony export */ });
// import React from "react";
function elementNotFound(element, elementName, line) {
    if (!element) {
        element = "UNDEFINED ELEMENT";
    }
    if (!elementName) {
        elementName = "UNNAMED ELEMENT";
    }
    if (element instanceof HTMLSelectElement ||
        element instanceof HTMLTextAreaElement ||
        element instanceof HTMLOptionElement) {
        console.error(`
  ELEMENT NOT FOUND, LINE ${line ?? "UNDEFINED"}:
  Erro validando instância de ${element?.id || elementName || "NULL"}.
  Instância obtida: ${Object.prototype.toString.call(element)?.slice(8, -1) || "NULL"};
  .value obtido: ${element?.value ?? "NULL"}.`);
    }
    else {
        console.error(`
  ELEMENT NOT FOUND, LINE ${line ?? "UNDEFINED"}:
  Erro validando instância de ${element?.id || elementName || "UNDEFINED ID OR NAME"}.
  Instância obtida: ${Object.prototype.toString.call(element)?.slice(8, -1) || "NULL"}.`);
    }
}
function inputNotFound(element, elementName, line) {
    if (!element) {
        element = "UNDEFINED ELEMENT";
    }
    if (!elementName) {
        elementName = "UNNAMED ELEMENT";
    }
    console.error(`INPUT NOT FOUND, LINE ${line ?? "UNDEFINED"}:
  Erro validando ${element?.id || elementName || "UNDEFINED ID OR NAME"}.
  Elemento obtido: ${element ?? "NULL"};
  Instância obtida: ${Object.prototype.toString.call(element)?.slice(8, -1) || "NULL"};
  Tipo obtido (válido somente para <input>): ${element?.type || "NULL"};
  .value obtido: ${element?.value || "NULL"};
  .checked obitod: ${element?.checked || "NULL"}.`);
}
function elementWithArrayError(context, array, arrayName, element, elementName, line) {
    if (!element) {
        element = "UNDEFINED ELEMENT";
    }
    if (!elementName) {
        elementName = "UNNAMED ELEMENT";
    }
    console.error(`ELEMENT WITH ARRAY ERROR, LINE ${line ?? "UNDEFINED"}:
  Erro validando ${context}.
  ${elementName ?? "UNNAMED ELEMENT"} obtido: ${JSON.stringify(array) ?? "NULL"};
  Instância de ${arrayName ?? "UNNAMED ARRAY"} obtido: ${Object.prototype.toString.call(element)?.slice(8, -1) ?? "NULL"}.`);
}
function elementWithObjectError(context, object, element, elementName, line) {
    if (!element) {
        element = "UNDEFINED ELEMENT";
    }
    if (!elementName) {
        elementName = "UNNAMED ELEMENT";
    }
    console.error(`ELEMENT WITH OBJECT ERROR, LINE ${line ?? "UNDEFINED"}:
    Erro ${context ?? "Undefined Context"}. Elemento: ${JSON.stringify(object)}; instância: ${object?.constructor.name ?? "NULL"}
    ${elementName ?? "UNNAMED ELEMENT"}: instância obtida: ${Object.prototype.toString.call(element)?.slice(8, -1) ?? "NULL"}`);
}
function elementNotPopulated(array, arrayName, line) {
    if (!array) {
        array = "Undefined Array";
    }
    if (!arrayName) {
        arrayName = "UNNAMED ARRAY";
    }
    console.error(`ELEMENT POPULATION ERROR, LINE ${line ?? "UNDEFINED"}:
  Erro validando ${arrayName || "NULL"}.
  Array: ${Array.isArray(array)};
  List ou Collection: ${Object.prototype.toString.call(array)?.slice(8, -1) || "NULL"};
  Length obtida: ${array?.length || "0"};
  Stringificação: ${JSON.stringify(array) ?? "NULL"}`);
}
function multipleElementsNotFound(line, context, ...elements) {
    if (!context || context === "") {
        context = "Undefined Context";
    }
    let errorMessage = `MULTIPLE ELEMENTS NOT FOUND, LINE ${line ?? "UNDEFINED"}:
  Erro validando ${context || "Undefined Function Name"}.`;
    const mappedNullElements = elements.map((element) => element === null || element === undefined ? "NULL" : element);
    mappedNullElements.forEach((element) => {
        if (element instanceof HTMLInputElement ||
            element instanceof HTMLTextAreaElement ||
            element instanceof HTMLSelectElement ||
            element instanceof HTMLOptionElement) {
            if (element instanceof HTMLInputElement &&
                (element.type === "radio" || element.type === "checkbox")) {
                errorMessage += `Instância de ${element.id || "NULL"} obtida: ${Object.prototype.toString.call(element)?.slice(8, -1) ?? "NULL"};\n
        .checked obtido: ${element?.checked || "NULL"}`;
            }
            else {
                errorMessage += `Instância de ${element.id || "NULL"} obtida: ${Object.prototype.toString.call(element)?.slice(8, -1) ?? "NULL"};\n
        .value obtido: ${element?.value || "NULL"}`;
            }
        }
        else {
            errorMessage += `Instância de ${element.id || "NULL"} obtida: ${Object.prototype.toString.call(element)?.slice(8, -1) ?? "NULL"};\n`;
        }
    });
    console.error(errorMessage);
}
function elementsNotFoundFunction(line, funcName, ...elements) {
    let errorMessage = `ELEMENTS NOT FOUND FOR FUNCTION, LINE ${line ?? "UNDEFINED"}:
  Erro validando instância obtida para ${funcName || "NULL"}`;
    const mappedNullElements = elements.map((element) => element === null || element === undefined ? "NULL" : element);
    mappedNullElements.forEach((element) => {
        if (element instanceof HTMLInputElement ||
            element instanceof HTMLTextAreaElement ||
            element instanceof HTMLSelectElement ||
            element instanceof HTMLOptionElement) {
            if (element instanceof HTMLInputElement &&
                (element.type === "radio" || element.type === "checkbox")) {
                errorMessage += `Instância de ${element.id || "NULL"} obtida: ${Object.prototype.toString.call(element)?.slice(8, -1) ?? "NULL"};\n
        .checked obtido: ${element?.checked || "NULL"}`;
            }
            else {
                errorMessage += `Instância de ${element.id || "NULL"} obtida: ${Object.prototype.toString.call(element)?.slice(8, -1) ?? "NULL"};\n
        .value obtido: ${element?.value || "NULL"}`;
            }
        }
        else {
            errorMessage += `Instância de ${element?.id || "NULL"} obtida: ${Object.prototype.toString.call(element)?.slice(8, -1) ?? "NULL"};\n`;
        }
    });
    console.error(errorMessage);
}
function maxNumberError(unvalidNumber, title, line) {
    if (!unvalidNumber) {
        unvalidNumber = "0";
    }
    if (typeof unvalidNumber === "number") {
        unvalidNumber = unvalidNumber.toString();
    }
    console.error(`MAX NUMBER ERROR, LINE ${line ?? "UNDEFINED"}:
  Número de ${title || "Undefined Title"} inválidos.
  Número máximo obtido: ${parseInt(unvalidNumber, 10) || 0}`);
}
function stringError(context, text, line) {
    console.error(`STRING ERROR, LINE ${line ?? "UNDEFINED"}:
  Erro ${context}.
  Valor obtido: ${text ?? "NULL"}`);
}
function matchError(context, element, text, line) {
    console.error(`MATCH ERROR, LINE ${line ?? "UNDEFINED"}:
  Erro validando ${context || "Undefined Context"}.
  Elemento obtido: ${element || "UNDEFINED ELEMENT"};
  Título obtido: ${text || "Undefined Title"}.`);
}
function typeError(context, element, acceptedType, line) {
    console.error(`TYPE ERROR, LINE ${line ?? "UNDEFINED"}:
  Tipo primitivo obtido para ${context || "Undefined Context"} incorreto.
  Tipo obtido: ${typeof element ?? "Undefined typeof"};
  Tipo aceito: ${acceptedType || "Undefined Accepted Type"}`);
}
function objectError(context, object, objectName, maxPropertiesNumber, line) {
    console.error(`OBJECT ERROR, LINE ${line ?? "UNDEFINED"}:
  Erro validando ${objectName ?? "UNDEFINED OBJECT NAME"} para ${context || "Undefined Context"}.
  Objecto obtido: ${JSON.stringify(object) ?? "Undefined Object"};
  Número obtido de propriedades: ${Object.keys.length ?? 0}; Número aceito: ${maxPropertiesNumber ?? 0}`);
}


/***/ }),

/***/ "../../global-scripts/src/gHandlers.tsx":
/*!*******************************************!*\
  !*** ../global-scripts/src/gHandlers.tsx ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   changeToAstDigit: () => (/* binding */ changeToAstDigit),
/* harmony export */   cpbInpHandler: () => (/* binding */ cpbInpHandler),
/* harmony export */   createJSONAnchor: () => (/* binding */ createJSONAnchor),
/* harmony export */   cursorCheckTimer: () => (/* binding */ cursorCheckTimer),
/* harmony export */   deactTextInput: () => (/* binding */ deactTextInput),
/* harmony export */   doubleClickHandler: () => (/* binding */ doubleClickHandler),
/* harmony export */   getJSONDesc: () => (/* binding */ getJSONDesc),
/* harmony export */   opRadioHandler: () => (/* binding */ opRadioHandler),
/* harmony export */   regenerateJSONBtn: () => (/* binding */ regenerateJSONBtn),
/* harmony export */   resetarFormulario: () => (/* binding */ resetarFormulario),
/* harmony export */   searchNextSiblings: () => (/* binding */ searchNextSiblings),
/* harmony export */   searchParents: () => (/* binding */ searchParents),
/* harmony export */   searchPreviousSiblings: () => (/* binding */ searchPreviousSiblings),
/* harmony export */   searchPreviousSiblingsById: () => (/* binding */ searchPreviousSiblingsById),
/* harmony export */   subForm: () => (/* binding */ subForm),
/* harmony export */   updateSimpleProperty: () => (/* binding */ updateSimpleProperty),
/* harmony export */   useCurrentDate: () => (/* binding */ useCurrentDate)
/* harmony export */ });
/* harmony import */ var _gModel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gModel */ "../../global-scripts/src/gModel.tsx");
/* harmony import */ var _classes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./classes */ "../../global-scripts/src/classes.tsx");
/* harmony import */ var _errorHandler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./errorHandler */ "../../global-scripts/src/errorHandler.tsx");
//nesse file estão presentes principalmente as funções de manipulação dinâmica de texto e layout



// import React from 'react';
const mapIdsTitles = {
    firstNameId: "Primeiro_Nome",
    additionalNameId: "Sobrenome_do_Meio",
    familyNameId: "Último_Sobrenome",
    socialNameId: "Nome_Social",
    telAreaCodeId: "DDD",
    telId: "Telefone",
    telCountryCodeId: "Se_estrangeiro,_código_do_País",
    tel2AreaCodeId: "DDD_Do_Telefone_Secundário",
    tel2Id: "Telefone_Secundário",
    tel2CountryCodeId: "Se_estrangeiro(secundário),_código_do_País",
    email1Id: "Email",
    email2Id: "Email_Secundário",
    dateAgeId: "Idade",
    genid: "Gênero",
    genBirthRelId: "Identidade_em_relação_ao_gênero_designado_na_nascença",
    genTransId: "Estágio_da_Transição_Hormonal",
    genFisAlinId: "Alinhamento_de_características_físicas_predominante",
};
function updateSimpleProperty(element) {
    if (element instanceof HTMLInputElement) {
        if (element.type === "radio" || element.type === "checkbox") {
            return element.checked.toString();
        }
        else if (element.type === "number") {
            if (Number.isNaN(parseFloat(element.value.replaceAll(/[^0-9.,+-]/g, "")))) {
                console.warn(`element.value retornado como NaN, revertido para 0.`);
                return 0;
            }
            else {
                return parseFloat(element.value.replaceAll(/[^0-9.,+-]/g, ""));
            }
        }
        else if (element.type === "text" || element.type === "date") {
            return element.value;
        }
        else {
            console.warn(`Erro validando type de Input para atualização de propriedade de person.
      Tipo obtido: ${element?.type ?? "null"}`);
        }
    }
    else if (element instanceof HTMLSelectElement ||
        element instanceof HTMLTextAreaElement) {
        return element.value;
    }
    else {
        console.warn(`Erro validando Element para atualização de propriedade de person.
    Instância obitda: ${Object.prototype.toString.call(element).slice(8, -1) ?? "null"}`);
    }
}
function cursorCheckTimer(cursorPosition) {
    const selection = window.getSelection();
    if (selection && selection.focusNode !== null) {
        cursorPosition = selection.getRangeAt(0)?.startOffset;
        setTimeout(() => {
            return cursorPosition;
        }, 3000);
    }
    return 0;
}
function getJSONDesc(inputs) {
    const titleElements = [];
    const closestValidElements = [];
    const closestValidElementsIds = [];
    const closestBooleanElements = [];
    const closestBooleanElementsIds = [];
    const inpValues = [];
    const inpIds = [];
    const JSONInpsStoreDescriptors = [];
    const JSONTitlesStoreDescriptors = [];
    let JSONInpsStore = [];
    let JSONTitlesStore = [];
    let titleAcc = 0;
    let nullTitleAcc = 0;
    //determinação do número de inputs de identificação cujos títulos são de interesse e construção de subarray para estes
    for (let k = 0; k < inputs.length; k++) {
        if (inputs[k]?.classList.contains("inpIdentif")) {
            titleElements.push(inputs[k]);
        }
    }
    //loop para construção dos arrays inicias de ids e values
    for (let z = 0; z < inputs.length; z++) {
        if (inputs[z] instanceof HTMLInputElement) {
            if (inputs[z]?.type === "radio" ||
                inputs[z]?.type === "checkbox") {
                inpIds.push(inputs[z]?.id ?? "null");
                inpValues.push(inputs[z]?.checked.toString() ?? "false");
            }
            else {
                if (inputs[z].id === "confrmLocId") {
                    inpIds.push("confirmLoc");
                }
                else {
                    inpIds.push(inputs[z]?.id ?? "null");
                }
                inpValues.push(inputs[z]?.value ?? "null");
            }
        }
        else if (inputs[z] instanceof HTMLTextAreaElement ||
            inputs[z] instanceof HTMLSelectElement) {
            inpIds.push(inputs[z]?.id ?? "null");
            inpValues.push(inputs[z]?.value ?? "null");
        }
        else if (inputs[z]?.contentEditable === "true" ||
            inputs[z]?.id === "citeNameId") {
            inpIds.push(inputs[z]?.id ?? "null");
            inpValues.push(inputs[z]?.textContent ?? "null");
        }
        else {
            console.error(`Erro validando elemento. Elemento ${inputs[z] ?? "null"}; instância ${Object.prototype.toString
                .call(inputs[z])
                .slice(8, -1)}; id ${inputs[z]?.id ?? "null"}`);
        }
    }
    //loop para ajuste dos elementos dos arrays de inputs e construção dos storager de inputs
    for (let j = 0; j < inputs.length; j++) {
        //filtragem de tipos primitivos de values
        if (typeof inpValues[j] === "string") {
            if (inpValues[j] === "") {
                inpValues[j] = inpValues[j].replace("", "null") ?? "null";
            }
        }
        else {
            inpValues[j] = inpValues[j]?.toString() ?? "null";
        }
        //avaliador de ids nulas
        if (inpIds[j]?.match(/null/g) ||
            inpIds[j] === undefined ||
            inpIds[j] === null) {
            console.warn(`Id null detectada. Título relativo: ${closestValidElements[j] ?? "null"}`);
        }
        //criação do storager
        const nJSONInpStorager = new _classes__WEBPACK_IMPORTED_MODULE_1__.JSONStorager(inpIds[j], inpValues[j]);
        //criação da store
        if (nJSONInpStorager) {
            JSONInpsStore.push(nJSONInpStorager);
            const descriptor = nJSONInpStorager.showAllInfo; //TODO EXPOSIÇÃO DE DADOS SOMENTE PARA FINALIDADES DE TESTE, POIS PROPRIEDADES PRIVADAS NÃO SÃO ENUMERÁVEIS
            if (descriptor) {
                JSONInpsStoreDescriptors.push(descriptor.toString());
            }
            else {
                console.warn(`Erro validando descriptor para instância ${j} de JSONStorager`);
            }
        }
        else {
            console.warn(`Erro validando instância ${j} de JSONStorager`);
        }
    }
    //loop para extrair títulos/labels de interesse
    for (let i = 0; i < titleElements.length; i++) {
        titleAcc++;
        //loop para múltiplas tentativas de localização do texto de interesse
        let closestParent = titleElements[i]?.closest("span") || titleElements[i]?.closest("label");
        if (closestParent) {
            let loopAcc = 0;
            while (loopAcc < 10 && closestParent.textContent === "") {
                //loop para escalada genealógica até encontrar parent de interesse ou desistir após 10 iterações
                loopAcc++;
                closestParent =
                    closestParent?.closest("span") || closestParent?.closest("label");
                if (closestParent?.textContent !== "" || loopAcc > 10) {
                    break;
                }
            }
            if (closestParent?.textContent !== "") {
                if (closestParent?.textContent === "Sim" || //entrada em loop para eliminar parents com text sim/não (não informativo) ou desistir após 10 iterações
                    closestParent?.textContent === "Não") {
                    const booleanParentCopy = closestParent;
                    closestBooleanElements.push(booleanParentCopy?.textContent?.trim().replaceAll("\n", "") ??
                        `NULL ${titleElements[i]?.id ?? `Id null. Iteração do loop: ${titleAcc}`}`);
                    closestBooleanElementsIds.push(booleanParentCopy.id ?? "null");
                    while (loopAcc < 10 &&
                        closestParent &&
                        (closestParent.textContent === "Sim" ||
                            closestParent.textContent === "Não")) {
                        loopAcc++;
                        closestParent =
                            closestParent?.closest("span") || closestParent?.closest("label");
                        if ((closestParent &&
                            closestParent?.textContent !== "Sim" &&
                            closestParent?.textContent !== "Não" &&
                            closestParent?.textContent !== "") ||
                            loopAcc > 10) {
                            closestValidElements.push(closestParent?.textContent?.trim().replaceAll("\n", "") ??
                                `NULL ${titleElements[i]?.id ??
                                    `Id null. Iteração do loop: ${titleAcc}`}`);
                            closestValidElementsIds.push(closestParent?.id ??
                                `NULL ${titleElements[i]?.id ??
                                    `Id null. Iteração do loop: ${titleAcc}`}`);
                            break;
                        }
                    }
                }
                else {
                    if (titleElements[i] instanceof HTMLInputElement &&
                        titleElements[i]?.type === "radio" &&
                        titleElements[i]?.id !== "") {
                        if (titleElements[i]?.nextElementSibling &&
                            titleElements[i]?.nextElementSibling instanceof
                                HTMLLabelElement &&
                            titleElements[i]?.nextElementSibling?.classList.contains("boolOp")) {
                            if (titleElements[i]?.id.match(/Yes/)) {
                                closestValidElements.push(titleElements[i]?.id?.slice(-3) ??
                                    "null" +
                                        closestParent?.textContent?.trim().replaceAll("\n", "") ??
                                    `NULL ${titleElements[i]?.id ??
                                        `Id null. Iteração do loop: ${titleAcc}`}`);
                            }
                            else if (titleElements[i]?.id.match(/No/)) {
                                closestValidElements.push(titleElements[i]?.id?.slice(-2) ??
                                    "null" +
                                        closestParent?.textContent?.trim().replaceAll("\n", "") ??
                                    `NULL ${titleElements[i]?.id ??
                                        `Id null. Iteração do loop: ${titleAcc}`}`);
                            }
                            else {
                                console.warn("Caso inesperado de boolOp Radio + Label");
                            }
                        }
                        else {
                            if ((titleElements[i] instanceof HTMLInputElement ||
                                titleElements[i] instanceof HTMLTextAreaElement) &&
                                titleElements[i]?.name === "nivelFumo") {
                                closestValidElements.push(titleElements[i]?.id?.slice(0, 1)?.toUpperCase() ??
                                    "null" +
                                        titleElements[i]?.id?.slice(1, 4) +
                                        "_" +
                                        titleElements[i]?.id?.slice(4, 8) ??
                                    `NULL ${titleElements[i]?.id ??
                                        `Id null. Iteração do loop: ${titleAcc}`}`);
                            }
                        }
                    }
                    else {
                        if (titleElements[i]?.classList.contains("opFumSubs") &&
                            titleElements[i]?.nextElementSibling &&
                            titleElements[i]?.nextElementSibling?.textContent !== "") {
                            closestValidElements.push(titleElements[i]?.nextElementSibling?.textContent +
                                "_" +
                                closestParent?.textContent?.trim().replaceAll("\n", "") ??
                                `NULL ${titleElements[i]?.id ??
                                    `Id null. Iteração do loop: ${titleAcc}`}`);
                        }
                        else {
                            if (titleElements[i]?.classList.contains("inpAntMed")) {
                                closestValidElements.push("Tratamento_Médico" + "_" + titleElements[i]?.id.slice(-1) ??
                                    `NULL ${titleElements[i]?.id ??
                                        `Id null. Iteração do loop: ${titleAcc}`}`);
                            }
                            else {
                                if (titleElements[i]?.id === "citeNameId") {
                                    closestValidElements.push("Assinatura_Usuário" ?? 0);
                                }
                                else {
                                    closestValidElements.push(closestParent?.textContent?.trim().replaceAll("\n", "") ??
                                        `NULL ${titleElements[i]?.id ??
                                            `Id null. Iteração do loop: ${titleAcc}`}`);
                                }
                            }
                        }
                    }
                    if (closestParent?.id !== "") {
                        //obtenção de ids dos 'parents'
                        //correção de id de interesse caso a do parent não esteja presente (atenção: desassocia id e text de interesse)
                        closestValidElementsIds.push(closestParent?.id ?? "null");
                    }
                    else if (closestParent.id === "") {
                        const nextESibling = titleElements[i]?.nextElementSibling;
                        if (nextESibling &&
                            nextESibling instanceof HTMLLabelElement &&
                            nextESibling.textContent !== "") {
                            closestValidElementsIds.push(nextESibling.id ?? "null");
                        }
                        else {
                            const previousESibling = titleElements[i]?.previousElementSibling;
                            if (previousESibling &&
                                previousESibling instanceof HTMLLabelElement &&
                                previousESibling.textContent !== "") {
                                closestValidElementsIds.push(previousESibling.id ?? "null");
                            }
                            else if (titleElements[i] instanceof HTMLTextAreaElement &&
                                titleElements[i]?.placeholder !== "") {
                                closestValidElementsIds.push(titleElements[i]?.id ?? "null");
                            }
                            else {
                                console.warn(`Nenhuma id próxima válida retornada para o input ${titleElements[i]?.id}`);
                            }
                        }
                    }
                }
            }
            else if (closestParent?.textContent === "") {
                console.warn(`Erro ao localizar textContent de parent`);
            }
        }
        else {
            //se falha em parents, procura em siblings <label> ou em placeholders de textareas
            const previousSibling = titleElements[i]?.previousElementSibling;
            if (previousSibling instanceof HTMLLabelElement &&
                previousSibling.textContent !== "") {
                closestValidElements.push(previousSibling.textContent?.trim().replaceAll("\n", "") ??
                    `NULL ${titleElements[i]?.id ?? `Id null. Iteração do loop: ${titleAcc}`}`);
                closestValidElementsIds.push(previousSibling.id ?? "null");
            }
            else {
                if (titleElements[i] instanceof HTMLTextAreaElement &&
                    titleElements[i]?.placeholder) {
                    closestValidElements.push(titleElements[i]?.placeholder ??
                        `NULL ${titleElements[i]?.id ?? `Id null. Iteração do loop: ${titleAcc}`}`);
                    closestValidElementsIds.push(titleElements[i]?.id ?? "null");
                }
                else if (titleElements[i] instanceof HTMLInputElement &&
                    titleElements[i]?.type === "checkbox") {
                    if (titleElements[i]?.classList.contains("famOp")) {
                        const upperCaseMatch = titleElements[i]?.id?.match(/Fam/g);
                        if (upperCaseMatch && titleElements[i]?.id) {
                            const upperCaseIndex = titleElements[i]?.id.indexOf("Fam");
                            const slicedId = titleElements[i]?.id.slice(0, upperCaseIndex);
                            closestValidElements.push(slicedId +
                                "_" +
                                titleElements[i]?.nextSibling?.textContent?.replaceAll(/^[\s]+/g, "") ??
                                `NULL ${titleElements[i]?.id ??
                                    `Id null. Iteração do loop: ${titleAcc}`}`);
                        }
                        else {
                            closestValidElements.push(titleElements[i]?.nextSibling?.textContent?.replaceAll(/^[\s]+/g, "") ??
                                `NULL ${titleElements[i]?.id ??
                                    `Id null. Iteração do loop: ${titleAcc}`}`);
                        }
                    }
                    else if (titleElements[i]?.classList.contains("opHep")) {
                        closestValidElements.push("Hepatite_" +
                            titleElements[i]?.nextSibling?.textContent?.replaceAll(/^[\s]+/g, "") ?? "null");
                    }
                    else {
                        if (titleElements[i]?.id !== "confirmId") {
                            closestValidElements.push(titleElements[i]?.nextSibling?.textContent?.replaceAll(/^[\s]+/g, "") ??
                                `NULL ${titleElements[i]?.id ??
                                    `Id null. Iteração do loop: ${titleAcc}`}`);
                        }
                        else if (titleElements[i]?.id === "confirmId") {
                            closestValidElements.push("Concordo");
                        }
                    }
                    closestValidElementsIds.push(titleElements[i]?.id ?? "null");
                }
                else {
                    if (titleElements[i]?.classList.contains("opHAS")) {
                        closestValidElements.push(titleElements[i]?.nextSibling?.textContent?.trim() ??
                            `NULL ${titleElements[i]?.id ??
                                `Id null. Iteração do loop: ${titleAcc}`}`);
                        closestValidElementsIds.push(titleElements[i]?.id ?? "null");
                    }
                    else {
                        const nextESibling = titleElements[i]?.nextElementSibling;
                        if (nextESibling instanceof HTMLLabelElement &&
                            nextESibling.textContent !== "") {
                            closestValidElements.push(nextESibling.textContent?.trim().replaceAll("\n", "") ??
                                `NULL ${titleElements[i]?.id ??
                                    `Id null. Iteração do loop: ${titleAcc}`}`);
                            closestValidElementsIds.push(nextESibling.id ?? "null");
                        }
                        else {
                            console.warn(`Erro validando parents, labels, placeholders e textContent. Id do Input: ${titleElements[i]?.id ?? null}; textContent ${titleElements[i]?.textContent ?? null}; placeholder ${titleElements[i]?.placeholder ?? null}; Última Instância de Parent avaliada ${Object.prototype.toString
                                .call(closestParent)
                                .slice(8, -1)}; Instância de Sibling Labels ${Object.prototype.toString
                                .call(previousSibling)
                                .slice(8, -1)} && ${Object.prototype.toString
                                .call(nextESibling)
                                .slice(8, -1)}`);
                        }
                    }
                }
            }
        }
    }
    //loop para ajuste dos elementos dos arrays de titles e construção dos storager de titles
    for (let l = 0; l < titleElements.length; l++) {
        //correção de múltiplos espaços em labels e titles
        const multipleSpaceMatches = closestValidElements[l]?.match(/\s\s/) ?? null;
        if (closestValidElements[l] &&
            multipleSpaceMatches &&
            multipleSpaceMatches.length > 0) {
            const spaceMatchesArray = [];
            multipleSpaceMatches.forEach((multipleSpaceMatch) => {
                const multipleSpaceIndex = closestValidElements[l]?.indexOf(multipleSpaceMatch) ?? 0;
                spaceMatchesArray.push(multipleSpaceIndex);
            });
            for (let m = 0; m < spaceMatchesArray.length; m++) {
                closestValidElements[l] =
                    closestValidElements[l]?.slice(0, spaceMatchesArray[m]).trim() ??
                        "null";
            }
        }
        //avaliador de labels e titles nulos
        if (closestValidElements[l]?.match(/[Nn][Uu][Ll][Ll]/g) ||
            closestValidElements[l] === undefined ||
            closestValidElements[l] === null) {
            let inpValue = inputs[l]?.value || "null";
            if (inputs[l] instanceof HTMLInputElement &&
                (inputs[l]?.type === "radio" ||
                    inputs[l]?.type === "checkbox")) {
                inpValue =
                    inputs[l]?.checked.toString() ?? "false";
            }
            nullTitleAcc++;
            console.warn(`Título nulo detectado: Número de acúmulo: ${nullTitleAcc}.
            Título: ${closestValidElements[l] || closestValidElements[l] || "null"};
            instância: ${Object.prototype.toString
                .call(closestValidElements[l])
                .slice(8, -1) ?? "undefined"};
            Id de input pareada: ${inputs[l]?.id ?? "null"};
            Valor de input pareado ${inpValue || "null"}`);
        }
        //criação do storager
        const nJSONTitleStorager = new _classes__WEBPACK_IMPORTED_MODULE_1__.JSONTitleStorager(closestValidElements[l]);
        //criação da store
        if (nJSONTitleStorager) {
            JSONTitlesStore.push(nJSONTitleStorager);
            const descriptor = nJSONTitleStorager.showInpTitle; //TODO EXPOSIÇÃO DE DADOS SOMENTE PARA FINALIDADES DE TESTE, POIS PROPRIEDADES PRIVADAS NÃO SÃO ENUMERÁVEIS
            if (descriptor) {
                JSONTitlesStoreDescriptors.push(descriptor.toString());
            }
            else {
                console.warn(`Erro validando descriptor para instância ${l} de JSONStorager`);
            }
        }
        else {
            console.warn(`Erro validando instância ${l} de JSONStorager`);
        }
    }
    //filtro e validação da store
    if (JSONInpsStoreDescriptors.length === JSONInpsStore.length &&
        JSONTitlesStoreDescriptors.length === JSONTitlesStore.length) {
        const filter1JSONInpsStore = JSONInpsStore.filter((JSONEl) => typeof JSONEl === "object");
        const filter1JSONTitlesStore = JSONTitlesStore.filter((JSONEl) => typeof JSONEl === "object");
        if (filter1JSONInpsStore.length === JSONInpsStore.length &&
            filter1JSONTitlesStore.length === JSONTitlesStore.length) {
            JSONInpsStore = filter1JSONInpsStore;
            JSONTitlesStore = filter1JSONTitlesStore;
            const filter2JSONInpsStore = JSONInpsStore.filter((JSONEl) => JSONEl instanceof _classes__WEBPACK_IMPORTED_MODULE_1__.JSONStorager);
            const filter2JSONTitlesStore = JSONTitlesStore.filter((JSONEl) => JSONEl instanceof _classes__WEBPACK_IMPORTED_MODULE_1__.JSONTitleStorager);
            if (filter2JSONInpsStore.length === JSONInpsStore.length &&
                filter1JSONTitlesStore.length === JSONTitlesStore.length) {
                JSONInpsStore = filter2JSONInpsStore.sort();
                JSONTitlesStore = filter2JSONTitlesStore.sort();
                let JSONInpsStoreStringified = [];
                let JSONTitlesStoreStringified = [];
                //stringificação das stores
                JSONInpsStore.forEach((formEl) => {
                    const elValues = formEl.showAllInfo;
                    const elValuesStringified = JSON.stringify(elValues); //TODO DADOS EXPOSTO SOMENTE PARA FINS DE TESTE
                    JSONInpsStoreStringified.push(elValuesStringified);
                });
                JSONTitlesStore.forEach((formEl) => {
                    const elValues = formEl.showInpTitle;
                    const elValuesStringified = JSON.stringify(elValues); //TODO DADOS EXPOSTO SOMENTE PARA FINS DE TESTE
                    JSONTitlesStoreStringified.push(elValuesStringified);
                });
                JSONInpsStoreStringified = JSONInpsStoreStringified.sort();
                JSONTitlesStoreStringified = JSONTitlesStoreStringified.sort();
                //conclusão
                if (JSONInpsStore &&
                    JSONInpsStoreStringified &&
                    JSONTitlesStore &&
                    JSONTitlesStoreStringified) {
                    return [
                        JSONInpsStore,
                        JSONInpsStoreStringified,
                        JSONTitlesStore,
                        JSONTitlesStoreStringified,
                    ]; //stringified é a versão usada como Descriptor
                }
                else {
                    return [null, null, null, null];
                }
            }
            else {
                console.warn(`Erro validando classes de elementos no JSONStore. 
          Número de instâncias obtidas para inputs: ${filter2JSONInpsStore.length ?? "undefined"}; Número esperado: ${JSONInpsStore.length ?? "undefined"};
          Número de instâncias obtidas para titles: ${filter2JSONTitlesStore.length ?? "undefined"}; Número esperado: ${JSONTitlesStore.length ?? "undefined"}`);
            }
        }
        else {
            console.warn(`Erro validando tipos de elementos nas JSONStore. 
        Número de objetos obtidos para inputs: ${filter1JSONInpsStore.length ?? "undefined"}; Número esperado: ${JSONInpsStore.length ?? "undefined"};
        Número de objetos obtidos para titles: ${filter1JSONTitlesStore.length ?? "undefined"}; Número esperado: ${JSONTitlesStore.length ?? "undefined"}`);
        }
    }
    else {
        console.warn(`Length de JSON Store Descriptors inválida. 
      Length obtida para inputs: ${JSONInpsStoreDescriptors.length ?? "undefined"}; Length esperada: ${JSONInpsStore.length ?? "undefined"};
      Length obtida para titles: ${JSONTitlesStoreDescriptors.length ?? "undefined"}; Length esperada: ${JSONTitlesStore.length ?? "undefined"}`);
    }
}
function createJSONAnchor(JSONBtn, formInpsDescriptor) {
    const formattedFormDescriptor = formatJSONFile(formInpsDescriptor);
    const JSONBlob = new Blob([formattedFormDescriptor[1]], {
        type: "application/json",
    });
    const JSONLink = document.createElement("a");
    JSONLink.id = "anchorJSON";
    JSONLink.className = JSONBtn.className;
    JSONLink.style.width = JSONBtn.style.width;
    JSONLink.style.height = JSONBtn.style.height;
    JSONLink.textContent = "Baixar JSON";
    JSONLink.href = URL.createObjectURL(JSONBlob);
    JSONLink.download = "formData.json";
    JSONBtn.replaceWith(JSONLink);
    return JSONLink;
}
function formatJSONFile(formInpsDescriptor) {
    let formatFormDescIds = `{\n`;
    let formatFormDescTitles = ``;
    let formatFormDescIdsRead = `{\n`;
    let formatFormDescTitlesRead = `{\n`;
    let labAcc = 1;
    //geração das unidades formatadas
    for (let i = 0; i < formInpsDescriptor.length; i++) {
        const separationMatches = formInpsDescriptor[i].match(/",/g);
        if (separationMatches) {
            // const firstSepIndex = formInpsDescriptor[i].indexOf(",");
            const secondSepIndex = formInpsDescriptor[i].indexOf(",", formInpsDescriptor[i].indexOf(",") + 1);
            const lastSepIndex = formInpsDescriptor[i].lastIndexOf(separationMatches[0]);
            //formatação dos ids e values dos inputs
            let inpId = formInpsDescriptor[i].slice(secondSepIndex + 2, lastSepIndex + 1);
            let loopAcc = 0;
            while (inpId.match(/,/g)) {
                const commaIndex = inpId.indexOf(",");
                inpId = inpId.slice(commaIndex + 1);
                if (!inpId.match(/,/g) || loopAcc > 999) {
                    break;
                }
                loopAcc++;
            }
            const value = formInpsDescriptor[i].slice(lastSepIndex + 2, -1);
            const lab = mapIdsTitles[inpId.replaceAll(/"/g, "")];
            if (i == 89) {
                //bug não resolvido ainda
                if (!inpId) {
                    inpId = '"confirmLocId"';
                }
            }
            //construção e concatenação das unidades formatadas
            formatFormDescIds += `\t${inpId}: ${value}, \n`;
            formatFormDescIdsRead += `\t${labAcc}. ${inpId}: ${value}, \n`; //versões em lista numerada, para logs e enumeração posterior
            labAcc++;
            if (lab && lab !== "null" && lab !== "") {
                formatFormDescTitlesRead += `\t${labAcc}. ${lab} for ${inpId}: ${value}, \n`;
                formatFormDescTitles += `\t"${lab}": ${value}, \n`;
            }
        }
    }
    //ajustes finais nos descriptors e união
    const finalDescIds = (formatFormDescIds +
        `\n\n` +
        formatFormDescTitles +
        `}`).replace(", \n}", " \n}");
    const finalDescTitles = (`{` + formatFormDescTitles + `}`).replace(", \n}", " \n}");
    //para leitura em logs somente
    const finalDescIdsRead = (formatFormDescIdsRead + `}`)
        .replace(", \n}", " \n}")
        .replaceAll(/""null": "null",/g, "")
        .replaceAll(/""false": "false",/g, "")
        .replaceAll(/"null": "null",/g, "")
        .replaceAll(/"false": "false",/g, "")
        .replaceAll(/"false": "false"/g, "")
        .replaceAll(/"null": "null"/g, "")
        .replaceAll(/\t[0-9]{1,3}.\s:\s"null",\s\n/g, "")
        .replaceAll(/\t[0-9]{1,3}.\s:\s"false",\s\n/g, "")
        .replaceAll(/\t[0-9]{1,3}.\s\s\n/g, "");
    const finalDescTitlesRead = (formatFormDescTitlesRead + `}`)
        .replace(", \n}", " \n}")
        .replaceAll(/""null": "null",/g, "")
        .replaceAll(/""false": "false",/g, "")
        .replaceAll(/"null": "null",/g, "")
        .replaceAll(/"false": "false",/g, "")
        .replaceAll(/"false": "false"/g, "")
        .replaceAll(/"null": "null"/g, "")
        .replaceAll(/\t[0-9]{1,3}.\s:\s"null",\s\n/g, "")
        .replaceAll(/\t[0-9]{1,3}.\s:\s"false",\s\n/g, "")
        .replaceAll(/\t[0-9]{1,3}.\s\s\n/g, "");
    console.log(finalDescIdsRead);
    console.log(finalDescTitlesRead);
    return [finalDescTitles, finalDescIds];
}
function regenerateJSONBtn(JSONLink, formInpsDescriptor) {
    const newJSONBtn = document.createElement("button");
    newJSONBtn.id = "btnJSON";
    newJSONBtn.className = JSONLink.className;
    newJSONBtn.style.width = JSONLink.style.width;
    newJSONBtn.style.height = JSONLink.style.height;
    newJSONBtn.textContent = "Regenerar JSON";
    JSONLink.replaceWith(newJSONBtn);
    setTimeout(() => {
        newJSONBtn.addEventListener("click", () => createJSONAnchor(newJSONBtn, formInpsDescriptor));
    }, 1000);
    // return newJSONBtn;
}
function opRadioHandler(keydown) {
    const radioPairs = document.querySelectorAll('input[id$="Yes"], input[id$="No"]' //acessando como par
    );
    for (let i = 0; i < radioPairs.length; i += 2 //pulando de par em par
    ) {
        const radioYes = radioPairs[i];
        const radioNo = radioPairs[i + 1];
        if (!radioYes || !radioNo) {
            continue;
        }
        if (radioYes instanceof HTMLInputElement &&
            radioNo instanceof HTMLInputElement &&
            !radioYes.checked &&
            !radioNo.checked &&
            keydown instanceof KeyboardEvent) {
            if ((keydown.altKey && keydown.key === "y") || keydown.key === "Y") {
                radioYes.focus();
                radioYes.checked = true;
                setTimeout(() => {
                    radioYes.blur();
                }, 5000);
                return;
            }
            else if ((keydown.altKey && keydown.key === "n") ||
                keydown.key === "N") {
                radioNo.focus();
                radioNo.checked = true;
                setTimeout(() => {
                    radioNo.blur();
                }, 5000);
                return;
            }
        }
        else {
            console.warn(`radioYes: ${radioYes?.checked ?? false}`);
            console.warn(`radioNo: ${radioNo?.checked ?? false}`);
            console.warn(`${JSON.stringify(keydown)}`);
            const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
            _errorHandler__WEBPACK_IMPORTED_MODULE_2__.multipleElementsNotFound(slicedError ?? "NULL", "validando radioYes ou radiosNo ou keydown event target", radioYes ?? null, radioNo ?? null);
        }
    }
}
function cpbInpHandler(radio) {
    if (radio.parentElement && radio.parentElement.parentElement) {
        const opRadiosCheck = radio.parentElement?.parentElement?.querySelectorAll("input[id^='Cpb'][id$='Yes']");
        const opRadiosText = radio.parentElement?.parentElement?.querySelectorAll("input[id^='pb'][id$='Yes']");
        const antFamChecks = radio.parentElement?.parentElement?.querySelectorAll("input[id^='antFam']");
        const textAdd = radio.parentElement?.parentElement?.querySelectorAll("textarea[id^='textAdd']");
        const divAdd = radio.parentElement?.parentElement?.querySelectorAll("div[id^='divAdd']");
        //inclui ambos os tipos de eventos
        if (opRadiosCheck.length > 0) {
            opRadiosCheck?.forEach(function (opRadioCheck, i) {
                if (divAdd[i] instanceof HTMLElement &&
                    opRadioCheck instanceof HTMLInputElement &&
                    (opRadioCheck.type === "checkbox" || opRadioCheck.type === "radio")) {
                    if (!opRadioCheck.checked) {
                        divAdd[i].style.display = "none";
                    }
                    else {
                        divAdd[i].style.display = "block";
                    }
                }
            });
        }
        if (opRadiosText.length > 0) {
            opRadiosText?.forEach(function (opRadioText, i) {
                if (textAdd[i] instanceof HTMLElement &&
                    opRadioText instanceof HTMLInputElement &&
                    (opRadioText.type === "checkbox" || opRadioText.type === "radio")) {
                    if (!opRadioText.checked) {
                        textAdd[i].style.display = "none";
                    }
                    else {
                        textAdd[i].style.display = "block";
                    }
                }
            });
        }
        if (antFamChecks.length > 0) {
            antFamChecks?.forEach((antFamCheck, i) => {
                const closestAddElement = antFamChecks[i].parentElement?.nextElementSibling;
                if (closestAddElement instanceof HTMLDivElement) {
                    if (antFamCheck instanceof HTMLInputElement &&
                        (antFamCheck.type === "checkbox" || antFamCheck.type === "radio") &&
                        !antFamCheck.checked) {
                        closestAddElement.style.display = "none";
                    }
                    else {
                        closestAddElement.style.display = "block";
                    }
                }
            });
        }
    }
    else {
        const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
        _errorHandler__WEBPACK_IMPORTED_MODULE_2__.multipleElementsNotFound(slicedError ?? "NULL", "localizando parent elements de Radio", radio?.parentElement ?? null, radio?.parentElement?.parentElement ?? null);
    }
}
function deactTextInput() {
    const numberInputs = document.querySelectorAll('input[type="number"][id$=NumId]');
    const nullRadios = document.querySelectorAll('input[type="radio"][id$=NullId]');
    if (numberInputs.length !== nullRadios.length) {
        console.error("Número de texts e radios não corresponde!");
        return;
    }
    numberInputs.forEach((numberInput, i) => {
        const nullRadio = nullRadios[i];
        if (nullRadio.checked) {
            numberInput.setAttribute("disabled", "");
        }
        else {
            numberInput.removeAttribute("disabled");
        }
    });
}
function doubleClickHandler(input) {
    input.checked = input.checked ? false : true;
    cpbInpHandler(input);
    deactTextInput();
}
// export function touchStartHandler(keydown: KeyboardEvent) {
//   let firstTapTime = 0;
//   if (firstTapTime === 0) {
//     firstTapTime = Date.now();
//   } else {
//     const elapsed = Date.now() - firstTapTime;
//     if (elapsed < 1000) {
//       // Limite de tempo para considerar um duplo toque (300ms)
//       if (this.checked) {
//         this.checked = false;
//       } else {
//         this.checked = true;
//       }
//       firstTapTime = 0; // Reiniciar o temporizador
//     } else {
//       firstTapTime = Date.now(); // Iniciar um novo temporizador
//     }
//   }
//   opRadioHandler(keydown);
//   cpbInpHandler(this);
// }
function useCurrentDate(activation, dateBtn) {
    const dataAtual = new Date();
    const ano = dataAtual.getFullYear();
    const mes = (dataAtual.getMonth() + 1)
        .toString()
        .padStart(2, "0")
        .replaceAll("'", "");
    const dia = dataAtual
        .getDate()
        .toString()
        .padStart(2, "0")
        .replaceAll("'", "");
    const targInputDate = searchPreviousSiblings(dateBtn, "inpDate");
    if (activation.target === dateBtn &&
        targInputDate &&
        targInputDate.tagName === "INPUT" &&
        targInputDate instanceof HTMLInputElement) {
        targInputDate.value = ano + "-" + mes + "-" + dia;
    }
    else {
        const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
        _errorHandler__WEBPACK_IMPORTED_MODULE_2__.inputNotFound(targInputDate ?? null, "targInputDate", slicedError ?? "NULL");
    }
}
function searchNextSiblings(currentElement, searchedSiblingClass) {
    let loopAcc = 0;
    while (currentElement.nextElementSibling) {
        currentElement = currentElement.nextElementSibling;
        const isSiblingValid = currentElement.classList.contains(searchedSiblingClass);
        if (isSiblingValid || loopAcc > 999) {
            break;
        }
        loopAcc++;
    }
    return currentElement;
}
function searchPreviousSiblings(currentElement, searchedSiblingClass) {
    let loopAcc = 0;
    while (currentElement.previousElementSibling) {
        currentElement = currentElement.previousElementSibling;
        const isSiblingValid = currentElement.classList.contains(searchedSiblingClass);
        if (isSiblingValid || loopAcc > 999) {
            break;
        }
        loopAcc++;
    }
    return currentElement;
}
function searchPreviousSiblingsById(currentElement, searchedSiblingId) {
    let loopAcc = 0;
    while (currentElement.previousElementSibling) {
        currentElement = currentElement.previousElementSibling;
        const isSiblingValid = currentElement.id === searchedSiblingId;
        if (isSiblingValid || loopAcc > 999) {
            break;
        }
        loopAcc++;
    }
    return currentElement;
}
function searchParents(currentElement, searchedParentClass) {
    let loopAcc = 0;
    while (currentElement.parentElement) {
        currentElement = currentElement.parentElement;
        const isParentValid = currentElement.classList.contains(searchedParentClass);
        if (isParentValid || loopAcc > 999) {
            break;
        }
        loopAcc++;
    }
    return currentElement;
}
function changeToAstDigit(click, toFileInpBtn) {
    const useAstDigitRegex = /Usar Assinatura Digital/;
    const useAstDigtRegexObj = new RegExp(useAstDigitRegex);
    const useAstTextRegex = /Retornar à Assinatura Escrita/;
    const useAstTextRegexObj = new RegExp(useAstTextRegex);
    let labCont = toFileInpBtn.parentElement?.getElementsByClassName("labAst") ?? "null";
    if (labCont[0] === "null" &&
        (toFileInpBtn.parentElement?.tagName === "LABEL" ||
            toFileInpBtn.parentElement?.tagName === "SPAN")) {
        labCont = Array.of(toFileInpBtn.parentElement);
    }
    if (click.target === toFileInpBtn) {
        if (toFileInpBtn.textContent &&
            useAstDigtRegexObj.test(toFileInpBtn.textContent)) {
            const inpAst = searchPreviousSiblings(toFileInpBtn, "inpAst");
            if (inpAst instanceof HTMLInputElement) {
                const fileInp = document.createElement("input");
                fileInp.type = "file";
                fileInp.name = inpAst.name; //ignorar TS
                fileInp.id = inpAst.id;
                fileInp.className = inpAst.className;
                fileInp.setAttribute("accept", "image/*");
                if (inpAst.required) {
                    fileInp.required = inpAst.required; //ignorar TS
                }
                if (inpAst.parentElement) {
                    inpAst.parentElement.replaceChild(fileInp, inpAst);
                    const idLabMatch = labCont[0].id.match(/Ast/)?.toString() ?? "";
                    const idInpMatch = fileInp.id.match(/Ast/)?.toString() ?? "";
                    const idLabMatchIndex = labCont[0].id.indexOf(idLabMatch);
                    const idInpMatchIndex = fileInp.id.indexOf(idInpMatch);
                    if (idLabMatchIndex && idInpMatchIndex) {
                        const sliceOneLabId = labCont[0].id.slice(0, idLabMatchIndex);
                        const sliceTwoInpId = fileInp.id.slice(idInpMatchIndex);
                        labCont[0].id = sliceOneLabId + sliceTwoInpId;
                        toFileInpBtn.textContent = "Retornar à Assinatura Escrita";
                        if (toFileInpBtn.previousElementSibling instanceof HTMLButtonElement) {
                            toFileInpBtn.previousElementSibling?.setAttribute("hidden", "");
                        }
                    }
                    else {
                        console.warn("Erro no match de ids do input");
                    }
                    if (fileInp) {
                        fileInp.addEventListener("change", (chose) => {
                            try {
                                if (chose.target instanceof HTMLInputElement &&
                                    fileInp.files &&
                                    fileInp.files.length > 0) {
                                    const imgFile = fileInp.files[0];
                                    if (imgFile && imgFile.type.startsWith("image")) {
                                        const fileReader = new FileReader();
                                        fileReader.onload = (load) => {
                                            //definir lógica para carregamento
                                            //inicia preparo para evento de carregamento
                                            const imgUrl = load.target?.result; //checa a url do file que será carregado
                                            const imgAstDigt = document.createElement("img"); //cria container
                                            fileInp.id = inpAst.id;
                                            fileInp.className = inpAst.className;
                                            imgAstDigt.innerHTML = "";
                                            if (typeof imgUrl === "string") {
                                                imgAstDigt.src = imgUrl; //associação entre container e file carregado
                                            }
                                            imgAstDigt.id = fileInp.id;
                                            imgAstDigt.className = fileInp.className;
                                            imgAstDigt.setAttribute("alt", "Assinatura Digital");
                                            imgAstDigt.setAttribute("decoding", "async");
                                            imgAstDigt.setAttribute("loading", "eager");
                                            imgAstDigt.setAttribute("crossorigin", "anonymous");
                                            imgAstDigt.style.setProperty("max-width", "300px");
                                            imgAstDigt.style.setProperty("max-height", "200px");
                                            if (fileInp.parentElement &&
                                                labCont &&
                                                labCont.length > 0) {
                                                fileInp.parentElement.replaceChild(imgAstDigt, fileInp);
                                                const idLabMatch = labCont[0].id
                                                    .match(/Ast/)
                                                    ?.toString();
                                                const idInpMatch = imgAstDigt.id
                                                    .match(/Ast/)
                                                    ?.toString();
                                                if (idLabMatch && idInpMatch) {
                                                    const idLabMatchIndex = labCont[0].id.indexOf(idLabMatch);
                                                    const idInpMatchIndex = imgAstDigt.id.indexOf(idInpMatch);
                                                    const sliceOneLabId = labCont[0].id.slice(0, idLabMatchIndex);
                                                    const sliceTwoInpId = imgAstDigt.id.slice(idInpMatchIndex);
                                                    labCont[0].id =
                                                        sliceOneLabId + sliceTwoInpId;
                                                }
                                                else {
                                                    console.warn("Erro no match de ids do input");
                                                }
                                            }
                                            else {
                                                console.warn(`Erro na validação de labCont: elemento ${labCont}
                        e/ou parent: elemento ${fileInp.parentElement}`);
                                            }
                                            // imgAstDigt.style.width = imgAstDigt.parentElement.style.width;
                                            if (imgAstDigt) {
                                                // let computeImgAstdWidth = getComputedStyle(imgAstDigt).width;
                                                // imgAstDigt.parentElement.style.width = computeImgAstdWidth;
                                                imgAstDigt.style.setProperty("overflow", "auto");
                                            }
                                        };
                                        fileReader.readAsDataURL(imgFile); //lê o file baseado na src carregada
                                    }
                                }
                                else {
                                    throw new Error("Nenhum arquivo selecionado");
                                }
                            }
                            catch (error) {
                                console.error(error.message);
                            }
                        });
                    }
                }
            }
            else {
                const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
                _errorHandler__WEBPACK_IMPORTED_MODULE_2__.inputNotFound(inpAst ?? null, "inpAst", slicedError ?? "NULL");
            }
            //TODO INCLUIR TOKEN ANTI-CSRF QUANDO HOUVER SERVIDOR
            // fileInp.name = inpAst.name;
            // fileInp.id = inpAst.id;
            // fileInp.className = inpAst.className;
        }
        else if (toFileInpBtn.textContent &&
            useAstTextRegexObj.test(toFileInpBtn.textContent)) {
            const inpAst = searchPreviousSiblings(toFileInpBtn, "inpAst") ||
                searchPreviousSiblings(toFileInpBtn, "imgAstDigit");
            if (inpAst instanceof HTMLImageElement ||
                inpAst instanceof HTMLInputElement) {
                const fileInp = document.createElement("input");
                fileInp.type = "text";
                fileInp.name = inpAst.name;
                fileInp.id = inpAst.id;
                fileInp.className = inpAst.className;
                fileInp.setAttribute("required", "");
                if (inpAst.parentElement) {
                    inpAst.parentElement.replaceChild(fileInp, inpAst);
                    const idLabMatch = labCont[0].id
                        .match(/Ast/)
                        ?.toString();
                    const idInpMatch = fileInp.id.match(/Ast/)?.toString();
                    if (idLabMatch && idInpMatch) {
                        const idLabMatchIndex = labCont[0].id.indexOf(idLabMatch);
                        const idInpMatchIndex = fileInp.id.indexOf(idInpMatch);
                        const sliceOneLabId = labCont[0].id.slice(0, idLabMatchIndex);
                        const sliceTwoInpId = fileInp.id.slice(idInpMatchIndex);
                        labCont[0].id = sliceOneLabId + sliceTwoInpId;
                        toFileInpBtn.textContent = "Usar Assinatura Digital";
                        toFileInpBtn.previousElementSibling?.removeAttribute("hidden");
                        fileInp.addEventListener("input", () => _gModel__WEBPACK_IMPORTED_MODULE_0__.autoCapitalizeInputs(fileInp));
                    }
                    else {
                        console.warn("Erro no match de ids do Input");
                    }
                }
            }
            else {
                const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
                _errorHandler__WEBPACK_IMPORTED_MODULE_2__.elementNotFound(inpAst ?? null, "inpAst", slicedError ?? "NULL");
            }
        }
    }
}
function resetarFormulario(click, toFileInpBtns) {
    if (click.target instanceof HTMLElement &&
        click.target.tagName === "BUTTON") {
        const formulario = document.getElementById("formAnamGId");
        const editableCite = document.querySelector('cite[contenteditable="true"]');
        const genBirthRel = document.getElementById("genBirthRelId");
        const genTrans = document.getElementById("genTransId");
        if (formulario && formulario instanceof HTMLFormElement) {
            formulario.reset();
        }
        else {
            console.error("Erro validando formulário");
        }
        if (editableCite) {
            editableCite.textContent = `--Nome`;
            _gModel__WEBPACK_IMPORTED_MODULE_0__.removeFirstClick(editableCite);
        }
        else {
            console.warn(`editableCite não encontrado em reset.`);
        }
        if (genBirthRel instanceof HTMLSelectElement ||
            genBirthRel instanceof HTMLInputElement) {
            genBirthRel.value = "cis";
            genBirthRel.hidden = true;
        }
        else {
            console.warn(`genBirthRel não encontrado em reset.`);
        }
        if (genTrans instanceof HTMLSelectElement ||
            genTrans instanceof HTMLInputElement) {
            genTrans.value = "avancado";
            genTrans.hidden = true;
        }
        else {
            console.warn(`genTrans não encontrado em reset.`);
        }
        toFileInpBtns.forEach((toFileInpBtn) => {
            if (toFileInpBtn.textContent === "Retornar à Assinatura Escrita") {
                const inpAst = searchPreviousSiblings(toFileInpBtn, "inpAst") ||
                    searchPreviousSiblings(toFileInpBtn, "imgAstDigit");
                if (inpAst &&
                    (inpAst instanceof HTMLInputElement ||
                        inpAst instanceof HTMLImageElement)) {
                    const fileInp = document.createElement("input");
                    fileInp.type = "text";
                    fileInp.name = inpAst.name;
                    fileInp.id = inpAst.id;
                    fileInp.className = inpAst.className;
                    fileInp.setAttribute("required", "");
                    if (inpAst.parentElement) {
                        let labCont = toFileInpBtn.parentElement?.getElementsByClassName("labAst") ??
                            "null";
                        if ((labCont[0] === "null" || labCont[0].id === "") &&
                            (toFileInpBtn.parentElement?.tagName === "LABEL" ||
                                toFileInpBtn.parentElement?.tagName === "SPAN")) {
                            labCont = Array.of(toFileInpBtn.parentElement);
                        }
                        inpAst.parentElement.replaceChild(fileInp, inpAst);
                        const idLabMatch = labCont[0].id
                            .match(/Ast/)
                            ?.toString();
                        const idInpMatch = fileInp.id.match(/Ast/)?.toString();
                        if (idLabMatch && idInpMatch) {
                            const idLabMatchIndex = labCont[0].id.indexOf(idLabMatch);
                            const idInpMatchIndex = fileInp.id.indexOf(idInpMatch);
                            const sliceOneLabId = labCont[0].id.slice(0, idLabMatchIndex);
                            const sliceTwoInpId = fileInp.id.slice(idInpMatchIndex);
                            labCont[0].id = sliceOneLabId + sliceTwoInpId;
                            fileInp.addEventListener("input", () => _gModel__WEBPACK_IMPORTED_MODULE_0__.autoCapitalizeInputs(fileInp));
                            toFileInpBtn.textContent = "Usar Assinatura Digital";
                            toFileInpBtn.previousElementSibling?.removeAttribute("hidden");
                        }
                        else {
                            console.warn("Erro no match de ids do input");
                        }
                    }
                    else {
                        console.warn(`Erro localizando Parent Element de inpAst`);
                    }
                }
                else {
                    console.warn(`Erro reconhecendo Previous Element Sibling: inpAst ${Object.prototype.toString
                        .call(inpAst)
                        .slice(8, -1)}`);
                }
            }
        });
    }
    else {
        console.error(`Erro validando target: instância de ${Object.prototype.toString
            .call(click.target)
            .slice(8, -1)}`);
    }
}
//TODO FINALIZAR COM CSS
function subForm() {
    window.alert("Sistema ainda não pronto\n...mas você teria enviado clicando aqui! :)");
    // const requiredElements = document.querySelectorAll("[required]");
    // if (requiredElements) {
    //   const emptyElements = Array.from(requiredElements).filter((element) => {
    //     const value = element.value || element.textContent || "";
    //     return value === "";
    //   });
    //   if (emptyElements) {
    //     emptyElements.forEach((emptyElement) => {
    //       console.log("Elemento vazio: ", emptyElement.id);
    //       emptyElement.style.border = "rgb(255, 0, 0)";
    //       let emptyElementCStyle = window
    //         .getComputedStyle(emptyElement)
    //         .getPropertyValue("border-color");
    //       let rgbaMatch = emptyElementCStyle.match(rgbaRegex);
    //       if (rgbaMatch) {
    //         console.log("rgba " + rgbaMatch);
    //         // const fadingAlert = setInterval(() => {
    //         //   let rgbaMatch = emptyElementCStyle.match(rgbaRegex);
    //         // });
    //       }
    //     });
    //   }
    // }
}


/***/ }),

/***/ "../../global-scripts/src/gModel.tsx":
/*!****************************************!*\
  !*** ../global-scripts/src/gModel.tsx ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   autoCapitalizeCite: () => (/* binding */ autoCapitalizeCite),
/* harmony export */   autoCapitalizeInputs: () => (/* binding */ autoCapitalizeInputs),
/* harmony export */   checkAllGenConts: () => (/* binding */ checkAllGenConts),
/* harmony export */   filterIdsByGender: () => (/* binding */ filterIdsByGender),
/* harmony export */   fluxGen: () => (/* binding */ fluxGen),
/* harmony export */   generatePersonInstance: () => (/* binding */ generatePersonInstance),
/* harmony export */   hideGenFisAlin: () => (/* binding */ hideGenFisAlin),
/* harmony export */   hideStgTransHorm: () => (/* binding */ hideStgTransHorm),
/* harmony export */   normalizeNegatives: () => (/* binding */ normalizeNegatives),
/* harmony export */   numberLimit: () => (/* binding */ numberLimit),
/* harmony export */   removeFirstClick: () => (/* binding */ removeFirstClick),
/* harmony export */   showGenFisAlin: () => (/* binding */ showGenFisAlin),
/* harmony export */   showStgTransHorm: () => (/* binding */ showStgTransHorm),
/* harmony export */   switchAutocorrect: () => (/* binding */ switchAutocorrect)
/* harmony export */ });
/* harmony import */ var _gHandlers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gHandlers */ "../../global-scripts/src/gHandlers.tsx");
/* harmony import */ var _classes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./classes */ "../../global-scripts/src/classes.tsx");
/* harmony import */ var _errorHandler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./errorHandler */ "../../global-scripts/src/errorHandler.tsx");
//nesse file estão presentes principalmente as funções relacionadas à exigência de modelo textual e de visualização



// import React from 'react';
const autoCapitalizeFirstLetterRegex = /\b\w/;
let isAutocorrectOn = true;
function numberLimit(inputElement) {
    let numberValue = inputElement.value;
    const numberValueInt = parseInt(numberValue);
    const isAtivFis = inputElement.classList.contains("inpAtivFis");
    const isAlimRot = inputElement.classList.contains("inpAlimRot");
    const isLocNum = inputElement.classList.contains("inpLocNum");
    const isDDD = inputElement.classList.contains("inpDDD");
    const isFloat = inputElement.classList.contains("float");
    const isFreq = inputElement.classList.contains("freqInpList");
    if ((isAtivFis || isAlimRot || isLocNum || isDDD || isFreq) && !isFloat) {
        if (numberValue.match(/[=.,;~/|"!@#$%&*¬°ªº§¹²³£¢(){}[\]]/g)) {
            const wrongMatch = numberValue.match(/[=.,;~/|"!@#$%&*¬°ªº§¹²³£¢(){}[\]]/g);
            const wrongMatchIndex = numberValue.indexOf(wrongMatch?.[0] ?? "");
            const slicedValue = numberValue.slice(0, wrongMatchIndex);
            const afterSlice = numberValue.slice(wrongMatchIndex + 1);
            inputElement.value = slicedValue + afterSlice;
        }
        const maxLength = 2;
        const maxInput = inputElement.id.endsWith("Max");
        if (numberValueInt < 1 && maxInput) {
            const inpValueArray = Array.from(inputElement.value);
            inpValueArray.splice(0, 1, "1");
            const fixedInpValueinpValueArray = inpValueArray.toString();
            inputElement.value = fixedInpValueinpValueArray;
        }
        if ((isAtivFis || isAlimRot || isDDD || isFreq) &&
            numberValue.length > maxLength) {
            numberValue = numberValue.slice(0, maxLength);
            inputElement.value = numberValue;
        }
    }
}
function normalizeNegatives(tabInp) {
    let parsedInpValue = 0;
    if (tabInp instanceof HTMLInputElement) {
        parsedInpValue = parseFloat(tabInp.value);
        // if (Number.isNaN(parsedInpValue) || parsedInpValue < 0) {
        //   parsedInpValue = 0;
        // }
    }
    else {
        const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
        _errorHandler__WEBPACK_IMPORTED_MODULE_2__.inputNotFound(tabInp ?? null, "tabInp", slicedError ?? "NULL");
    }
    return parsedInpValue.toString();
}
function correctCursorNextWords(isCursorAutoMoved, isUndoUppercase, match, textElement) {
    let text = textElement.value || textElement.textContent || null;
    let isFixAfterDCursorExec = false;
    if (isFixAfterDCursorExec)
        return;
    const selectionPosition = window.getSelection()?.getRangeAt(0).startOffset;
    text = wrongStartCorrection(text, match);
    textElement.addEventListener("keyup", (fixmove) => {
        const keyboardEvent = fixmove;
        if (selectionPosition === 0 || selectionPosition === text?.length || 0) {
            if (keyboardEvent.key === " " ||
                keyboardEvent.key === "Backspace" ||
                (keyboardEvent.key >= "ArrowLeft" &&
                    keyboardEvent.key <= "ArrowDown") ||
                (keyboardEvent.key >= "a" && keyboardEvent.key <= "z") ||
                (keyboardEvent.key >= "A" && keyboardEvent.key <= "Z") ||
                isUndoUppercase) {
                if (!isFixAfterDCursorExec) {
                    isCursorAutoMoved = moveCursorToTheEnd(isCursorAutoMoved, textElement);
                }
                keyboardEvent.preventDefault();
                isFixAfterDCursorExec = true;
            }
        }
    });
    return [text, isCursorAutoMoved];
}
function wrongStartCorrection(text, wrongStartMatch) {
    let fixedText = text;
    if (wrongStartMatch && text) {
        const wrongStartLength = wrongStartMatch
            .toString()
            .replaceAll(",", "").length;
        const addErasedChar = text.slice(0, wrongStartLength - 1);
        const fixedStart = text.slice(wrongStartLength - 1);
        fixedText = fixedStart + addErasedChar;
    }
    return fixedText;
}
function moveCursorToTheEnd(isCursorAutoMoved, textElement) {
    if (window.getSelection && !isCursorAutoMoved) {
        const range = document.createRange();
        range.selectNodeContents(textElement);
        range.collapse(false);
        const sel = window.getSelection();
        sel?.removeAllRanges();
        sel?.addRange(range);
        isCursorAutoMoved = true;
    }
    else {
        isCursorAutoMoved = false;
    }
    return isCursorAutoMoved;
}
function fixCursorPosition(textElement, range, selection, shouldSetEnd) {
    range.setStart(textElement, 0);
    if (shouldSetEnd === true) {
        range.setEnd(textElement, 1);
    }
    range.collapse(true);
    selection?.removeAllRanges();
    selection?.addRange(range);
}
function fixFirstLetter(fstLet, regex, textElement, range, selection, shouldSetEnd) {
    let contText = textElement.value || textElement.textContent || "";
    const firstLetterMatch = fstLet?.match(regex);
    if (firstLetterMatch) {
        const capitalizedFirstLetter = fstLet?.toUpperCase();
        const nextLetters = contText.substring(1).toLowerCase();
        contText = capitalizedFirstLetter + nextLetters;
        const firstLetterMatch = fstLet?.match(regex);
        if (firstLetterMatch) {
            if (range.endOffset >= 1) {
                fixCursorPosition(textElement, range, selection, shouldSetEnd);
            }
        }
    }
    return contText;
}
function fixWrongStarts(text, match, length) {
    let fixedStr = text ?? "";
    if (text && match) {
        const wrongCharIndex = text.indexOf(match);
        const arrText = Array.from(text);
        arrText.splice(wrongCharIndex, length, "");
        fixedStr = arrText.toString().replaceAll(",", "");
    }
    return fixedStr;
}
function fixNextWordsIniNotD(remadeText, letMatch) {
    if (remadeText) {
        const gLetMatchI = remadeText.lastIndexOf(letMatch) + 1;
        const actChar = remadeText.charAt(gLetMatchI);
        const capChar = actChar.toUpperCase();
        const arrText = Array.from(remadeText);
        arrText[gLetMatchI] = capChar;
        remadeText = arrText.toString().replaceAll(",", "");
        if (remadeText.match(/^\s[\w]+/g)) {
            const removSpaceText = remadeText.slice(1, remadeText.length);
            remadeText = removSpaceText + " ";
        }
    }
    else {
        remadeText = "";
    }
    return remadeText;
}
function fixNextWordsAfterD(remadeText, letMatch) {
    const globalLetterMatchIndexD = remadeText
        ? remadeText.lastIndexOf(letMatch) + 1
        : undefined;
    if (globalLetterMatchIndexD) {
        const actualCharD = remadeText?.charAt(globalLetterMatchIndexD);
        const capitalizedCharD = actualCharD?.toUpperCase();
        if (remadeText && capitalizedCharD) {
            const citeTextArrayD = Array.from(remadeText);
            citeTextArrayD[globalLetterMatchIndexD] = capitalizedCharD;
            remadeText = citeTextArrayD.toString().replaceAll(",", "");
        }
    }
    return remadeText;
}
function fixUnproperUppercases(text, match, context) {
    const spaceRegex = /\s/g;
    const spaceMatches = text.match(spaceRegex);
    const upperCasesRepetitionsIndex = text.indexOf(match);
    const repeatedLetter = match.slice(0, 1);
    const textBeforeRepetitions = text.substring(0, upperCasesRepetitionsIndex);
    let addAcumulator = 0;
    let loweredRepetitions = "";
    loweredRepetitions = match.toLowerCase().slice(1);
    if (spaceMatches) {
        if (context === "NoD" ||
            context === "YesDCont" ||
            context == 0 ||
            context === 2 ||
            !context) {
            if (context === "YesDCont" || context === 2) {
                const lowercasesRegex = /[a-záàâäãéèêëíìîïóòôöõúùûü]/g;
                const lowercasesMatches = text.match(lowercasesRegex);
                if (lowercasesMatches) {
                    const numLowercases = lowercasesMatches.length;
                    addAcumulator += numLowercases;
                }
            }
            const numSpaces = spaceMatches.length;
            addAcumulator += numSpaces;
        }
        else if (context === "YesDVal" || context === 1) {
            addAcumulator = 1;
        }
        else {
            console.error(`Context value not suitable`);
        }
    }
    const textAfterRepetitions = text.slice(upperCasesRepetitionsIndex + 1 + loweredRepetitions.length - addAcumulator, text.length + 1);
    const textArray = Array.from(text);
    textArray.splice(upperCasesRepetitionsIndex + 1, loweredRepetitions.length, loweredRepetitions);
    if (context === "NoD" || context == 0 || !context) {
        text =
            textBeforeRepetitions +
                repeatedLetter +
                loweredRepetitions +
                textAfterRepetitions;
    }
    else if (context === "YesDVal") {
        const upperlowercombD = text.match(/D[a-záàâäãéèêëíìîïóòôöõúùûü][sS]?[\s]/);
        if (upperlowercombD) {
            if (upperlowercombD.length === 4) {
                const loweredS = upperlowercombD.toString().replace(/S/, "s");
                loweredRepetitions += loweredS;
            }
        }
        text = textBeforeRepetitions + loweredRepetitions + textAfterRepetitions;
    }
    else if (context === "YesDCont") {
        const multipleConjFix = /D[aeiouáàâäãéèêëíìîïóòôöõúùûü][s]\s[A-ZÁÀÂÄÃÉÈÊËÍÌÎÏÓÒÔÖÕÚÙÛÜ]{3,}/;
        const multipleConjFixMatch = text.match(multipleConjFix);
        if (multipleConjFixMatch) {
            text =
                textBeforeRepetitions + loweredRepetitions + "S" + textAfterRepetitions;
        }
        else {
            text = textBeforeRepetitions + loweredRepetitions + textAfterRepetitions;
        }
    }
    else {
        console.error(`Context value not suitable`);
    }
    return text;
}
function fixForcedUpperCase(textElement, wordMatch, wMatchIteration) {
    let text = textElement.value || textElement.textContent || "";
    const strDlowercase = wMatchIteration.toString();
    const DUppercased = strDlowercase.charAt(1).toUpperCase();
    if (DUppercased) {
        const strDAfter = strDlowercase.substring(0, 1) + DUppercased + strDlowercase.substring(2);
        const strDAfterMinusInd = (text?.length ?? 0) - strDAfter.length;
        const oppositeSlicedCite = text?.slice(strDAfterMinusInd);
        const startSlicedCite = text?.slice(0, strDAfterMinusInd);
        if (wordMatch.length >= 1 && startSlicedCite)
            text = startSlicedCite + oppositeSlicedCite;
    }
    return text;
}
function autoCapitalizeInputs(textElement) {
    let text = textElement?.value ?? null;
    if (isAutocorrectOn && text) {
        //inicialização de expressões regex com seus objetos e matches associados
        const newWordMatches = text.match(/\s[A-ZÁÀÂÄÃÉÈÊËÍÌÎÏÓÒÔÖÕÚÙÛÜ]?[a-zA-ZáàâäãéèêëíìîïóòôöõúùûüÁÀÂÄÃÉÈÊËÍÌÎÏÓÒÔÖÕÚÙÛÜ]+\s?[A-ZÁÀÂÄÃÉÈÊËÍÌÎÏÓÒÔÖÕÚÙÛÜ]?[a-zA-ZáàâäãéèêëíìîïóòôöõúùûüÁÀÂÄÃÉÈÊËÍÌÎÏÓÒÔÖÕÚÙÛÜ]*/g);
        const letterMatchesIniNotD = text.match(/\s[^d]/g);
        const letterMatchesIniD = text.match(/\sd/g);
        const notMatchesAfterDRegex = /\sd[aeioáàâäãéèêëíìîïóòôöõúùûüAEIOÁÀÂÄÃÉÈÊËÍÌÎÏÓÒÔÖÕÚÙÛÜ][sS]?\s/g;
        let letterNotMatchesAfterD = text.match(notMatchesAfterDRegex) ?? [];
        const afterDRegexOp1 = /\sd[^aeioáàâäãéèêëíìîïóòôöõúùûüAEIOÁÀÂÄÃÉÈÊËÍÌÎÏÓÒÔÖÕÚÙÛÜ]/g;
        const afterDRegexOp2 = /\sd[aeioáàâäãéèêëíìîïóòôöõúùûüAEIOÁÀÂÄÃÉÈÊËÍÌÎÏÓÒÔÖÕÚÙÛÜ][^sS\s]/g;
        const afterDRegexOp3 = /\sd[aeioáàâäãéèêëíìîïóòôöõúùûüAEIOÁÀÂÄÃÉÈÊËÍÌÎÏÓÒÔÖÕÚÙÛÜ][sS][a-zA-ZáàâäãéèêëíìîïóòôöõúùûüÁÀÂÄÃÉÈÊËÍÌÎÏÓÒÔÖÕÚÙÛÜ]/g;
        const letterMatchesAfterDOp1 = text.match(afterDRegexOp1);
        const letterMatchesAfterDOp2 = text.match(afterDRegexOp2);
        const letterMatchesAfterDOp3 = text.match(afterDRegexOp3);
        const lowercasesRegex = /[a-záàâäãéèêëíìîïóòôöõúùûü]/g;
        const lowercasesRegexObj = new RegExp(lowercasesRegex);
        const uppercasesRegex = /[A-ZÁÀÂÄÃÉÈÊËÍÌÎÏÓÒÔÖÕÚÙÛÜ]/;
        const uppercasesRegexObj = new RegExp(uppercasesRegex);
        const multipleUppercasesRegex = /[A-ZÁÀÂÄÃÉÈÊËÍÌÎÏÓÒÔÖÕÚÙÛÜ]{2,}/g;
        const multipleUppercasesMatches = text.match(multipleUppercasesRegex);
        const multipleUppercasesRegex2 = /D[a-záàâäãéèêëíìîïóòôöõúùûü][S]\s/g;
        const multipleUppercasesMatches2 = text.match(multipleUppercasesRegex2);
        const wrongUppercasesRegexOp1 = /[A-ZÁÀÂÄÃÉÈÊËÍÌÎÏÓÒÔÖÕÚÙÛÜ][a-záàâäãéèêëíìîïóòôöõúùûü]+[A-ZÁÀÂÄÃÉÈÊËÍÌÎÏÓÒÔÖÕÚÙÛÜ]\b/g;
        const wrongUppercasesMatchesOp1 = text.match(wrongUppercasesRegexOp1);
        const wrongUppercasesRegexOp2 = /[A-ZÁÀÂÄÃÉÈÊËÍÌÎÏÓÒÔÖÕÚÙÛÜ][a-záàâäãéèêëíìîïóòôöõúùûü]+[A-ZÁÀÂÄÃÉÈÊËÍÌÎÏÓÒÔÖÕÚÙÛÜ][a-záàâäãéèêëíìîïóòôöõúùûü]+\b/g;
        const wrongUppercasesMatchesOp2 = text.match(wrongUppercasesRegexOp2);
        const wrongUppercasesRegexOp3 = /[A-ZÁÀÂÄÃÉÈÊËÍÌÎÏÓÒÔÖÕÚÙÛÜ][a-záàâäãéèêëíìîïóòôöõúùûü]+[A-ZÁÀÂÄÃÉÈÊËÍÌÎÏÓÒÔÖÕÚÙÛÜ]+[a-záàâäãéèêëíìîïóòôöõúùûü]{2,3}\b/g;
        const wrongUppercasesMatchesOp3 = text.match(wrongUppercasesRegexOp3);
        const wrongUppercasesRegexOp4 = /[A-ZÁÀÂÄÃÉÈÊËÍÌÎÏÓÒÔÖÕÚÙÛÜ][a-záàâäãéèêëíìîïóòôöõúùûü][A-ZÁÀÂÄÃÉÈÊËÍÌÎÏÓÒÔÖÕÚÙÛÜ][a-záàâäãéèêëíìîïóòôöõúùûü]+[A-ZÁÀÂÄÃÉÈÊËÍÌÎÏÓÒÔÖÕÚÙÛÜ][a-záàâäãéèêëíìîïóòôöõúùûü]+\b/g;
        const wrongUppercasesMatchesOp4 = text.match(wrongUppercasesRegexOp4);
        const wrongUppercasesRegexOp5 = /[A-ZÁÀÂÄÃÉÈÊËÍÌÎÏÓÒÔÖÕÚÙÛÜ][a-záàâäãéèêëíìîïóòôöõúùûü]{1,2}[A-ZÁÀÂÄÃÉÈÊËÍÌÎÏÓÒÔÖÕÚÙÛÜ][a-záàâäãéèêëíìîïóòôöõúùûü]+[a-záàâäãéèêëíìîïóòôöõúùûüA-ZÁÀÂÄÃÉÈÊËÍÌÎÏÓÒÔÖÕÚÙÛÜ]+\b/g;
        const wrongUppercasesMatchesOp5 = text.match(wrongUppercasesRegexOp5);
        const wrongUppercasesRegexOp6 = /[A-ZÁÀÂÄÃÉÈÊËÍÌÎÏÓÒÔÖÕÚÙÛÜ][a-záàâäãéèêëíìîïóòôöõúùûü]+[a-záàâäãéèêëíìîïóòôöõúùûü]+[A-ZÁÀÂÄÃÉÈÊËÍÌÎÏÓÒÔÖÕÚÙÛÜ]+[a-záàâäãéèêëíìîïóòôöõúùûü][a-záàâäãéèêëíìîïóòôöõúùûü]+\b/g;
        const wrongUppercasesMatchesOp6 = text.match(wrongUppercasesRegexOp6);
        const wrongUppercasesRegexOp7 = /D[A-ZÁÀÂÄÃÉÈÊËÍÌÎÏÓÒÔÖÕÚÙÛÜ][sS]/g;
        const wrongUppercasesMatchesOp7 = text.match(wrongUppercasesRegexOp7);
        const wrongUppercasesRegexOp8 = /D[AEIOÁÀÂÄÃÉÈÊËÍÌÎÏÓÒÔÖÕÚÙÛÜ][^sS]/g;
        const wrongUppercasesMatchesOp8 = text.match(wrongUppercasesRegexOp8);
        const wrongUppercasesRegexOp9 = /D[aeioáàâäãéèêëíìîïóòôöõúùûüAEIOÁÀÂÄÃÉÈÊËÍÌÎÏÓÒÔÖÕÚÙÛÜ][sS]\s/g;
        const wrongUppercasesMatchesOp9 = text.match(wrongUppercasesRegexOp9);
        const wrongStartRegex = /^[a-záàâäãéèêëíìîïóòôöõúùûü]+[A-ZÁÀÂÄÃÉÈÊËÍÌÎÏÓÒÔÖÕÚÙÛÜ]/;
        const wrongStartMatch = text.match(wrongStartRegex)?.toString() ?? null;
        const wrongCharsRegexOp1 = /[\s]*[\d\n,;.+\-=~\\/|"!@#$%&*¬°ªº§¹²³£¢(){}[\]]+[\s]*[\d\n,;.+\-=~\\/|"!@#$%&*¬°ªº§¹²³£¢(){}[\]]*/g;
        const wrongCharsMatchesOp1 = text.match(wrongCharsRegexOp1);
        const wrongCharsRegexOp2 = /$[\d\n,;.+\-=~\\/|"!@#$%&*¬°ªº§¹²³£¢(){}[\]]+/g;
        const wrongCharsMatchesOp2 = text.match(wrongCharsRegexOp2);
        const wrongCharsRegexOp3 = /(?<=\sdD)[\d\n,;.+\-=~\\/|"!@#$%&*¬°ªº§¹²³£¢(){}[\]]+/g;
        const wrongCharsMatchesOp3 = text.match(wrongCharsRegexOp3);
        //inicialização de outras variáveis
        const selection = window.getSelection();
        const range = document.createRange();
        let remadeText = text;
        let isUndoUppercase = false;
        let isCursorAutoMoved = false;
        if (text.length === 1 && !newWordMatches) {
            textElement.value = fixFirstLetter(text[0], autoCapitalizeFirstLetterRegex, textElement, range, selection, false);
        }
        else if (text.length > 1) {
            if (textElement.classList.contains("inpAst") ||
                textElement.classList.contains("inpIdentif")) {
                //IIFE para encapsular correção de inícios incorretos de entrada
                (() => {
                    if (wrongCharsMatchesOp1 ||
                        wrongCharsMatchesOp2 ||
                        wrongCharsMatchesOp3) {
                        const wrongCharsMatches = [
                            ...(wrongCharsMatchesOp1 || []),
                            ...(wrongCharsMatchesOp2 || []),
                            ...(wrongCharsMatchesOp3 || []),
                        ];
                        for (let iW = 0; iW < wrongCharsMatches.length; iW++) {
                            const wrongCharLength = wrongCharsMatches[iW].length;
                            wrongCharsMatches.forEach((wrongCharMatch) => {
                                textElement.value = fixWrongStarts(text, wrongCharMatch, wrongCharLength);
                                const arrCorrectCursor = correctCursorNextWords(isCursorAutoMoved, isUndoUppercase, wrongStartMatch, textElement);
                                [textElement.value, isCursorAutoMoved] = arrCorrectCursor;
                            });
                        }
                    }
                })();
                if (wrongStartMatch) {
                    textElement.value =
                        wrongStartCorrection(textElement.value, wrongStartMatch) ?? "";
                }
                if (newWordMatches) {
                    newWordMatches.forEach(() => {
                        //IIFE para capitalizar palavras após a primeira
                        (() => {
                            if (letterMatchesIniNotD && !letterMatchesIniD) {
                                letterMatchesIniNotD.forEach((letterMatch) => {
                                    remadeText = fixNextWordsIniNotD(remadeText, letterMatch);
                                });
                                textElement.value = remadeText;
                                const arrCorrectCursor = correctCursorNextWords(isCursorAutoMoved, isUndoUppercase, wrongStartMatch, textElement);
                                [textElement.value, isCursorAutoMoved] = arrCorrectCursor;
                                textElement.value =
                                    wrongStartCorrection(textElement.value, wrongStartMatch) ??
                                        "";
                            }
                            else if ((letterMatchesIniNotD && letterMatchesIniD) ||
                                (!letterMatchesIniNotD && letterMatchesIniD)) {
                                //IIFE para correção focada em conjunção com D
                                (() => {
                                    let letterMatchesAfterD = [];
                                    if (!letterNotMatchesAfterD &&
                                        (letterMatchesAfterDOp1 ||
                                            letterMatchesAfterDOp2 ||
                                            letterMatchesAfterDOp3)) {
                                        letterMatchesAfterD = [
                                            ...(letterMatchesAfterDOp1 || []),
                                            ...(letterMatchesAfterDOp2 || []),
                                            ...(letterMatchesAfterDOp3 || []),
                                        ];
                                    }
                                    else if (letterNotMatchesAfterD &&
                                        !(letterMatchesAfterDOp1 ||
                                            letterMatchesAfterDOp2 ||
                                            letterMatchesAfterDOp3)) {
                                        if (letterNotMatchesAfterD && letterMatchesIniNotD) {
                                            letterMatchesAfterD = [...(letterMatchesIniNotD || [])];
                                        }
                                    }
                                    else if (letterNotMatchesAfterD &&
                                        (letterMatchesAfterDOp1 ||
                                            letterMatchesAfterDOp2 ||
                                            letterMatchesAfterDOp3 ||
                                            letterMatchesIniNotD)) {
                                        letterMatchesAfterD = [
                                            ...(letterMatchesAfterDOp1 || []),
                                            ...(letterMatchesAfterDOp2 || []),
                                            ...(letterMatchesAfterDOp3 || []),
                                        ];
                                    }
                                    //IIFE para capitalização focada em iniciais D
                                    (() => {
                                        letterMatchesAfterD?.forEach((letterMatchD) => {
                                            remadeText = fixNextWordsAfterD(remadeText, letterMatchD);
                                        });
                                        textElement.value = remadeText;
                                        const arrayCheckLowerCasesD = Array.from(letterMatchesAfterD ?? []);
                                        for (let iD = 0; iD < arrayCheckLowerCasesD.length; iD++) {
                                            const filteredArrayD = letterMatchesAfterD?.filter((iD) => lowercasesRegexObj.test(iD));
                                            if (filteredArrayD) {
                                                const mappedArrayD = filteredArrayD.map((iD) => iD.toUpperCase());
                                                let remadeStringD = "";
                                                const targLetter = filteredArrayD[iD];
                                                const regexTargLetter = new RegExp(targLetter, "g");
                                                if (iD === 0) {
                                                    filteredArrayD.splice(iD, 1, mappedArrayD[0]);
                                                    remadeStringD = filteredArrayD
                                                        .toString()
                                                        .replaceAll(",", "");
                                                    const arrCorrectCursor = correctCursorNextWords(isCursorAutoMoved, isUndoUppercase, wrongStartMatch, textElement);
                                                    [textElement.value, isCursorAutoMoved] =
                                                        arrCorrectCursor;
                                                }
                                                else if (iD === 1) {
                                                    filteredArrayD.splice(iD, 1, mappedArrayD[1]);
                                                    remadeStringD = filteredArrayD
                                                        .toString()
                                                        .replaceAll(",", "")
                                                        .slice(2);
                                                    const arrCorrectCursor = correctCursorNextWords(isCursorAutoMoved, isUndoUppercase, wrongStartMatch, textElement);
                                                    [textElement.value, isCursorAutoMoved] =
                                                        arrCorrectCursor;
                                                    if (textElement.value) {
                                                        textElement.value = textElement.value.replace(regexTargLetter, remadeStringD);
                                                    }
                                                }
                                                else if (iD > 2) {
                                                    filteredArrayD.pop();
                                                    filteredArrayD.push(mappedArrayD[iD]);
                                                    const arrCorrectCursor = correctCursorNextWords(isCursorAutoMoved, isUndoUppercase, wrongStartMatch, textElement);
                                                    [textElement.value, isCursorAutoMoved] =
                                                        arrCorrectCursor;
                                                }
                                            }
                                        }
                                    })();
                                })();
                            }
                        })();
                    });
                }
                //statement para correção de múltiplos upper cases
                if (multipleUppercasesMatches || multipleUppercasesMatches2) {
                    //IIFE para encapsular correção de múltiplos upper cases
                    (() => {
                        const unproperUppercases = [
                            ...(multipleUppercasesMatches || []),
                            ...(wrongUppercasesMatchesOp1 || []),
                            ...(wrongUppercasesMatchesOp2 || []),
                            ...(wrongUppercasesMatchesOp3 || []),
                            ...(wrongUppercasesMatchesOp4 || []),
                            ...(wrongUppercasesMatchesOp5 || []),
                            ...(wrongUppercasesMatchesOp6 || []),
                        ];
                        const unproperDUppercases = [
                            ...(wrongUppercasesMatchesOp7 || []),
                            ...(wrongUppercasesMatchesOp8 || []),
                            ...(wrongUppercasesMatchesOp9 || []),
                        ];
                        unproperUppercases.forEach((multipleUppercasesMatch) => {
                            if (text && multipleUppercasesMatch) {
                                text = fixUnproperUppercases(text, multipleUppercasesMatch, "NoD");
                                //correção de bugs com combinações posteriores de upper/lower
                                // const upperlowercomb = text.match(
                                //   /[a-záàâäãéèêëíìîïóòôöõúùûü][A-ZÁÀÂÄÃÉÈÊËÍÌÎÏÓÒÔÖÕÚÙÛÜ]/g
                                // );
                                // const upperlowercombD = text.match(
                                //   /D[a-záàâäãéèêëíìîïóòôöõúùûü][\s]/
                                // );
                                // if (upperlowercomb || upperlowercombD) {
                                //   repeatedLetter = repeatedLetter.toLowerCase();
                                // }
                                //fix para delay em processamento do S em conjunções
                                const upperlowercombDS = text.match(/D[a-záàâäãéèêëíìîïóòôöõúùûü][S][\s]/);
                                if (upperlowercombDS) {
                                    upperlowercombDS.splice(3, 1, "s");
                                }
                                textElement.value = text;
                                isUndoUppercase = true;
                                const arrCorrectCursor = correctCursorNextWords(isCursorAutoMoved, isUndoUppercase, wrongStartMatch, textElement);
                                [textElement.value, isCursorAutoMoved] = arrCorrectCursor;
                                if (range.endOffset >= 1) {
                                    fixCursorPosition(textElement, range, selection, true);
                                }
                            }
                        });
                        unproperDUppercases.forEach((multipleUppercasesMatch) => {
                            if (text && multipleUppercasesMatch) {
                                textElement.value = fixUnproperUppercases(text, multipleUppercasesMatch, "YesDVal");
                                isUndoUppercase = true;
                                const arrCorrectCursor = correctCursorNextWords(isCursorAutoMoved, isUndoUppercase, wrongStartMatch, textElement);
                                [textElement.value, isCursorAutoMoved] = arrCorrectCursor;
                                if (range.endOffset >= 1) {
                                    fixCursorPosition(textElement, range, selection, true);
                                }
                            }
                        });
                    })();
                }
                //statement para controle de combinação após entrada com inicial D
                if (letterMatchesIniD &&
                    letterNotMatchesAfterD &&
                    !(letterMatchesAfterDOp1 ||
                        letterMatchesAfterDOp2 ||
                        letterMatchesAfterDOp3)) {
                    letterNotMatchesAfterD = [];
                }
                //statement para fluxo validando match de iniciais
                if (letterMatchesIniD || letterMatchesIniNotD) {
                    //IIFE para forçar upper case
                    (() => {
                        const wordMatch = [
                            ...(letterMatchesAfterDOp1 || []),
                            ...(letterMatchesAfterDOp2 || []),
                            ...(letterMatchesAfterDOp3 || []),
                            ...(letterMatchesIniNotD || []),
                        ];
                        const DMatch = [
                            ...(letterMatchesAfterDOp1 || []),
                            ...(letterMatchesAfterDOp2 || []),
                            ...(letterMatchesAfterDOp3 || []),
                        ];
                        for (let iM = 0; iM < wordMatch.length; iM++) {
                            const uppercaseTest = uppercasesRegexObj.test(wordMatch[iM]);
                            if (uppercaseTest)
                                continue;
                            textElement.value = fixForcedUpperCase(textElement, wordMatch, wordMatch[iM]);
                            if (DMatch.flat(1).length > 0) {
                                const arrCorrectCursor = correctCursorNextWords(isCursorAutoMoved, isUndoUppercase, wrongStartMatch, textElement);
                                [textElement.value, isCursorAutoMoved] = arrCorrectCursor;
                            }
                        }
                    })();
                }
                //IIFE para fazer correções adicionais no final da edição automática
                (() => {
                    if (wrongCharsMatchesOp1) {
                        textElement.value =
                            textElement.value?.replaceAll(wrongCharsRegexOp1, "") ?? null;
                    }
                    if (wrongCharsMatchesOp2) {
                        textElement.value =
                            textElement.value?.replaceAll(wrongCharsRegexOp2, "") ?? null;
                    }
                    if (wrongCharsMatchesOp3) {
                        textElement.value =
                            textElement.value?.replaceAll(wrongCharsRegexOp3, "") ?? null;
                    }
                    if (text.match(/\s[\s]+/g)) {
                        textElement.value =
                            textElement.value?.replaceAll(/\s[\s]+/g, " ") ?? null;
                    }
                    if (text.match(/^[a-záàâäãéèêëíìîïóòôöõúùûü]/)) {
                        const firstLetterCapitalized = text.slice(0, 1).toUpperCase();
                        const restOfText = text.slice(1);
                        textElement.value = firstLetterCapitalized + restOfText;
                    }
                })();
            }
        }
    }
}
function autoCapitalizeCite(editableCite) {
    const citeText = editableCite?.textContent ?? null;
    if (isAutocorrectOn && citeText) {
        //inicialização de expressões regex com seus objetos e matches associados
        const newWordMatches = citeText.match(/\s[A-ZÁÀÂÄÃÉÈÊËÍÌÎÏÓÒÔÖÕÚÙÛÜ]?[a-zA-ZáàâäãéèêëíìîïóòôöõúùûüÁÀÂÄÃÉÈÊËÍÌÎÏÓÒÔÖÕÚÙÛÜ]+\s?[A-ZÁÀÂÄÃÉÈÊËÍÌÎÏÓÒÔÖÕÚÙÛÜ]?[a-zA-ZáàâäãéèêëíìîïóòôöõúùûüÁÀÂÄÃÉÈÊËÍÌÎÏÓÒÔÖÕÚÙÛÜ]*/g);
        const letterMatchesIniNotD = citeText.match(/\s[^d]/g);
        const letterMatchesIniD = citeText.match(/\sd/g);
        const notMatchesAfterDRegex = /\sd[aeioáàâäãéèêëíìîïóòôöõúùûüAEIOÁÀÂÄÃÉÈÊËÍÌÎÏÓÒÔÖÕÚÙÛÜ][sS]?\s/g;
        let letterNotMatchesAfterD = citeText.match(notMatchesAfterDRegex) ?? [];
        const afterDRegexOp1 = /\sd[^aeioáàâäãéèêëíìîïóòôöõúùûüAEIOÁÀÂÄÃÉÈÊËÍÌÎÏÓÒÔÖÕÚÙÛÜ]/g;
        const afterDRegexOp2 = /\sd[aeioáàâäãéèêëíìîïóòôöõúùûüAEIOÁÀÂÄÃÉÈÊËÍÌÎÏÓÒÔÖÕÚÙÛÜ][^sS\s]/g;
        const afterDRegexOp3 = /\sd[aeioáàâäãéèêëíìîïóòôöõúùûüAEIOÁÀÂÄÃÉÈÊËÍÌÎÏÓÒÔÖÕÚÙÛÜ][sS][a-zA-ZáàâäãéèêëíìîïóòôöõúùûüÁÀÂÄÃÉÈÊËÍÌÎÏÓÒÔÖÕÚÙÛÜ]/g;
        const letterMatchesAfterDOp1 = citeText.match(afterDRegexOp1);
        const letterMatchesAfterDOp2 = citeText.match(afterDRegexOp2);
        const letterMatchesAfterDOp3 = citeText.match(afterDRegexOp3);
        const lowercasesRegex = /[a-záàâäãéèêëíìîïóòôöõúùûü]/g;
        const lowercasesRegexObj = new RegExp(lowercasesRegex);
        // const lowercasesMatches = citeText.match(lowercasesRegex);
        const uppercasesRegex = /[A-ZÁÀÂÄÃÉÈÊËÍÌÎÏÓÒÔÖÕÚÙÛÜ]/;
        const uppercasesRegexObj = new RegExp(uppercasesRegex);
        const multipleUppercasesRegex = /[A-ZÁÀÂÄÃÉÈÊËÍÌÎÏÓÒÔÖÕÚÙÛÜ]{2,}/g;
        const multipleUppercasesMatches = citeText.match(multipleUppercasesRegex);
        const wrongUppercasesRegexOp1 = /[A-ZÁÀÂÄÃÉÈÊËÍÌÎÏÓÒÔÖÕÚÙÛÜ][a-záàâäãéèêëíìîïóòôöõúùûü]+[A-ZÁÀÂÄÃÉÈÊËÍÌÎÏÓÒÔÖÕÚÙÛÜ]\b/g;
        const wrongUppercasesMatchesOp1 = citeText.match(wrongUppercasesRegexOp1);
        const wrongUppercasesRegexOp2 = /[A-ZÁÀÂÄÃÉÈÊËÍÌÎÏÓÒÔÖÕÚÙÛÜ][a-záàâäãéèêëíìîïóòôöõúùûü]+[A-ZÁÀÂÄÃÉÈÊËÍÌÎÏÓÒÔÖÕÚÙÛÜ][a-záàâäãéèêëíìîïóòôöõúùûü]+\b/g;
        const wrongUppercasesMatchesOp2 = citeText.match(wrongUppercasesRegexOp2);
        const wrongUppercasesRegexOp3 = /[A-ZÁÀÂÄÃÉÈÊËÍÌÎÏÓÒÔÖÕÚÙÛÜ][a-záàâäãéèêëíìîïóòôöõúùûü]+[A-ZÁÀÂÄÃÉÈÊËÍÌÎÏÓÒÔÖÕÚÙÛÜ]+[a-záàâäãéèêëíìîïóòôöõúùûü]{2,3}\b/g;
        const wrongUppercasesMatchesOp3 = citeText.match(wrongUppercasesRegexOp3);
        const wrongUppercasesRegexOp4 = /[A-ZÁÀÂÄÃÉÈÊËÍÌÎÏÓÒÔÖÕÚÙÛÜ][a-záàâäãéèêëíìîïóòôöõúùûü][A-ZÁÀÂÄÃÉÈÊËÍÌÎÏÓÒÔÖÕÚÙÛÜ][a-záàâäãéèêëíìîïóòôöõúùûü]+[A-ZÁÀÂÄÃÉÈÊËÍÌÎÏÓÒÔÖÕÚÙÛÜ][a-záàâäãéèêëíìîïóòôöõúùûü]+\b/g;
        const wrongUppercasesMatchesOp4 = citeText.match(wrongUppercasesRegexOp4);
        const wrongUppercasesRegexOp5 = /[A-ZÁÀÂÄÃÉÈÊËÍÌÎÏÓÒÔÖÕÚÙÛÜ][a-záàâäãéèêëíìîïóòôöõúùûü]{1,2}[A-ZÁÀÂÄÃÉÈÊËÍÌÎÏÓÒÔÖÕÚÙÛÜ][a-záàâäãéèêëíìîïóòôöõúùûü]+[a-záàâäãéèêëíìîïóòôöõúùûüA-ZÁÀÂÄÃÉÈÊËÍÌÎÏÓÒÔÖÕÚÙÛÜ]+\b/g;
        const wrongUppercasesMatchesOp5 = citeText.match(wrongUppercasesRegexOp5);
        const wrongUppercasesRegexOp6 = /[A-ZÁÀÂÄÃÉÈÊËÍÌÎÏÓÒÔÖÕÚÙÛÜ][a-záàâäãéèêëíìîïóòôöõúùûü]+[a-záàâäãéèêëíìîïóòôöõúùûü]+[A-ZÁÀÂÄÃÉÈÊËÍÌÎÏÓÒÔÖÕÚÙÛÜ]+[a-záàâäãéèêëíìîïóòôöõúùûü][a-záàâäãéèêëíìîïóòôöõúùûü]+\b/g;
        const wrongUppercasesMatchesOp6 = citeText.match(wrongUppercasesRegexOp6);
        const wrongUppercasesRegexOp7 = /D[A-ZÁÀÂÄÃÉÈÊËÍÌÎÏÓÒÔÖÕÚÙÛÜ][sS]/g;
        const wrongUppercasesMatchesOp7 = citeText.match(wrongUppercasesRegexOp7);
        const wrongUppercasesRegexOp8 = /D[AEIOÁÀÂÄÃÉÈÊËÍÌÎÏÓÒÔÖÕÚÙÛÜ][^sS]/g;
        const wrongUppercasesMatchesOp8 = citeText.match(wrongUppercasesRegexOp8);
        const wrongUppercasesRegexOp9 = /D[aeioáàâäãéèêëíìîïóòôöõúùûü][s]\s/g;
        const wrongUppercasesMatchesOp9 = citeText.match(wrongUppercasesRegexOp9);
        const wrongStartRegex = /^[a-záàâäãéèêëíìîïóòôöõúùûü]+[A-ZÁÀÂÄÃÉÈÊËÍÌÎÏÓÒÔÖÕÚÙÛÜ]/;
        const wrongStartMatch = citeText.match(wrongStartRegex)?.toString() ?? null;
        const wrongCharsRegexOp1 = /[\s]*[\d\n,;.+\-=~\\/|"!@#$%&*¬°ªº§¹²³£¢(){}[\]]+[\s]*[\d\n,;.+\-=~\\/|"!@#$%&*¬°ªº§¹²³£¢(){}[\]]*/g;
        const wrongCharsMatchesOp1 = citeText.match(wrongCharsRegexOp1);
        const wrongCharsRegexOp2 = /$[\d\n,;.+\-=~\\/|"!@#$%&*¬°ªº§¹²³£¢(){}[\]]+/g;
        const wrongCharsMatchesOp2 = citeText.match(wrongCharsRegexOp2);
        const wrongCharsRegexOp3 = /(?<=\sdD)[\d\n,;.+\-=~\\/|"!@#$%&*¬°ªº§¹²³£¢(){}[\]]+/g;
        const wrongCharsMatchesOp3 = citeText.match(wrongCharsRegexOp3);
        //inicialização de outras variáveis
        const selection = window.getSelection();
        const range = document.createRange();
        let remadeCiteText = citeText;
        let isCursorAutoMoved = false;
        let isAlertMade = false;
        let isSpanActive = false;
        let isUndoUppercase = false;
        //statement para diferenciar início do restante do input
        if (citeText.length === 1 && !newWordMatches) {
            editableCite.textContent = fixFirstLetter(citeText[0], autoCapitalizeFirstLetterRegex, editableCite, range, selection, true);
        }
        else if (citeText.length > 1) {
            //IIFE para encapsular correção de inícios incorretos de entrada
            (() => {
                if (wrongCharsMatchesOp1 ||
                    wrongCharsMatchesOp2 ||
                    wrongCharsMatchesOp3) {
                    const wrongCharsMatches = [
                        ...(wrongCharsMatchesOp1 || []),
                        ...(wrongCharsMatchesOp2 || []),
                        ...(wrongCharsMatchesOp3 || []),
                    ];
                    for (let iW = 0; iW < wrongCharsMatches.length; iW++) {
                        const wrongCharLength = wrongCharsMatches[iW].length;
                        wrongCharsMatches.forEach((wrongCharMatch) => {
                            editableCite.textContent = fixWrongStarts(citeText, wrongCharMatch, wrongCharLength);
                            const arrCorrectCursor = correctCursorNextWords(isCursorAutoMoved, isUndoUppercase, wrongStartMatch, editableCite);
                            [editableCite.textContent, isCursorAutoMoved] = arrCorrectCursor;
                            isCursorAutoMoved = moveCursorToTheEnd(isCursorAutoMoved, editableCite);
                            [isSpanActive, isAlertMade] = createSpanAlert(isSpanActive, isAlertMade);
                        });
                    }
                }
            })();
            if (wrongStartMatch) {
                editableCite.textContent = wrongStartCorrection(editableCite.textContent, wrongStartMatch);
            }
            if (newWordMatches) {
                newWordMatches.forEach(() => {
                    //IIFE para capitalizar palavras após a primeira
                    (() => {
                        if (letterMatchesIniNotD && !letterMatchesIniD) {
                            letterMatchesIniNotD.forEach((letterMatch) => {
                                remadeCiteText = fixNextWordsIniNotD(remadeCiteText, letterMatch);
                            });
                            editableCite.textContent = remadeCiteText;
                            isCursorAutoMoved = moveCursorToTheEnd(isCursorAutoMoved, editableCite);
                            const arrCorrectCursor = correctCursorNextWords(isCursorAutoMoved, isUndoUppercase, wrongStartMatch, editableCite);
                            [editableCite.textContent, isCursorAutoMoved] = arrCorrectCursor;
                            editableCite.textContent = wrongStartCorrection(editableCite.textContent, wrongStartMatch);
                        }
                        else if ((letterMatchesIniNotD && letterMatchesIniD) ||
                            (!letterMatchesIniNotD && letterMatchesIniD)) {
                            //IIFE para correção focada em conjunção com D
                            (() => {
                                let letterMatchesAfterD = [];
                                if (!letterNotMatchesAfterD &&
                                    (letterMatchesAfterDOp1 ||
                                        letterMatchesAfterDOp2 ||
                                        letterMatchesAfterDOp3)) {
                                    letterMatchesAfterD = [
                                        ...(letterMatchesAfterDOp1 || []),
                                        ...(letterMatchesAfterDOp2 || []),
                                        ...(letterMatchesAfterDOp3 || []),
                                    ];
                                }
                                else if (letterNotMatchesAfterD &&
                                    !(letterMatchesAfterDOp1 ||
                                        letterMatchesAfterDOp2 ||
                                        letterMatchesAfterDOp3)) {
                                    if (letterNotMatchesAfterD && letterMatchesIniNotD) {
                                        letterMatchesAfterD = [...(letterMatchesIniNotD || [])];
                                    }
                                }
                                else if (letterNotMatchesAfterD &&
                                    (letterMatchesAfterDOp1 ||
                                        letterMatchesAfterDOp2 ||
                                        letterMatchesAfterDOp3 ||
                                        letterMatchesIniNotD)) {
                                    letterMatchesAfterD = [
                                        ...(letterMatchesAfterDOp1 || []),
                                        ...(letterMatchesAfterDOp2 || []),
                                        ...(letterMatchesAfterDOp3 || []),
                                    ];
                                }
                                //IIFE para capitalização focada em iniciais D
                                (() => {
                                    letterMatchesAfterD.forEach((letterMatchD) => {
                                        remadeCiteText = fixNextWordsAfterD(remadeCiteText, letterMatchD);
                                    });
                                    editableCite.textContent = remadeCiteText;
                                    const arrayCheckLowerCasesD = Array.from(letterMatchesAfterD ?? []);
                                    for (let iD = 0; iD < arrayCheckLowerCasesD.length; iD++) {
                                        const filteredArrayD = letterMatchesAfterD?.filter((iD) => lowercasesRegexObj.test(iD));
                                        if (filteredArrayD) {
                                            const mappedArrayD = filteredArrayD.map((iD) => iD.toUpperCase());
                                            let remadeStringD = "";
                                            const targLetter = filteredArrayD[iD];
                                            const regexTargLetter = new RegExp(targLetter, "g");
                                            if (iD === 0) {
                                                [isSpanActive, isAlertMade] = createSpanAlert(isSpanActive, isAlertMade);
                                                filteredArrayD.splice(iD, 1, mappedArrayD[0]);
                                                remadeStringD = filteredArrayD
                                                    .toString()
                                                    .replaceAll(",", "");
                                                const arrCorrectCursor = correctCursorNextWords(isCursorAutoMoved, isUndoUppercase, wrongStartMatch, editableCite);
                                                [editableCite.textContent, isCursorAutoMoved] =
                                                    arrCorrectCursor;
                                            }
                                            else if (iD === 1) {
                                                [isSpanActive, isAlertMade] = createSpanAlert(isSpanActive, isAlertMade);
                                                filteredArrayD.splice(iD, 1, mappedArrayD[1]);
                                                remadeStringD = filteredArrayD
                                                    .toString()
                                                    .replaceAll(",", "")
                                                    .slice(2);
                                                const arrCorrectCursor = correctCursorNextWords(isCursorAutoMoved, isUndoUppercase, wrongStartMatch, editableCite);
                                                [editableCite.textContent, isCursorAutoMoved] =
                                                    arrCorrectCursor;
                                                if (editableCite.textContent) {
                                                    editableCite.textContent =
                                                        editableCite.textContent.replace(regexTargLetter, remadeStringD);
                                                }
                                            }
                                            else if (iD > 2) {
                                                filteredArrayD.pop();
                                                filteredArrayD.push(mappedArrayD[iD]);
                                                const arrCorrectCursor = correctCursorNextWords(isCursorAutoMoved, isUndoUppercase, wrongStartMatch, editableCite);
                                                [editableCite.textContent, isCursorAutoMoved] =
                                                    arrCorrectCursor;
                                            }
                                        }
                                    }
                                })();
                            })();
                        }
                    })();
                });
            }
            if (multipleUppercasesMatches) {
                //IIFE para encapsular correção de múltiplos upper cases
                (() => {
                    const unproperUppercases = [
                        ...(multipleUppercasesMatches || []),
                        ...(wrongUppercasesMatchesOp1 || []),
                        ...(wrongUppercasesMatchesOp2 || []),
                        ...(wrongUppercasesMatchesOp3 || []),
                        ...(wrongUppercasesMatchesOp4 || []),
                        ...(wrongUppercasesMatchesOp5 || []),
                        ...(wrongUppercasesMatchesOp6 || []),
                    ];
                    const unproperDUppercases = [
                        ...(wrongUppercasesMatchesOp7 || []),
                        ...(wrongUppercasesMatchesOp8 || []),
                        ...(wrongUppercasesMatchesOp9 || []),
                    ];
                    unproperUppercases.forEach((multipleUppercasesMatch) => {
                        if (citeText && multipleUppercasesMatch) {
                            editableCite.textContent = fixUnproperUppercases(citeText, multipleUppercasesMatch, "NoD");
                            isUndoUppercase = true;
                            const arrCorrectCursor = correctCursorNextWords(isCursorAutoMoved, isUndoUppercase, wrongStartMatch, editableCite);
                            [editableCite.textContent, isCursorAutoMoved] = arrCorrectCursor;
                            isCursorAutoMoved = moveCursorToTheEnd(isCursorAutoMoved, editableCite);
                            [isSpanActive, isAlertMade] = createSpanAlert(isSpanActive, isAlertMade);
                        }
                    });
                    unproperDUppercases.forEach((multipleUppercasesMatch) => {
                        if (citeText && multipleUppercasesMatch) {
                            editableCite.textContent = fixUnproperUppercases(citeText, multipleUppercasesMatch, "YesDCont");
                            isUndoUppercase = true;
                            const arrCorrectCursor = correctCursorNextWords(isCursorAutoMoved, isUndoUppercase, wrongStartMatch, editableCite);
                            [editableCite.textContent, isCursorAutoMoved] = arrCorrectCursor;
                            isCursorAutoMoved = moveCursorToTheEnd(isCursorAutoMoved, editableCite);
                            [isSpanActive, isAlertMade] = createSpanAlert(isSpanActive, isAlertMade);
                        }
                    });
                })();
            }
        }
        //statement para correção de blocos após inicial com D
        if (letterMatchesIniD &&
            letterNotMatchesAfterD &&
            !(letterMatchesAfterDOp1 ||
                letterMatchesAfterDOp2 ||
                letterMatchesAfterDOp3)) {
            letterNotMatchesAfterD = [];
        }
        //statement para correção de múltiplos upper cases forçados indevidamente
        if (letterMatchesIniD || letterMatchesIniNotD) {
            //IIFE para forçar upper case
            (() => {
                const wordMatch = [
                    ...(letterMatchesAfterDOp1 || []),
                    ...(letterMatchesAfterDOp2 || []),
                    ...(letterMatchesAfterDOp3 || []),
                    ...(letterMatchesIniNotD || []),
                ];
                const DMatch = [
                    ...(letterMatchesAfterDOp1 || []),
                    ...(letterMatchesAfterDOp2 || []),
                    ...(letterMatchesAfterDOp3 || []),
                ];
                for (let iM = 0; iM < wordMatch.length; iM++) {
                    const uppercaseTest = uppercasesRegexObj.test(wordMatch[iM]);
                    if (uppercaseTest)
                        continue;
                    editableCite.textContent = fixForcedUpperCase(editableCite, wordMatch, wordMatch[iM]);
                    if (DMatch.flat(1).length > 0) {
                        const arrCorrectCursor = correctCursorNextWords(isCursorAutoMoved, isUndoUppercase, wrongStartMatch, editableCite);
                        [editableCite.textContent, isCursorAutoMoved] = arrCorrectCursor;
                        [isSpanActive, isAlertMade] = createSpanAlert(isSpanActive, isAlertMade);
                    }
                }
            })();
        }
        //IIFE para fazer correções no final da edição automática
        (() => {
            if (wrongCharsMatchesOp1) {
                editableCite.textContent =
                    editableCite.textContent?.replaceAll(wrongCharsRegexOp1, "") ?? null;
                isCursorAutoMoved = moveCursorToTheEnd(isCursorAutoMoved, editableCite);
            }
            if (wrongCharsMatchesOp2) {
                editableCite.textContent =
                    editableCite.textContent?.replaceAll(wrongCharsRegexOp2, "") ?? null;
                isCursorAutoMoved = moveCursorToTheEnd(isCursorAutoMoved, editableCite);
            }
            if (wrongCharsMatchesOp3) {
                editableCite.textContent =
                    editableCite.textContent?.replaceAll(wrongCharsRegexOp3, "") ?? null;
                isCursorAutoMoved = moveCursorToTheEnd(isCursorAutoMoved, editableCite);
            }
            if (editableCite.textContent?.match(/\s[\s]+/g)) {
                editableCite.textContent =
                    editableCite.textContent?.replaceAll(/\s[\s]+/g, " ") ?? null;
                isCursorAutoMoved = moveCursorToTheEnd(isCursorAutoMoved, editableCite);
            }
        })();
    }
    //declarações de funções locais
    function createSpanAlert(isSpanActive, isAlertMade) {
        const rgbaRegex = /rgba\((\d+), (\d+), (\d+), ([\d.]+)\)/;
        const computedStyleRegex = /,\d+.?\d*.?\d*/g;
        if (editableCite.nextElementSibling &&
            editableCite instanceof HTMLElement) {
            const nextCiteElementSibling = editableCite.nextElementSibling.id;
            if (nextCiteElementSibling === "deactAutocorrectBtn" && !isSpanActive) {
                const cursorResetAlert = document.createElement("span");
                if (!isAlertMade) {
                    cursorResetAlert.textContent = "Cursor resetado! Aperte alguma tecla";
                    isAlertMade = true;
                }
                editableCite.parentNode?.insertBefore(cursorResetAlert, editableCite.nextSibling);
                cursorResetAlert.setAttribute("class", "briefAlert");
                cursorResetAlert.setAttribute("id", "briefAlertCite");
                cursorResetAlert.style.setProperty("border-color", "white");
                cursorResetAlert.style.setProperty("opacity", "1");
                cursorResetAlert.style.setProperty("font-size", "8px");
                editableCite.style.setProperty("border-color", "rgba(255, 165, 0, 0.9)"); //alertar usuário da mudança de cursor devido à reconstrução do textContent editável
                isSpanActive = true;
                setTimeout(() => {
                    const computedStyleCite = window
                        .getComputedStyle(editableCite)
                        .getPropertyValue("border-color");
                    const rgbaMatch = computedStyleCite.match(rgbaRegex);
                    if (rgbaMatch) {
                        const reduceOpacity = setInterval(() => {
                            const poppedArray = rgbaMatch.pop(); //faz a retirada inicial
                            let strUpdatedAlpha = poppedArray?.toString();
                            const strRgba = rgbaMatch
                                .toString()
                                .replaceAll(computedStyleRegex, "");
                            const firstSliceStrRgba = strRgba.slice(0, 18);
                            let strNewOpacityValue = firstSliceStrRgba + " " + strUpdatedAlpha + ")";
                            if (strUpdatedAlpha && strUpdatedAlpha <= "0.05") {
                                strUpdatedAlpha = "0";
                                strNewOpacityValue = firstSliceStrRgba + "0)";
                                cursorResetAlert.remove();
                                clearInterval(reduceOpacity);
                            }
                            editableCite.style.setProperty("border-color", strNewOpacityValue);
                        }, 100);
                    }
                }, 500);
            }
            else if (nextCiteElementSibling === "briefAlertCite" || isSpanActive) {
                //algum efeito visual
            }
        }
        return [isSpanActive, isAlertMade];
    }
}
function removeFirstClick(editableCite) {
    if (editableCite.textContent === "Insira Seu Nome Aqui") {
        editableCite.textContent = "";
    }
    let cursorPosition = 0;
    setInterval(() => {
        cursorPosition = _gHandlers__WEBPACK_IMPORTED_MODULE_0__.cursorCheckTimer(cursorPosition) ?? 0;
    }, 3000);
}
function switchAutocorrect(click, deactAutocorrectBtn) {
    if (click.target === deactAutocorrectBtn) {
        isAutocorrectOn = !isAutocorrectOn; //simplificação de if-else; if-if não funciona aqui
        deactAutocorrectBtn.textContent = isAutocorrectOn
            ? "Desativar Autocorreção"
            : "Ativar Autocorreção";
    }
}
function checkAllGenConts(gen, genBirthRel, genTrans, genFisAlin) {
    let isGenValid = false;
    let isGenBirthRelValid = false;
    let isGenTransContValid = false;
    let isGenFisAlinValid = false;
    try {
        if (gen && gen instanceof HTMLSelectElement) {
            isGenValid = true;
        }
        else {
            throw new Error(`Erro validando gen: elemento ${gen}, instância ${gen instanceof HTMLSelectElement}`);
        }
    }
    catch (errorGen) {
        console.error(errorGen.message);
    }
    finally {
        //algum efeito visual
    }
    try {
        if (genBirthRel && genBirthRel instanceof HTMLSelectElement) {
            isGenBirthRelValid = true;
        }
        else {
            throw new Error(`Erro validando gen: elemento ${genBirthRel}, instância ${genBirthRel instanceof HTMLSelectElement}`);
        }
    }
    catch (errorGenBirthRel) {
        console.error(errorGenBirthRel.message);
    }
    finally {
        //algum efeito visual
    }
    try {
        if (genTrans && genTrans instanceof HTMLSelectElement) {
            isGenTransContValid = true;
        }
        else {
            throw new Error(`Erro validando genTrans: elemento ${genTrans}, instância ${genTrans instanceof HTMLSelectElement}`);
        }
    }
    catch (errorGenTrans) {
        console.error(errorGenTrans.message);
    }
    finally {
        //algum efeito visual
    }
    try {
        if (genFisAlin && genFisAlin instanceof HTMLSelectElement) {
            isGenFisAlinValid = true;
        }
        else {
            throw new Error(`Erro validando genFisAlin: elemento ${genFisAlin}, instância ${genFisAlin instanceof HTMLSelectElement}`);
        }
    }
    catch (errorGenFisAlin) {
        console.error(errorGenFisAlin.message);
    }
    finally {
        //algum efeito visual
    }
    if (isGenValid &&
        isGenBirthRelValid &&
        isGenTransContValid &&
        isGenFisAlinValid) {
        return true;
    }
    else {
        console.error("Erro verificando booleanos de containers de gênero");
        return false;
    }
}
function fluxGen(gen, genIniValue, genBirthRel, genTrans, genFisAlin) {
    let genValue = "";
    if (gen.value === "masculino" || gen.value === "feminino") {
        if (genBirthRel.value === "cis") {
            genValue = genIniValue ?? gen.value;
            hideGenFisAlin(genFisAlin);
            hideStgTransHorm(genTrans);
            return genValue;
        }
        else if (genBirthRel.value === "trans") {
            showStgTransHorm(genTrans);
            if (genTrans.value === "avancado") {
                genValue = genIniValue ?? gen.value;
                hideGenFisAlin(genFisAlin);
                return genValue;
            }
            else if (genTrans.value === "undefined" ||
                genTrans.value === "no" ||
                genTrans.value === "inicial" ||
                genTrans.value === "intermediario") {
                showGenFisAlin(genFisAlin);
                const contFeminilizado = document.querySelector('option[value="feminilizado"]');
                const contMasculinizado = document.querySelector('option[value="masculinizado"]');
                if (contFeminilizado instanceof HTMLOptionElement &&
                    contMasculinizado instanceof HTMLOptionElement) {
                    if (genTrans.value === "intermediario") {
                        if (gen.value === "masculino") {
                            const isFemSelected = contFeminilizado?.selected ?? false;
                            if (isFemSelected) {
                                contFeminilizado.removeAttribute("selected");
                            }
                            contMasculinizado.setAttribute("selected", "");
                        }
                        if (gen.value === "feminino") {
                            const isMascSelected = contMasculinizado?.selected ?? false;
                            if (isMascSelected) {
                                contMasculinizado.removeAttribute("selected");
                            }
                            contFeminilizado.setAttribute("selected", "");
                        }
                    }
                    else {
                        const isFemSelected = contFeminilizado?.selected ?? false;
                        const isMascSelected = contMasculinizado?.selected ?? false;
                        if (isMascSelected) {
                            contMasculinizado.removeAttribute("selected");
                        }
                        if (isFemSelected) {
                            contFeminilizado.removeAttribute("selected");
                        }
                    }
                }
                if (genFisAlin.value === "masculinizado") {
                    genValue = "masculino";
                    return genValue;
                }
                else if (genFisAlin.value === "feminilizado") {
                    genValue = "feminino";
                    return genValue;
                }
                else if (genFisAlin.value === "neutro") {
                    genValue = "neutro";
                    return genValue;
                }
            }
        }
        else if (genBirthRel.value === "outros" ||
            genBirthRel.value === "undefined") {
            showGenFisAlin(genFisAlin);
            if (genFisAlin.value === "masculinizado") {
                genValue = "masculino";
                return genValue;
            }
            else if (genFisAlin.value === "feminilizado") {
                genValue = "feminino";
                return genValue;
            }
            else if (genFisAlin.value === "neutro") {
                genValue = "neutro";
                return genValue;
            }
        }
    }
    else if (gen.value === "naoBinario" ||
        gen.value === "outros" ||
        gen.value === "undefined") {
        if (genBirthRel.value === "trans") {
            showStgTransHorm(genTrans);
        }
        else {
            hideStgTransHorm(genTrans);
        }
        showGenFisAlin(genFisAlin);
        if (genFisAlin.value === "masculinizado") {
            genValue = "masculino";
            return genValue;
        }
        else if (genFisAlin.value === "feminilizado") {
            genValue = "feminino";
            return genValue;
        }
        else if (genFisAlin.value === "neutro") {
            genValue = "neutro";
            return genValue;
        }
    }
    else {
        const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
        _errorHandler__WEBPACK_IMPORTED_MODULE_2__.stringError("obtendo gen.value", gen?.value ?? "UNDEFINED VALUE", slicedError ?? "NULL");
    }
    return genValue;
}
function showGenFisAlin(genFisAlin) {
    if (genFisAlin) {
        genFisAlin.closest(".spanFsAnamG")?.removeAttribute("hidden");
        return true;
    }
    else {
        console.warn("Erro na abertura de genFisAlin");
    }
}
function hideGenFisAlin(genFisAlin) {
    if (genFisAlin) {
        genFisAlin.closest(".spanFsAnamG")?.setAttribute("hidden", "");
        return false;
    }
    else {
        console.warn("Erro no fechamento de genFisAlin");
    }
}
function showStgTransHorm(genTrans) {
    if (genTrans) {
        genTrans.closest(".spanFsAnamG")?.removeAttribute("hidden");
        return true;
    }
    else {
        console.warn("Erro na abertura de genTrans");
    }
}
function hideStgTransHorm(genTrans) {
    if (genTrans) {
        genTrans.closest(".spanFsAnamG")?.setAttribute("hidden", "");
        return false;
    }
    else {
        console.warn("Erro no fechamento de genTrans");
    }
}
function filterIdsByGender(arrayIds, bodyType) {
    if (Array.isArray(arrayIds)) {
        if (arrayIds.every((prop) => typeof prop === "string") &&
            typeof bodyType === "string") {
            const genderedIds = [];
            let slicedError = "";
            switch (bodyType) {
                case "masculino":
                    for (let iM = 0; iM < arrayIds.length; iM++) {
                        if (arrayIds[iM] === "peit" ||
                            arrayIds[iM] === "abd" ||
                            arrayIds[iM] === "coxa") {
                            genderedIds.push(arrayIds[iM]);
                        }
                    }
                    break;
                case "feminino":
                    for (let iF = 0; iF < arrayIds.length; iF++) {
                        if (arrayIds[iF] === "tricp" ||
                            arrayIds[iF] === "suprail" ||
                            arrayIds[iF] === "coxa") {
                            genderedIds.push(arrayIds[iF]);
                        }
                    }
                    break;
                case "neutro":
                    for (let iN = 0; iN < arrayIds.length; iN++) {
                        if (arrayIds[iN] === "peit" ||
                            arrayIds[iN] === "abd" ||
                            arrayIds[iN] === "tricp" ||
                            arrayIds[iN] === "suprail" ||
                            arrayIds[iN] === "coxa")
                            genderedIds.push(arrayIds[iN]);
                    }
                    break;
                default:
                    slicedError =
                        new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
                    _errorHandler__WEBPACK_IMPORTED_MODULE_2__.stringError(`obtendo bodyType válido`, bodyType ?? null, slicedError ?? "NULL");
            }
            return genderedIds;
        }
        else {
            const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
            _errorHandler__WEBPACK_IMPORTED_MODULE_2__.typeError(`validando elementos para definição de gênero como strings`, bodyType ?? null, "string", slicedError ?? "NULL");
        }
    }
    else {
        console.warn(`Erro validando array em filterIdsByGender()`);
    }
}
function generatePersonInstance(person) {
    if (typeof person.gen === "string" && person.gen !== "") {
        if (person.gen === "masculino") {
            person = new _classes__WEBPACK_IMPORTED_MODULE_1__.Man(person.gen, person.age, person.weight, person.height, person.sumDCut, person.atvLvl);
        }
        else if (person.gen === "feminino") {
            person = new _classes__WEBPACK_IMPORTED_MODULE_1__.Woman(person.gen, person.age, person.weight, person.height, person.sumDCut, person.atvLvl);
        }
        else if (person.gen === "neutro") {
            person = new _classes__WEBPACK_IMPORTED_MODULE_1__.Neutro(person.gen, person.age, person.weight, person.height, person.sumDCut, person.atvLvl);
        }
        else {
            const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
            _errorHandler__WEBPACK_IMPORTED_MODULE_2__.stringError("person.gen", person?.gen ?? null, slicedError ?? "NULL");
        }
    }
    else {
        const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
        _errorHandler__WEBPACK_IMPORTED_MODULE_2__.typeError("person.gen", person?.gen ?? null, "string", slicedError ?? "NULL");
    }
    return person;
}


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!************************************!*\
  !*** ./src/edFisNutController.tsx ***!
  \************************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _edFisNutModel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./edFisNutModel */ "./src/edFisNutModel.tsx");
/* harmony import */ var _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./edFisNutHandler */ "./src/edFisNutHandler.tsx");
/* harmony import */ var _global_scripts_src_gModel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../global-scripts/src/gModel */ "../../global-scripts/src/gModel.tsx");
/* harmony import */ var _global_scripts_src_gHandlers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../global-scripts/src/gHandlers */ "../../global-scripts/src/gHandlers.tsx");
/* harmony import */ var _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../global-scripts/src/errorHandler */ "../../global-scripts/src/errorHandler.tsx");
/* harmony import */ var _global_scripts_src_classes__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../global-scripts/src/classes */ "../../global-scripts/src/classes.tsx");
//nesse file ocorrem principalmente as adições de listeners, sincronização das chamadas de funções para manipulação de informação/layout e validação dos elementos no DOM






//inicialização de constantes a partir de procura no DOM
const textareas = document.querySelectorAll("textarea");
const textInputs = document.querySelectorAll('input[type="text"]');
const textConts = [...textareas, ...textInputs];
const genElement = document.getElementById("genId");
const genBirthRel = document.getElementById("genBirthRelId");
const genTrans = document.getElementById("genTransId");
const genFisAlin = document.getElementById("genFisAlinId");
const textBodytype = document.getElementById("textBodytype");
const ageElement = document.getElementById("ageId");
const atvLvlElement = document.getElementById("selectLvlAtFis");
const numInps = document.querySelectorAll('input[type="number"]');
const radioButtons = document.querySelectorAll('input[type="radio"]');
const comorbBtns = document.getElementsByClassName("countComorb");
const comorbBtnsArray = Array.from(comorbBtns);
const ativFisContainerBtns = document.getElementsByClassName("countAtFis");
const ativFisContainerBtnsArray = Array.from(ativFisContainerBtns);
const consTablesFs = document.getElementById("fsProgConsId");
const numConsElement = document.getElementById("selectNumCons");
const tabSVi = document.getElementById("tabProgSVi");
const tabMedAnt = document.getElementById("tabMedAnt");
const tabDC = document.getElementById("tabDCut");
const tabIndPerc = document.getElementById("tabIndPerc");
const editableCite = document.querySelector('cite[contenteditable="true"]');
const astDigtBtns = document.querySelectorAll('button[id$="AstDigtBtn');
const deactAutocorrectBtns = document.querySelectorAll('button[id^="deactAutocorrectBtn"]');
const dateBtns = document.querySelectorAll('button[id$="DatBtn"]');
const gordCorpLvl = document.getElementById("gordCorpLvl");
const lockGordCorpLvl = document.getElementById("lockGordCorpLvl");
const nafType = document.getElementById("nafType");
const formTMBTypeElement = document.getElementById("formCalcTMBType");
const spanFactorAtleta = document.getElementById("spanFactorAtleta");
const selFactorAtleta = document.getElementById("selFactorAtleta");
const weightInps = Array.from(document.getElementsByClassName("inpWeight"));
const heightInps = Array.from(document.getElementsByClassName("inpHeight"));
const sumDCInps = Array.from(document.getElementsByClassName("inpSumDCut"));
const IMCInps = Array.from(document.getElementsByClassName("inpImc"));
const MLGInps = Array.from(document.getElementsByClassName("inpMlg"));
const PGCInps = Array.from(document.getElementsByClassName("inpPgc"));
const TMBInps = Array.from(document.getElementsByClassName("inpTmb"));
const GETInps = Array.from(document.getElementsByClassName("inpGet"));
const IMCBtns = Array.from(document.getElementsByClassName("tabBtnImc"));
const MLGBtns = Array.from(document.getElementsByClassName("tabBtnMlg"));
const PGCBtns = Array.from(document.getElementsByClassName("tabBtnPgc"));
const TMBBtns = Array.from(document.getElementsByClassName("tabBtnTmb"));
const GETBtns = Array.from(document.getElementsByClassName("tabBtnGet"));
const autoFillBtn = document.getElementById("autoFillBtn");
const trioReadNumCons = document.getElementById("trioReadNumCons");
const numConsTextHeadCels = Array.from(document.getElementsByClassName("numConsTextHeadCel"));
const locksTabInd = Array.from(document.getElementsByClassName("lockTabInd"));
const resetFormBtn = document.getElementById("resetFormBtn");
const subButton = document.getElementById("submitFormButId");
//inicialização de variáveis para validação e construção de pessoa tratada no formulário
const areAllGenContChecked = _global_scripts_src_gModel__WEBPACK_IMPORTED_MODULE_2__.checkAllGenConts(genElement, genBirthRel, genTrans, genFisAlin);
let person = {
    gen: genElement?.value ?? "",
    age: 0,
    sumDCut: 0,
    weight: 0,
    height: 0,
    atvLvl: atvLvlElement?.value ?? "",
};
//inicialização de variáveis usadas no tabelamento, para alcance em escopo global
//variáveis e constantes obtidas através de queries nas tabelas são inicializadas em blocos, após validação das respectivas tabelas
let numTotalTabsCons = 1;
let numCons = 1;
let numCol = 1;
let numColsCons = 1;
let numTotalColsCons = 1;
let areColGroupsSimilar = false;
let areNumConsOpsValid = false;
let targInpWeight = null;
let targInpHeight = null;
let targInpSumDCut = null;
let targInpIMC = null;
let targInpMLG = null;
let targInpPGC = null;
let targInpTMB = null;
let targInpGET = null;
let arrayTargInps = [];
let arrayWH = [0, 0];
let arrayPGC = [0, null, null];
let IMC = 0;
let MLG = 0;
let PGC = 0;
let TMB = 0;
let GET = 0;
let indexesArray = [0, 0, 0, 0];
let factorAtvLvl = 0;
let factorAtleta = "";
let numConsLastOp = 0;
let isPersonClassified = false;
let isAutoFillActive = true;
if (selFactorAtleta instanceof HTMLSelectElement) {
    factorAtleta = selFactorAtleta.value;
}
else {
    const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
    _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.elementNotFound(selFactorAtleta ?? null, "selFactorAtleta", slicedError ?? "NULL");
}
//início da validação de elementos no DOM e inserção de listeners com callbacks respectivos
if (textConts.length > 0) {
    textConts.forEach(function (textCont) {
        textCont.addEventListener("input", function (input) {
            if (input.target &&
                (input.target instanceof HTMLTextAreaElement ||
                    (input.target instanceof HTMLInputElement &&
                        input.target.type === "text"))) {
                _global_scripts_src_gModel__WEBPACK_IMPORTED_MODULE_2__.autoCapitalizeInputs(input.target);
            }
            else {
                const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
                _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.inputNotFound(input?.target ?? null, "textCont", slicedError ?? "NULL");
            }
        });
    });
}
else {
    const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
    _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.elementNotPopulated(textConts ?? null, "textConts", slicedError ?? "NULL");
}
if (numInps.length > 0) {
    numInps.forEach(function (numInp) {
        numInp.addEventListener("input", function (input) {
            if (input.target &&
                input.target instanceof HTMLInputElement &&
                input.target.type === "number") {
                _global_scripts_src_gModel__WEBPACK_IMPORTED_MODULE_2__.numberLimit(input.target);
            }
            else {
                const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
                _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.inputNotFound(input?.target ?? null, "numInp", slicedError ?? "NULL");
            }
        });
    });
}
else {
    const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
    _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.elementNotPopulated(numInps ?? null, "numInps", slicedError ?? "NULL");
}
if (radioButtons.length > 0) {
    radioButtons.forEach((radio) => {
        if (radio instanceof HTMLInputElement && radio.type === "radio") {
            radio.addEventListener("keydown", (keydown) => {
                _global_scripts_src_gHandlers__WEBPACK_IMPORTED_MODULE_3__.opRadioHandler(keydown);
            });
            radio.addEventListener("change", () => _global_scripts_src_gHandlers__WEBPACK_IMPORTED_MODULE_3__.cpbInpHandler(radio));
            radio.addEventListener("keydown", () => _global_scripts_src_gHandlers__WEBPACK_IMPORTED_MODULE_3__.cpbInpHandler(radio));
            radio.addEventListener("dblclick", () => _global_scripts_src_gHandlers__WEBPACK_IMPORTED_MODULE_3__.doubleClickHandler(radio));
        }
        else {
            const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
            _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.inputNotFound(radio ?? null, "radio element", slicedError ?? "NULL");
        }
    });
}
else {
    const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
    _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.elementNotPopulated(radioButtons ?? null, "radioButtons", slicedError ?? "NULL");
}
if (comorbBtnsArray.length > 0) {
    comorbBtnsArray.forEach((comorbBtn) => {
        if (comorbBtn && comorbBtn instanceof HTMLButtonElement) {
            comorbBtn.addEventListener("click", () => _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.addRowComorb(comorbBtn));
        }
        else {
            const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
            _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.elementNotFound(comorbBtn ?? null, "comorbBtn", slicedError ?? "NULL");
        }
    });
}
else {
    const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
    _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.elementNotPopulated(comorbBtnsArray ?? "null", "comorbBtnsArray", slicedError ?? "NULL");
}
if (ativFisContainerBtnsArray.length > 0) {
    ativFisContainerBtnsArray.forEach((ativFisContainerBtn) => {
        if (ativFisContainerBtn &&
            ativFisContainerBtn instanceof HTMLButtonElement) {
            ativFisContainerBtn.addEventListener("click", () => _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.addRowAtivFis(ativFisContainerBtn));
        }
        else {
            const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
            _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.elementNotFound(ativFisContainerBtn ?? null, "ativFisContainerBtn", slicedError ?? "NULL");
        }
    });
}
else {
    const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
    _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.elementNotPopulated(ativFisContainerBtnsArray ?? null, "ativFisContainerBtnsArray", slicedError ?? "NULL");
}
if (dateBtns.length > 0) {
    dateBtns.forEach(function (dateBtn) {
        if (dateBtn instanceof HTMLButtonElement) {
            dateBtn.addEventListener("click", function (activation) {
                return _global_scripts_src_gHandlers__WEBPACK_IMPORTED_MODULE_3__.useCurrentDate(activation, dateBtn);
            });
        }
        else {
            const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
            _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.elementNotFound(dateBtn ?? null, "dateBtn", slicedError ?? "NULL");
        }
    });
}
else {
    const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
    _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.elementNotPopulated(dateBtns ?? null, "dateBtns", slicedError ?? "NULL");
}
if (editableCite) {
    let firstClick = true;
    const citeClickHandler = function (click) {
        if (firstClick && click.target && click.target instanceof HTMLElement) {
            _global_scripts_src_gModel__WEBPACK_IMPORTED_MODULE_2__.removeFirstClick(click.target);
            firstClick = false;
            editableCite.removeEventListener("click", citeClickHandler);
        }
        else {
            const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
            _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.elementNotFound(click.target ?? null, "editableCite", slicedError ?? "NULL");
        }
    };
    editableCite.addEventListener("keyup", function (keypress) {
        if (keypress.target && keypress.target instanceof HTMLElement) {
            _global_scripts_src_gModel__WEBPACK_IMPORTED_MODULE_2__.autoCapitalizeCite(keypress.target);
        }
        else {
            const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
            _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.elementNotFound(keypress.target ?? null, "editableCite", slicedError ?? "NULL");
        }
    });
    editableCite.addEventListener("click", citeClickHandler);
}
else {
    const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
    _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.elementNotFound(null, "editableCite", slicedError ?? "NULL");
}
if (deactAutocorrectBtns.length > 0) {
    deactAutocorrectBtns.forEach(function (deactAutocorrectBtn) {
        if (deactAutocorrectBtn &&
            deactAutocorrectBtn instanceof HTMLButtonElement) {
            deactAutocorrectBtn.addEventListener("click", function (click) {
                return _global_scripts_src_gModel__WEBPACK_IMPORTED_MODULE_2__.switchAutocorrect(click, deactAutocorrectBtn);
            });
        }
        else {
            const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
            _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.elementNotFound(deactAutocorrectBtn ?? null, "deactAutocorrectBtn", slicedError ?? "NULL");
        }
    });
}
else {
    const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
    _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.elementNotPopulated(deactAutocorrectBtns ?? null, "deactAutocorrectBtns", slicedError ?? "NULL");
}
if (astDigtBtns.length > 0) {
    astDigtBtns.forEach(function (astDigtBtn) {
        if (astDigtBtn instanceof HTMLButtonElement) {
            astDigtBtn.addEventListener("click", function (click) {
                return _global_scripts_src_gHandlers__WEBPACK_IMPORTED_MODULE_3__.changeToAstDigit(click, astDigtBtn);
            });
        }
        else {
            const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
            _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.elementNotFound(astDigtBtn ?? null, "astDigtBtn", slicedError ?? "NULL");
        }
    });
}
else {
    const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
    _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.elementNotPopulated(astDigtBtns ?? null, "astDigtBtns", slicedError ?? "NULL");
}
if (subButton instanceof HTMLButtonElement) {
    subButton.addEventListener("click", _global_scripts_src_gHandlers__WEBPACK_IMPORTED_MODULE_3__.subForm);
}
else {
    const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
    _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.elementNotFound(subButton ?? null, "subButton", slicedError ?? "NULL");
}
if (resetFormBtn instanceof HTMLButtonElement) {
    resetFormBtn.addEventListener("click", (click) => {
        if (editableCite instanceof HTMLElement &&
            genTrans instanceof HTMLSelectElement &&
            genFisAlin instanceof HTMLSelectElement) {
            _global_scripts_src_gHandlers__WEBPACK_IMPORTED_MODULE_3__.resetarFormulario(click, astDigtBtns);
        }
        else {
            const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
            _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.elementsNotFoundFunction(slicedError ?? "NULL", "resetarFormulario", editableCite ?? null, genTrans ?? null, genFisAlin ?? null);
        }
    });
}
else {
    const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
    _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.elementNotFound(resetFormBtn ?? null, "resetFormBtn", slicedError ?? "NULL");
}
//para apagar retornos negativos anômalos
if (consTablesFs && consTablesFs instanceof HTMLFieldSetElement) {
    numTotalColsCons = consTablesFs.querySelectorAll("col")?.length ?? 1;
    numTotalTabsCons = consTablesFs.querySelectorAll("table")?.length ?? 1;
    const allTabledInps = consTablesFs.querySelectorAll("input");
    if (allTabledInps.length > 0) {
        allTabledInps.forEach((tabInp) => {
            if (tabInp instanceof HTMLInputElement) {
                tabInp.addEventListener("input", () => {
                    if (parseInt(tabInp.value) < 0 ||
                        Number.isNaN(parseInt(tabInp.value))) {
                        tabInp.value = "0";
                    }
                });
            }
            else {
                const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
                _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.inputNotFound(tabInp ?? null, "tabInp", slicedError ?? "NULL");
            }
        });
    }
    else {
        const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
        _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.elementNotPopulated(allTabledInps ?? null, "allTabledInps", slicedError ?? "NULL");
    }
    const arrColGroupsValidation = _edFisNutModel__WEBPACK_IMPORTED_MODULE_0__.checkInnerColGroups(consTablesFs) ?? [0, false];
    if (arrColGroupsValidation[0] !== 0 && arrColGroupsValidation[1] !== false) {
        [numColsCons, areColGroupsSimilar] = arrColGroupsValidation;
    }
}
else {
    const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
    _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.elementNotFound(consTablesFs ?? null, "consTablesFs", slicedError ?? "NULL");
}
if (tabDC && tabDC instanceof HTMLTableElement) {
    const rowsDC = tabDC.getElementsByClassName("tabRowDCut");
    const rowsDCArray = Array.from(rowsDC).filter((rowDC) => rowDC instanceof HTMLTableRowElement);
    const sumDCBtns = tabDC.querySelectorAll('button[id^="sumDCBtn"]');
    const protocolo = document.getElementById("tabSelectDCutId");
    //adiciona listeners para botões de índices secundários e valida outras tabelas usadas
    if (tabSVi &&
        tabSVi instanceof HTMLTableElement &&
        tabMedAnt &&
        tabMedAnt instanceof HTMLTableElement &&
        tabIndPerc &&
        tabIndPerc instanceof HTMLTableElement) {
        //início da captura de propriedades nas tabelas
        if (numConsElement?.lastElementChild instanceof HTMLOptionElement) {
            numConsLastOp = parseInt(numConsElement?.lastElementChild?.value ?? "1", 10);
        }
        else {
            const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
            _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.elementNotFound(numConsElement?.lastElementChild ?? null, "numConsLastOp", slicedError ?? "NULL");
        }
        //validação da relação de options e colunas
        if (numConsLastOp === numColsCons - 1 && numConsLastOp >= 3) {
            areNumConsOpsValid = true;
        }
        else {
            const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
            _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.maxNumberError(numConsElement?.lastElementChild?.value ?? "1", "Options para Consultas", slicedError ?? "NULL");
        }
        //faz a leitura do número de consulta
        if (areColGroupsSimilar &&
            numConsElement instanceof HTMLSelectElement &&
            gordCorpLvl instanceof HTMLSelectElement &&
            areNumConsOpsValid) {
            //construção de array para sintetizar argumentação de funções e validações conjuntas
            const switchElements = [
                consTablesFs,
                numConsElement,
                tabSVi,
                tabMedAnt,
                tabDC,
                tabIndPerc,
            ];
            const filteredSwitchElements = switchElements.filter((switchElement) => switchElement instanceof HTMLElement);
            numCons = parseInt(numConsElement?.value || "1");
            if (filteredSwitchElements.length === 6) {
                /*validações de rows com base em títulos (textContent da primeira célula à esquerda) de respectivas rows
                + obtenção dos target inputs iniciais*/
                const inpWeightRowTitle = tabMedAnt.querySelector(`#tabCelRowMedAnt2_1`);
                const inpHeightRowTitle = tabMedAnt.querySelector("#tabCelRowMedAnt3_1");
                const inpSumDCutRowTitle = tabDC.querySelector("#tabCelRowDCut9_1");
                const inpIMCRowTitle = tabIndPerc.querySelector("#tabCelRowIndPerc2_1");
                const inpMLGRowTitle = tabIndPerc.querySelector("#tabCelRowIndPerc3_1");
                const inpPGCRowTitle = tabIndPerc.querySelector("#tabCelRowIndPerc4_1");
                const inpTMBRowTitle = tabIndPerc.querySelector("#tabCelRowIndPerc5_1");
                const inpGETRowTitle = tabIndPerc.querySelector("#tabCelRowIndPerc6_1");
                //inicialização de titles e targInps
                /*os titles são construídos somente para alertar se houver inadequação
                de entitulações no HTML (por ordem ou texto)*/
                if (inpWeightRowTitle &&
                    inpWeightRowTitle.textContent?.match(/Peso/g)) {
                    targInpWeight = tabMedAnt.querySelector(`#tabInpRowMedAnt2_${numCons + 1}`);
                    if (!(targInpWeight instanceof HTMLInputElement)) {
                        const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
                        _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.inputNotFound(targInpWeight ?? null, "targInpWeight", slicedError ?? "NULL");
                    }
                }
                else {
                    const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
                    _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.matchError("Título da Row para Campos de Peso", inpWeightRowTitle ?? null, inpWeightRowTitle?.textContent || "null", slicedError ?? "NULL");
                }
                if (inpHeightRowTitle &&
                    inpHeightRowTitle.textContent?.match(/Altura/g)) {
                    targInpHeight = tabMedAnt.querySelector(`#tabInpRowMedAnt3_${numCons + 1}`);
                    if (!(targInpHeight instanceof HTMLInputElement)) {
                        const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
                        _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.inputNotFound(targInpHeight ?? null, "targInpHeight", slicedError ?? "NULL");
                    }
                }
                else {
                    const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
                    _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.matchError("Título da Row para Campos de Altura", inpHeightRowTitle ?? null, inpHeightRowTitle?.textContent || "null", slicedError ?? "NULL");
                }
                if (inpSumDCutRowTitle &&
                    inpSumDCutRowTitle.textContent?.match(/Soma/g)) {
                    targInpSumDCut = tabDC.querySelector(`#tabInpRowDCut9_${numCons + 1}`);
                    if (!(targInpSumDCut instanceof HTMLInputElement)) {
                        const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
                        _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.inputNotFound(targInpSumDCut ?? null, "targInpSumDCut", slicedError ?? "NULL");
                    }
                }
                else {
                    const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
                    _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.matchError("Título da Row para Campos de Soma de Dobras Cutâneas", inpSumDCutRowTitle ?? null, inpSumDCutRowTitle?.textContent || "null", slicedError ?? "NULL");
                }
                if (inpIMCRowTitle && inpIMCRowTitle.textContent?.match(/IMC/g)) {
                    targInpIMC = tabIndPerc.querySelector(`#inpImc${numCons}Cel2_${numCons + 1}`);
                    if (!(targInpIMC instanceof HTMLInputElement)) {
                        const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
                        _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.inputNotFound(targInpIMC ?? null, "targInpIMC", slicedError ?? "NULL");
                    }
                }
                else {
                    const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
                    _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.matchError("Título da Row para Campos de IMC", inpIMCRowTitle ?? null, inpIMCRowTitle?.textContent || "null", slicedError ?? "NULL");
                }
                if (inpMLGRowTitle && inpMLGRowTitle.textContent?.match(/MLG/g)) {
                    targInpMLG = tabIndPerc.querySelector(`#inpMlg${numCons}Cel3_${numCons + 1}`);
                    if (!(targInpMLG instanceof HTMLInputElement)) {
                        const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
                        _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.inputNotFound(targInpMLG ?? null, "targInpMLG", slicedError ?? "NULL");
                    }
                }
                else {
                    const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
                    _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.matchError("Título da Row para Campos de MLG", inpMLGRowTitle ?? null, inpMLGRowTitle?.textContent || "null", slicedError ?? "NULL");
                }
                if (inpPGCRowTitle && inpPGCRowTitle.textContent?.match(/PGC/g)) {
                    targInpPGC = tabIndPerc.querySelector(`#inpPgc${numCons}Cel4_${numCons + 1}`);
                    if (!(targInpPGC instanceof HTMLInputElement)) {
                        const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
                        _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.inputNotFound(targInpPGC ?? null, "targInpPGC", slicedError ?? "NULL");
                    }
                }
                else {
                    const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
                    _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.matchError("Título da Row para Campos de PGC", inpPGCRowTitle ?? null, inpPGCRowTitle?.textContent || "null", slicedError ?? "NULL");
                }
                if (inpTMBRowTitle && inpTMBRowTitle.textContent?.match(/TMB/g)) {
                    targInpTMB = tabIndPerc.querySelector(`#inpTmb${numCons}Cel5_${numCons + 1}`);
                    if (!(targInpTMB instanceof HTMLInputElement)) {
                        const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
                        _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.inputNotFound(targInpTMB ?? null, "targInpTMB", slicedError ?? "NULL");
                    }
                }
                else {
                    const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
                    _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.matchError("Título da Row para Campos de TMB", inpTMBRowTitle ?? null, inpTMBRowTitle?.textContent || "null", slicedError ?? "NULL");
                }
                if (inpGETRowTitle && inpGETRowTitle.textContent?.match(/GET/g)) {
                    targInpGET = tabIndPerc.querySelector(`#inpGet${numCons}Cel6_${numCons + 1}`);
                    if (!(targInpGET instanceof HTMLInputElement)) {
                        const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
                        _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.inputNotFound(targInpGET ?? null, "targInpGET", slicedError ?? "NULL");
                    }
                }
                else {
                    const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
                    _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.matchError("Título da Row para Campos de GET", inpGETRowTitle ?? null, inpGETRowTitle?.textContent || "null", slicedError ?? "NULL");
                }
                //listener para atualização de inputs target
                numConsElement.addEventListener("change", () => {
                    _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.switchRequiredCols(filteredSwitchElements);
                    numCons = parseInt(numConsElement?.value || "0");
                });
                if (trioReadNumCons instanceof HTMLInputElement &&
                    trioReadNumCons.type === "number") {
                    trioReadNumCons.addEventListener("input", () => {
                        const numTotalTitledColsCons = numTotalColsCons - numTotalTabsCons;
                        if (numConsTextHeadCels.length === numTotalTitledColsCons) {
                            _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.switchNumConsTitles(numConsTextHeadCels, trioReadNumCons, numTotalTitledColsCons, numTotalTabsCons);
                        }
                        else {
                            const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
                            _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.elementNotPopulated(numConsTextHeadCels, "numConsTextHeadCels", slicedError ?? "NULL");
                        }
                    });
                }
                else {
                    const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
                    _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.inputNotFound(trioReadNumCons?.id ?? null, "trioReadNumCons", slicedError ?? "NULL");
                }
                if (areAllGenContChecked &&
                    textBodytype instanceof HTMLSelectElement &&
                    protocolo instanceof HTMLSelectElement) {
                    //início da construção de person (após inicialização)
                    /*adição de listeneres de input para capturar mudança nos inputs validados e atribuir às propriedades de person*/
                    //obtenção de .gen inicial com adição de listeners para changes em contexto e atualização de .gen
                    if (typeof person.gen === "string") {
                        genElement?.addEventListener("change", () => {
                            person.gen =
                                _global_scripts_src_gModel__WEBPACK_IMPORTED_MODULE_2__.fluxGen(genElement, genElement?.value ?? null, genBirthRel, genTrans, genFisAlin) ?? "";
                            console.log("gen value " + person.gen);
                            textBodytype.value = person.gen;
                        });
                        genBirthRel?.addEventListener("change", () => {
                            person.gen =
                                _global_scripts_src_gModel__WEBPACK_IMPORTED_MODULE_2__.fluxGen(genElement, genElement?.value ?? null, genBirthRel, genTrans, genFisAlin) ?? "";
                            console.log("gen value " + person.gen);
                            textBodytype.value = person.gen;
                        });
                        genTrans?.addEventListener("change", () => {
                            person.gen =
                                _global_scripts_src_gModel__WEBPACK_IMPORTED_MODULE_2__.fluxGen(genElement, genElement?.value ?? null, genBirthRel, genTrans, genFisAlin) ?? "";
                            console.log("gen value " + person.gen);
                            textBodytype.value = person.gen;
                        });
                        genFisAlin?.addEventListener("change", () => {
                            person.gen =
                                _global_scripts_src_gModel__WEBPACK_IMPORTED_MODULE_2__.fluxGen(genElement, genElement?.value ?? null, genBirthRel, genTrans, genFisAlin) ?? "";
                            console.log("gen value " + person.gen);
                            textBodytype.value = person.gen;
                        });
                    }
                    else {
                        const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
                        _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.typeError("person.gen", person?.gen ?? null, "string", slicedError ?? "NULL");
                    }
                    if (textBodytype && textBodytype instanceof HTMLSelectElement) {
                        textBodytype.addEventListener("change", () => {
                            _edFisNutModel__WEBPACK_IMPORTED_MODULE_0__.changeTabDCutLayout(protocolo, tabDC);
                            person.gen = textBodytype.value;
                            if (genBirthRel.value === "cis" &&
                                (genElement.value === "masculino" ||
                                    genElement.value === "feminino")) {
                                genElement.value = textBodytype.value;
                            }
                            console.log("gen value " + person.gen);
                            let slicedError = "";
                            switch (textBodytype.value) {
                                case "masculino":
                                    genFisAlin.value = "masculinizado";
                                    break;
                                case "feminino":
                                    genFisAlin.value = "feminilizado";
                                    break;
                                case "neutro":
                                    genFisAlin.value = "neutro";
                                    break;
                                default:
                                    slicedError =
                                        new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) ||
                                            "";
                                    _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.stringError("verificando textBodytype.value", textBodytype?.value ?? "null", slicedError ?? "NULL");
                            }
                        });
                    }
                    else {
                        const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
                        _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.elementNotFound(protocolo ?? null, "protocolo", slicedError ?? "NULL");
                    }
                    //obtenção de .age inicial com listener para input e atualização correspondente
                    if (ageElement instanceof HTMLInputElement &&
                        ageElement.type === "number") {
                        person.age = parseFloat(ageElement?.value) || 0;
                        if (typeof person.age === "number") {
                            ageElement.addEventListener("input", () => {
                                person.age = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.validateEvResultNum(ageElement, person.age);
                                //sem autofill, dá update somente em person.age
                                if (isAutoFillActive) {
                                    arrayPGC = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.updatePGC(person, numCons, "cons", consTablesFs);
                                    [PGC, targInpSumDCut, targInpPGC] = arrayPGC;
                                    person.sumDCut = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.matchPersonPropertiesDC(person, targInpSumDCut);
                                    arrayTargInps = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.defineTargInps(numCons, "cons", consTablesFs);
                                    [
                                        targInpWeight,
                                        targInpHeight,
                                        targInpIMC,
                                        targInpMLG,
                                        targInpTMB,
                                        targInpGET,
                                    ] = arrayTargInps;
                                    arrayWH = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.matchPersonPropertiesWH(person, targInpWeight, targInpHeight);
                                    [person.weight, person.height] = arrayWH;
                                    console.log("weight capturado " + person.weight);
                                    console.log("height capturado " + person.height);
                                    indexesArray = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.updateIndexesContexts(person, gordCorpLvl, targInpIMC, targInpMLG, targInpTMB, targInpGET, formTMBTypeElement, factorAtvLvl, factorAtleta);
                                    [IMC, MLG, TMB, GET] = indexesArray;
                                }
                            });
                        }
                        else {
                            const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
                            _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.typeError("person.age", person?.age ?? null, "number", slicedError ?? "NULL");
                        }
                    }
                    else {
                        const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
                        _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.inputNotFound(ageElement ?? null, "ageElement", slicedError ?? "NULL");
                    }
                    //obtenção de .weight inicial com listener para input e atualização correspondente
                    if (targInpWeight instanceof HTMLInputElement &&
                        targInpWeight.type === "number") {
                        person.weight = parseInt(targInpWeight.value || "0", 10);
                        if (typeof person.weight === "number") {
                            if (weightInps.length > 0) {
                                weightInps.forEach((weightInp) => {
                                    weightInp.addEventListener("input", () => {
                                        person.weight = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.validateEvResultNum(weightInp, person.weight);
                                        if (isAutoFillActive) {
                                            numCol = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.getNumCol(weightInp) ?? 0;
                                            if (typeof numCol === "number" && numCol > 0) {
                                                arrayTargInps = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.defineTargInps(numCol, "tab", consTablesFs);
                                                [
                                                    targInpWeight,
                                                    targInpHeight,
                                                    targInpIMC,
                                                    targInpMLG,
                                                    targInpTMB,
                                                    targInpGET,
                                                ] = arrayTargInps;
                                                arrayWH = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.matchPersonPropertiesWH(person, targInpWeight, targInpHeight);
                                                person.height = arrayWH[1];
                                                console.log("weight capturado " + person.weight);
                                                console.log("height capturado " + person.height);
                                                indexesArray = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.updateIndexesContexts(person, gordCorpLvl, targInpIMC, targInpMLG, targInpTMB, targInpGET, formTMBTypeElement, factorAtvLvl, factorAtleta);
                                                [IMC, MLG, TMB, GET] = indexesArray;
                                            }
                                            else {
                                                const slicedError = new Error().stack
                                                    ?.split("\n")[1]
                                                    ?.trim()
                                                    ?.slice(-7, -1) || "";
                                                _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.typeError("obtendo Número de Coluna", numCol ?? null, "number (natural)", slicedError ?? "NULL");
                                            }
                                        }
                                    });
                                });
                            }
                            else {
                                const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) ||
                                    "";
                                _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.elementNotPopulated(weightInps, "weightInps", slicedError ?? "NULL");
                            }
                        }
                        else {
                            const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
                            _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.typeError("person.weight", person.weight, "number", slicedError ?? "NULL");
                        }
                    }
                    else {
                        const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
                        _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.inputNotFound(targInpWeight ?? null, "targInpWeight", slicedError ?? "NULL");
                    }
                    //obtenção de .height inicial com listener para input e atualização correspondente
                    if (targInpHeight instanceof HTMLInputElement &&
                        targInpHeight.type === "number") {
                        person.height = parseInt(targInpHeight.value || "0", 10);
                        if (typeof person.height === "number") {
                            if (heightInps.length > 0) {
                                heightInps.forEach((heightInp) => {
                                    heightInp.addEventListener("input", () => {
                                        person.height = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.validateEvResultNum(heightInp, person.height);
                                        //sem autofill, dá update somente em person.height
                                        if (isAutoFillActive) {
                                            console.log("weight capturado " + person.weight);
                                            console.log("height capturado " + person.height);
                                            numCol = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.getNumCol(heightInp) ?? 0;
                                            if (typeof numCol === "number" && numCol > 0) {
                                                arrayTargInps = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.defineTargInps(numCol, "tab", consTablesFs);
                                                [
                                                    targInpHeight,
                                                    targInpHeight,
                                                    targInpIMC,
                                                    targInpMLG,
                                                    targInpTMB,
                                                    targInpGET,
                                                ] = arrayTargInps;
                                                arrayWH = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.matchPersonPropertiesWH(person, targInpWeight, targInpHeight);
                                                person.weight = arrayWH[0];
                                                console.log("weight capturado " + person.weight);
                                                console.log("height capturado " + person.height);
                                                indexesArray = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.updateIndexesContexts(person, gordCorpLvl, targInpIMC, targInpMLG, targInpTMB, targInpGET, formTMBTypeElement, factorAtvLvl, factorAtleta);
                                                [IMC, MLG, TMB, GET] = indexesArray;
                                            }
                                            else {
                                                const slicedError = new Error().stack
                                                    ?.split("\n")[1]
                                                    ?.trim()
                                                    ?.slice(-7, -1) || "";
                                                _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.typeError("obtendo Número de Coluna", numCol ?? null, "number (natural)", slicedError ?? "NULL");
                                            }
                                        }
                                    });
                                });
                            }
                            else {
                                const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) ||
                                    "";
                                _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.elementNotPopulated(heightInps, "heightInps", slicedError ?? "NULL");
                            }
                        }
                        else {
                            const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
                            _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.typeError("person.height", person.height, "number", slicedError ?? "NULL");
                        }
                    }
                    else {
                        const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
                        _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.inputNotFound(targInpHeight ?? null, "targInpHeight", slicedError ?? "NULL");
                    }
                    //obtenção de .sumDCut inicial com listener para input e atualização correspondente
                    if (targInpSumDCut instanceof HTMLInputElement &&
                        targInpSumDCut.type === "number") {
                        person.sumDCut = parseInt(targInpSumDCut.value || "0.01", 10);
                        if (sumDCInps.length > 0) {
                            sumDCInps.forEach((sumDCInp) => {
                                sumDCInp.addEventListener("input", () => {
                                    person.sumDCut = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.validateEvResultNum(sumDCInp, person.sumDCut);
                                    if (isAutoFillActive) {
                                        numCol = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.getNumCol(sumDCInp) ?? 0;
                                        if (typeof numCol === "number" && numCol > 0) {
                                            if (isAutoFillActive) {
                                                arrayPGC = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.updatePGC(person, numCol, "tab", consTablesFs);
                                                [PGC, targInpSumDCut, targInpPGC] = arrayPGC;
                                            }
                                        }
                                        else {
                                            const slicedError = new Error().stack
                                                ?.split("\n")[1]
                                                ?.trim()
                                                ?.slice(-7, -1) || "";
                                            _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.typeError("obtendo Número de Coluna", numCol ?? null, "number (natural)", slicedError ?? "NULL");
                                        }
                                    }
                                });
                            });
                        }
                        else {
                            const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
                            _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.elementNotPopulated(sumDCInps ?? null, "sumDCInps", slicedError ?? "NULL");
                        }
                    }
                    else {
                        const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
                        _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.inputNotFound(targInpSumDCut ?? null, "targInpSumDCut", slicedError ?? "NULL");
                    }
                    //classifica person
                    if (person && Object.keys(person).length === 6) {
                        person = _global_scripts_src_gModel__WEBPACK_IMPORTED_MODULE_2__.generatePersonInstance(person);
                        console.log(`PERSON INICIAL INSTANCIADA ${JSON.stringify(person)} + instance ${Object.prototype.toString.call(person).slice(8, -1) ?? "null"}`);
                    }
                    else {
                        const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
                        _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.objectError("a geração de instância", person ?? null, "person", "6", slicedError ?? "NULL");
                    }
                    //adiciona listeneres nos botões e inputs de índices tabelados se person for classificada
                    if ((person instanceof _global_scripts_src_classes__WEBPACK_IMPORTED_MODULE_5__.Man ||
                        person instanceof _global_scripts_src_classes__WEBPACK_IMPORTED_MODULE_5__.Woman ||
                        person instanceof _global_scripts_src_classes__WEBPACK_IMPORTED_MODULE_5__.Neutro) &&
                        gordCorpLvl instanceof HTMLSelectElement) {
                        isPersonClassified = true;
                        if (autoFillBtn instanceof HTMLButtonElement) {
                            autoFillBtn.addEventListener("click", () => {
                                isAutoFillActive = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.switchAutoFill(autoFillBtn, locksTabInd);
                            });
                        }
                        else {
                            const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
                            _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.elementNotFound(autoFillBtn ?? null, "autoFillBtn", slicedError ?? "NULL");
                        }
                        //obtenção de .atvLvl inicial, com adição de listeners para mudança de containers no contexto
                        if (atvLvlElement instanceof HTMLSelectElement &&
                            formTMBTypeElement instanceof HTMLSelectElement &&
                            spanFactorAtleta instanceof HTMLSpanElement &&
                            lockGordCorpLvl instanceof HTMLSpanElement) {
                            person.atvLvl = atvLvlElement?.value;
                            if ((person.atvLvl === "sedentario" ||
                                person.atvLvl === "leve" ||
                                person.atvLvl === "moderado" ||
                                person.atvLvl === "intenso" ||
                                person.atvLvl === "muitoIntenso") &&
                                atvLvlElement instanceof HTMLSelectElement &&
                                nafType instanceof HTMLSelectElement) {
                                factorAtvLvl = 1.4;
                                //blocos para adição de listeners com fluxo de chamada similar
                                atvLvlElement.addEventListener("change", () => {
                                    //ajusta par atvLevelElement e nafType + dá update em .atLvl
                                    person.atvLvl = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.updateAtvLvl(atvLvlElement, person.atvLvl, nafType);
                                    //retorna factorAtvLvl(número para ser utilizado, com base no .atvLvl)
                                    const returnedFactorAtvLvl = person.checkAtvLvl(person);
                                    if (typeof returnedFactorAtvLvl === "number") {
                                        factorAtvLvl = returnedFactorAtvLvl || 1.4;
                                    }
                                    else {
                                        const slicedError = new Error().stack
                                            ?.split("\n")[1]
                                            ?.trim()
                                            ?.slice(-7, -1) || "";
                                        _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.typeError("returnedFactorAtvLvl", returnedFactorAtvLvl ?? null, "number", slicedError ?? "NULL");
                                    }
                                    //ajusta elementos <select> com base em combinações
                                    _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.fluxFormIMC(IMC ?? 0, formTMBTypeElement, gordCorpLvl);
                                    _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.matchTMBElements(atvLvlElement, formTMBTypeElement, spanFactorAtleta, gordCorpLvl, lockGordCorpLvl, IMC ?? 0);
                                });
                                nafType.addEventListener("change", () => {
                                    person.atvLvl = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.updateAtvLvl(nafType, person.atvLvl, atvLvlElement);
                                    const returnedFactorAtvLvl = person.checkAtvLvl(person);
                                    if (typeof returnedFactorAtvLvl === "number") {
                                        factorAtvLvl = returnedFactorAtvLvl || 1.4;
                                    }
                                    else {
                                        const slicedError = new Error().stack
                                            ?.split("\n")[1]
                                            ?.trim()
                                            ?.slice(-7, -1) || "";
                                        _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.typeError("returnedFactorAtvLvl", returnedFactorAtvLvl ?? null, "number", slicedError ?? "NULL");
                                    }
                                    _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.matchTMBElements(nafType, formTMBTypeElement, spanFactorAtleta, gordCorpLvl, lockGordCorpLvl, IMC ?? 0);
                                });
                                if (formTMBTypeElement instanceof HTMLSelectElement) {
                                    formTMBTypeElement.addEventListener("change", () => {
                                        person.atvLvl = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.updateAtvLvl(atvLvlElement, person.atvLvl, nafType);
                                        const returnedFactorAtvLvl = person.checkAtvLvl(person);
                                        if (typeof returnedFactorAtvLvl === "number") {
                                            factorAtvLvl = returnedFactorAtvLvl || 1.4;
                                        }
                                        else {
                                            const slicedError = new Error().stack
                                                ?.split("\n")[1]
                                                ?.trim()
                                                ?.slice(-7, -1) || "";
                                            _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.typeError("returnedFactorAtvLvl", returnedFactorAtvLvl || undefined, "number", slicedError ?? "NULL");
                                        }
                                        _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.matchTMBElements(atvLvlElement, formTMBTypeElement, spanFactorAtleta, gordCorpLvl, lockGordCorpLvl, IMC ?? 0);
                                    });
                                }
                                else {
                                    const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) ||
                                        "";
                                    _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.elementNotFound(formTMBTypeElement ?? null, "formTMBTypeElement", slicedError ?? "NULL");
                                }
                                if (gordCorpLvl instanceof HTMLSelectElement) {
                                    gordCorpLvl.addEventListener("change", () => {
                                        person.atvLvl = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.updateAtvLvl(atvLvlElement, person.atvLvl, nafType);
                                        const returnedFactorAtvLvl = person.checkAtvLvl(person);
                                        if (typeof returnedFactorAtvLvl === "number") {
                                            factorAtvLvl = returnedFactorAtvLvl || 1.4;
                                        }
                                        else {
                                            const slicedError = new Error().stack
                                                ?.split("\n")[1]
                                                ?.trim()
                                                ?.slice(-7, -1) || "";
                                            _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.typeError("returnedFactorAtvLvl", returnedFactorAtvLvl ?? null, "number", slicedError ?? "NULL");
                                        }
                                        _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.matchTMBElements(atvLvlElement, formTMBTypeElement, spanFactorAtleta, gordCorpLvl, lockGordCorpLvl, IMC ?? 0);
                                    });
                                }
                                else {
                                    const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) ||
                                        "";
                                    _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.elementNotFound(gordCorpLvl ?? null, "gordCorpLvl", slicedError ?? "NULL");
                                }
                                if (selFactorAtleta instanceof HTMLSelectElement) {
                                    selFactorAtleta.addEventListener("change", () => {
                                        factorAtleta = selFactorAtleta.value;
                                        //sem autofill, dá update somente em factorAtleta
                                        if (isAutoFillActive) {
                                            arrayPGC = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.updatePGC(person, numCons, "cons", consTablesFs);
                                            [PGC, targInpSumDCut, targInpPGC] = arrayPGC;
                                            person.sumDCut = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.matchPersonPropertiesDC(person, targInpSumDCut);
                                            arrayTargInps = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.defineTargInps(numCons, "cons", consTablesFs);
                                            [
                                                targInpWeight,
                                                targInpHeight,
                                                targInpIMC,
                                                targInpMLG,
                                                targInpTMB,
                                                targInpGET,
                                            ] = arrayTargInps;
                                            arrayWH = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.matchPersonPropertiesWH(person, targInpWeight, targInpHeight);
                                            [person.weight, person.height] = arrayWH;
                                            console.log("weight capturado " + person.weight);
                                            console.log("height capturado " + person.height);
                                            indexesArray = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.updateIndexesContexts(person, gordCorpLvl, targInpIMC, targInpMLG, targInpTMB, targInpGET, formTMBTypeElement, factorAtvLvl, factorAtleta);
                                            [IMC, MLG, TMB, GET] = indexesArray;
                                        }
                                    });
                                }
                                else {
                                    const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) ||
                                        "";
                                    _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.elementNotFound(selFactorAtleta ?? null, "selFactorAtleta", slicedError ?? "NULL");
                                }
                            }
                            else {
                                const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) ||
                                    "";
                                _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.multipleElementsNotFound(slicedError ?? "NULL", `value de Nível de Atividade Física ou Elementos relacionados. Valor obtido: ${person.atvLvl ?? "null"};
                    Valore aceitos: sedentario || leve || moderado || intenso || muitoIntenso.`, atvLvlElement ?? null, nafType ?? null);
                            }
                        }
                        else {
                            const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
                            _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.multipleElementsNotFound(slicedError ?? "NULL", `Erro validando Elemento de Nível de Atividade Física e/ou Relacionados`, atvLvlElement ?? null, formTMBTypeElement ?? null, spanFactorAtleta ?? null, lockGordCorpLvl ?? null);
                        }
                        //atualiza layout de tabela de acordo com protocolo e gênero + soma de Dobras Cutâneas
                        if (protocolo && protocolo instanceof HTMLSelectElement) {
                            protocolo.addEventListener("change", () => {
                                protocolo.value = _edFisNutModel__WEBPACK_IMPORTED_MODULE_0__.changeTabDCutLayout(protocolo, tabDC);
                            });
                            //adiciona listeners para os botões de soma das Dobras Cutâneas
                            if (sumDCBtns.length > 0) {
                                sumDCBtns.forEach((sumDCBtn) => {
                                    sumDCBtn?.addEventListener("click", () => {
                                        if (rowsDCArray.length > 0 &&
                                            sumDCBtn instanceof HTMLButtonElement) {
                                            person.sumDCut = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.createArraysRels(sumDCBtn?.id, rowsDCArray, protocolo.value);
                                            if (!(typeof person.sumDCut === "number") ||
                                                Number.isNaN(person.sumDCut) ||
                                                person.sumDCut <= 0) {
                                                const slicedError = new Error().stack
                                                    ?.split("\n")[1]
                                                    ?.trim()
                                                    ?.slice(-7, -1) || "";
                                                _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.typeError("person.sumDCut", person.sumDCut, "number", slicedError ?? "NULL");
                                            }
                                            if (isAutoFillActive) {
                                                if (isPersonClassified &&
                                                    targInpPGC instanceof HTMLInputElement &&
                                                    protocolo.value === "pollock3" &&
                                                    person.age >= 0) {
                                                    numCol = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.getNumCol(sumDCBtn) ?? 0;
                                                    if (typeof numCol === "number" && numCol > 0) {
                                                        arrayPGC = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.updatePGC(person, numCol, "tab", consTablesFs);
                                                    }
                                                    else {
                                                        const slicedError = new Error().stack
                                                            ?.split("\n")[1]
                                                            ?.trim()
                                                            ?.slice(-7, -1) || "";
                                                        _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.typeError("obtendo Número de Coluna", numCol ?? null, "number (natural)", slicedError ?? "NULL");
                                                    }
                                                }
                                                else {
                                                    console.warn(`Erro atualizando PGC através de Somatório de DCs.
                          person.age obtido: ${person?.age || 0}
                          Protocolo usado: ${protocolo?.value || "null"} (Apenas pollock3 aceito, por enquanto);
                          isPersonClassified: ${isPersonClassified ?? false};
                          Instância de Input Target para PGC: ${Object.prototype.toString
                                                        .call(targInpPGC)
                                                        .slice(8, -1) ?? "null"}`);
                                                }
                                            }
                                        }
                                        else {
                                            const slicedError = new Error().stack
                                                ?.split("\n")[1]
                                                ?.trim()
                                                ?.slice(-7, -1) || "";
                                            _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.elementWithArrayError("rows de Dobras Cutâneas e/ou Botão de Soma de Dobras Cutâneas", rowsDCArray ?? null, "rowsDCArray", sumDCBtn ?? null, "sumDCBtn", slicedError ?? "NULL");
                                        }
                                    });
                                });
                            }
                            else {
                                const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) ||
                                    "";
                                _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.elementNotPopulated(sumDCBtns ?? null, "sumDCBtns", slicedError ?? "NULL");
                            }
                        }
                        else {
                            const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
                            _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.elementNotFound(protocolo ?? null, "protocolo", slicedError ?? "NULL");
                        }
                        //adições de listeners para clique nos botões dos índices
                        if (targInpIMC instanceof HTMLInputElement &&
                            targInpIMC.type === "number" &&
                            targInpMLG instanceof HTMLInputElement &&
                            targInpMLG.type === "number" &&
                            targInpTMB instanceof HTMLInputElement &&
                            targInpTMB.type === "number" &&
                            targInpGET instanceof HTMLInputElement &&
                            targInpGET.type === "number" &&
                            formTMBTypeElement instanceof HTMLSelectElement) {
                            IMC = parseFloat(parseFloat(targInpIMC?.value || "0").toFixed(4));
                            MLG = parseFloat(parseFloat(targInpMLG?.value || "0").toFixed(4));
                            TMB = parseFloat(parseFloat(targInpTMB?.value || "0").toFixed(4));
                            GET = parseFloat(parseFloat(targInpGET?.value || "0").toFixed(4));
                            //botões são independentes de condição de autofill
                            if (IMCBtns.length > 0) {
                                IMCBtns.forEach((imcbtn) => {
                                    if (imcbtn instanceof HTMLButtonElement) {
                                        imcbtn.addEventListener("click", () => {
                                            numCol = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.getNumCol(imcbtn) ?? 0;
                                            if (typeof numCol === "number" && numCol > 0) {
                                                arrayTargInps = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.defineTargInps(numCol, "tab", consTablesFs);
                                                [
                                                    targInpWeight,
                                                    targInpHeight,
                                                    targInpIMC,
                                                    targInpMLG,
                                                    targInpTMB,
                                                    targInpGET,
                                                ] = arrayTargInps;
                                                arrayWH = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.matchPersonPropertiesWH(person, targInpWeight, targInpHeight);
                                                [person.weight, person.height] = arrayWH;
                                                console.log("weight capturado " + person.weight);
                                                console.log("height capturado " + person.height);
                                                indexesArray = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.updateIndexesContexts(person, gordCorpLvl, targInpIMC, targInpMLG, targInpTMB, targInpGET, formTMBTypeElement, factorAtvLvl, factorAtleta);
                                                [IMC, MLG, TMB, GET] = indexesArray;
                                            }
                                            else {
                                                const slicedError = new Error().stack
                                                    ?.split("\n")[1]
                                                    ?.trim()
                                                    ?.slice(-7, -1) || "";
                                                _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.typeError("obtendo Número de Coluna", numCol ?? null, "number (natural)", slicedError ?? "NULL");
                                            }
                                        });
                                    }
                                    else {
                                        const slicedError = new Error().stack
                                            ?.split("\n")[1]
                                            ?.trim()
                                            ?.slice(-7, -1) || "";
                                        _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.elementNotFound(imcbtn ?? null, "imcbtn", slicedError ?? "NULL");
                                    }
                                });
                            }
                            else {
                                const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) ||
                                    "";
                                _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.elementNotPopulated(IMCBtns ?? null, "IMCBtns", slicedError ?? "NULL");
                            }
                            if (MLGBtns.length > 0) {
                                MLGBtns.forEach((mlgbtn) => {
                                    if (mlgbtn instanceof HTMLButtonElement) {
                                        mlgbtn.addEventListener("click", () => {
                                            numCol = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.getNumCol(mlgbtn) ?? 0;
                                            if (typeof numCol === "number" && numCol > 0) {
                                                arrayTargInps = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.defineTargInps(numCol, "tab", consTablesFs);
                                                [
                                                    targInpWeight,
                                                    targInpHeight,
                                                    targInpIMC,
                                                    targInpMLG,
                                                    targInpTMB,
                                                    targInpGET,
                                                ] = arrayTargInps;
                                                arrayWH = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.matchPersonPropertiesWH(person, targInpWeight, targInpHeight);
                                                [person.weight, person.height] = arrayWH;
                                                console.log("weight capturado " + person.weight);
                                                console.log("height capturado " + person.height);
                                                indexesArray = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.updateIndexesContexts(person, gordCorpLvl, targInpIMC, targInpMLG, targInpTMB, targInpGET, formTMBTypeElement, factorAtvLvl, factorAtleta);
                                                [IMC, MLG, TMB, GET] = indexesArray;
                                            }
                                            else {
                                                const slicedError = new Error().stack
                                                    ?.split("\n")[1]
                                                    ?.trim()
                                                    ?.slice(-7, -1) || "";
                                                _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.typeError("obtendo Número de Coluna", numCol ?? null, "number (natural)", slicedError ?? "NULL");
                                            }
                                        });
                                    }
                                    else {
                                        const slicedError = new Error().stack
                                            ?.split("\n")[1]
                                            ?.trim()
                                            ?.slice(-7, -1) || "";
                                        _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.elementNotFound(mlgbtn ?? null, "mlgbtn", slicedError ?? "NULL");
                                    }
                                });
                            }
                            else {
                                const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) ||
                                    "";
                                _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.elementNotPopulated(MLGBtns ?? null, "MLGBtns", slicedError ?? "NULL");
                            }
                            if (PGCBtns.length > 0) {
                                PGCBtns.forEach((pgcbtn) => {
                                    if (pgcbtn instanceof HTMLButtonElement) {
                                        pgcbtn.addEventListener("click", () => {
                                            numCol = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.getNumCol(pgcbtn) ?? 0;
                                            if (typeof numCol === "number" && numCol > 0) {
                                                arrayPGC = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.updatePGC(person, numCol, "tab", consTablesFs);
                                                [PGC, targInpSumDCut, targInpPGC] = arrayPGC;
                                                person.sumDCut =
                                                    _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.matchPersonPropertiesDC(person, targInpSumDCut);
                                            }
                                            else {
                                                const slicedError = new Error().stack
                                                    ?.split("\n")[1]
                                                    ?.trim()
                                                    ?.slice(-7, -1) || "";
                                                _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.typeError("obtendo Número de Coluna", numCol ?? null, "number (natural)", slicedError ?? "NULL");
                                            }
                                        });
                                    }
                                    else {
                                        const slicedError = new Error().stack
                                            ?.split("\n")[1]
                                            ?.trim()
                                            ?.slice(-7, -1) || "";
                                        _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.elementNotFound(pgcbtn ?? null, "pgcbtn", slicedError ?? "NULL");
                                    }
                                });
                            }
                            else {
                                const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) ||
                                    "";
                                _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.elementNotPopulated(PGCBtns ?? null, "PGCBtns", slicedError ?? "NULL");
                            }
                            if (TMBBtns.length > 0) {
                                TMBBtns.forEach((tmbbtn) => {
                                    tmbbtn.addEventListener("click", () => {
                                        if (tmbbtn instanceof HTMLButtonElement) {
                                            console.log("ID " + tmbbtn.id);
                                            numCol = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.getNumCol(tmbbtn) ?? 0;
                                            if (typeof numCol === "number" && numCol > 0) {
                                                arrayTargInps = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.defineTargInps(numCol, "tab", consTablesFs);
                                                [
                                                    targInpWeight,
                                                    targInpHeight,
                                                    targInpIMC,
                                                    targInpMLG,
                                                    targInpTMB,
                                                    targInpGET,
                                                ] = arrayTargInps;
                                                arrayWH = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.matchPersonPropertiesWH(person, targInpWeight, targInpHeight);
                                                [person.weight, person.height] = arrayWH;
                                                console.log("weight capturado " + person.weight);
                                                console.log("height capturado " + person.height);
                                                indexesArray = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.updateIndexesContexts(person, gordCorpLvl, targInpIMC, targInpMLG, targInpTMB, targInpGET, formTMBTypeElement, factorAtvLvl, factorAtleta);
                                                [IMC, MLG, TMB, GET] = indexesArray;
                                            }
                                            else {
                                                const slicedError = new Error().stack
                                                    ?.split("\n")[1]
                                                    ?.trim()
                                                    ?.slice(-7, -1) || "";
                                                _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.typeError("obtendo Número de Coluna", numCol ?? null, "number (natural)", slicedError ?? "NULL");
                                            }
                                        }
                                        else {
                                            const slicedError = new Error().stack
                                                ?.split("\n")[1]
                                                ?.trim()
                                                ?.slice(-7, -1) || "";
                                            _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.elementNotFound(tmbbtn ?? null, "tmbbtn", slicedError ?? "NULL");
                                        }
                                    });
                                });
                            }
                            else {
                                const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) ||
                                    "";
                                _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.elementNotPopulated(TMBBtns ?? null, "TMBBtns", slicedError ?? "NULL");
                            }
                            if (GETBtns.length > 0) {
                                GETBtns.forEach((getbtn) => {
                                    getbtn.addEventListener("click", () => {
                                        if (getbtn instanceof HTMLButtonElement) {
                                            numCol = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.getNumCol(getbtn) ?? 0;
                                            if (typeof numCol === "number" && numCol > 0) {
                                                arrayTargInps = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.defineTargInps(numCol, "tab", consTablesFs);
                                                [
                                                    targInpWeight,
                                                    targInpHeight,
                                                    targInpIMC,
                                                    targInpMLG,
                                                    targInpTMB,
                                                    targInpGET,
                                                ] = arrayTargInps;
                                                arrayWH = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.matchPersonPropertiesWH(person, targInpWeight, targInpHeight);
                                                [person.weight, person.height] = arrayWH;
                                                console.log("weight capturado " + person.weight);
                                                console.log("height capturado " + person.height);
                                                indexesArray = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.updateIndexesContexts(person, gordCorpLvl, targInpIMC, targInpMLG, targInpTMB, targInpGET, formTMBTypeElement, factorAtvLvl, factorAtleta);
                                                [IMC, MLG, TMB, GET] = indexesArray;
                                            }
                                            else {
                                                const slicedError = new Error().stack
                                                    ?.split("\n")[1]
                                                    ?.trim()
                                                    ?.slice(-7, -1) || "";
                                                _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.typeError("obtendo Número de Coluna", numCol ?? null, "number (natural)", slicedError ?? "NULL");
                                            }
                                        }
                                        else {
                                            const slicedError = new Error().stack
                                                ?.split("\n")[1]
                                                ?.trim()
                                                ?.slice(-7, -1) || "";
                                            _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.elementNotFound(getbtn ?? null, "getbtn", slicedError ?? "NULL");
                                        }
                                    });
                                });
                            }
                            else {
                                const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) ||
                                    "";
                                _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.elementNotPopulated(GETBtns ?? null, "GETBtns", slicedError ?? "NULL");
                            }
                            //adições de listeners para inputs dos índices
                            if (typeof IMC === "number") {
                                if (IMCInps.length > 0) {
                                    IMCInps.forEach((IMCInp) => {
                                        IMCInp.addEventListener("input", () => {
                                            if (IMCInp instanceof HTMLInputElement) {
                                                const returnedIMC = _global_scripts_src_gHandlers__WEBPACK_IMPORTED_MODULE_3__.updateSimpleProperty(targInpIMC) ?? 0;
                                                if (typeof returnedIMC === "number") {
                                                    IMC = parseFloat(returnedIMC.toFixed(4));
                                                }
                                                else {
                                                    const slicedError = new Error().stack
                                                        ?.split("\n")[1]
                                                        ?.trim()
                                                        ?.slice(-7, -1) || "";
                                                    _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.typeError("update de IMC", returnedIMC ?? null, "number", slicedError ?? "NULL");
                                                }
                                                //sem autofill, dá update somente em IMC
                                                if (isAutoFillActive) {
                                                    numCol = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.getNumCol(IMCInp) ?? 0;
                                                    if (typeof numCol === "number" && numCol > 0) {
                                                        arrayTargInps = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.defineTargInps(numCol, "tab", consTablesFs);
                                                        [
                                                            targInpWeight,
                                                            targInpHeight,
                                                            targInpIMC,
                                                            targInpMLG,
                                                            targInpTMB,
                                                            targInpGET,
                                                        ] = arrayTargInps;
                                                        arrayWH = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.matchPersonPropertiesWH(person, targInpWeight, targInpHeight);
                                                        [person.weight, person.height] = arrayWH;
                                                        console.log("weight capturado " + person.weight);
                                                        console.log("height capturado " + person.height);
                                                        indexesArray =
                                                            _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.updateIndexesContexts(person, gordCorpLvl, targInpIMC, targInpMLG, targInpTMB, targInpGET, formTMBTypeElement, factorAtvLvl, factorAtleta);
                                                        [IMC, MLG, TMB, GET] = indexesArray;
                                                    }
                                                    else {
                                                        const slicedError = new Error().stack
                                                            ?.split("\n")[1]
                                                            ?.trim()
                                                            ?.slice(-7, -1) || "";
                                                        _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.typeError("obtendo Número de Coluna", numCol ?? null, "number (natural)", slicedError ?? "NULL");
                                                    }
                                                }
                                            }
                                            else {
                                                const slicedError = new Error().stack
                                                    ?.split("\n")[1]
                                                    ?.trim()
                                                    ?.slice(-7, -1) || "";
                                                _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.inputNotFound(IMCInp?.id ?? null, "IMCInp", slicedError ?? "NULL");
                                            }
                                        });
                                    });
                                }
                                else {
                                    const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) ||
                                        "";
                                    _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.elementNotPopulated(IMCInps ?? null, "IMCInps", slicedError ?? "NULL");
                                }
                            }
                            else {
                                const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) ||
                                    "";
                                _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.typeError("IMC", IMC ?? null, "number", slicedError ?? "NULL");
                            }
                            if (typeof MLG === "number") {
                                if (MLGInps.length > 0) {
                                    MLGInps.forEach((MLGInp) => {
                                        MLGInp.addEventListener("input", () => {
                                            const returnedMLG = _global_scripts_src_gHandlers__WEBPACK_IMPORTED_MODULE_3__.updateSimpleProperty(targInpMLG) ?? 0;
                                            if (typeof returnedMLG === "number") {
                                                MLG = parseFloat(returnedMLG.toFixed(4));
                                            }
                                            else {
                                                const slicedError = new Error().stack
                                                    ?.split("\n")[1]
                                                    ?.trim()
                                                    ?.slice(-7, -1) || "";
                                                _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.typeError("update de MLG", returnedMLG ?? null, "number", slicedError ?? "NULL");
                                            }
                                            //sem autofill, dá update somente em MLG
                                            if (isAutoFillActive) {
                                                numCol = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.getNumCol(MLGInp) ?? 0;
                                                if (typeof numCol === "number" && numCol > 0) {
                                                    arrayTargInps = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.defineTargInps(numCol, "tab", consTablesFs);
                                                    [
                                                        targInpWeight,
                                                        targInpHeight,
                                                        targInpIMC,
                                                        targInpMLG,
                                                        targInpTMB,
                                                        targInpGET,
                                                    ] = arrayTargInps;
                                                    arrayWH = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.matchPersonPropertiesWH(person, targInpWeight, targInpHeight);
                                                    [person.weight, person.height] = arrayWH;
                                                    console.log("weight capturado " + person.weight);
                                                    console.log("height capturado " + person.height);
                                                    indexesArray = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.updateIndexesContexts(person, gordCorpLvl, targInpIMC, targInpMLG, targInpTMB, targInpGET, formTMBTypeElement, factorAtvLvl, factorAtleta);
                                                    [IMC, MLG, TMB, GET] = indexesArray;
                                                }
                                                else {
                                                    const slicedError = new Error().stack
                                                        ?.split("\n")[1]
                                                        ?.trim()
                                                        ?.slice(-7, -1) || "";
                                                    _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.typeError("obtendo Número de Coluna", numCol ?? null, "number (natural)", slicedError ?? "NULL");
                                                }
                                            }
                                        });
                                    });
                                }
                                else {
                                    const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) ||
                                        "";
                                    _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.elementNotPopulated(MLGInps ?? null, "MLGInps", slicedError ?? "NULL");
                                }
                            }
                            else {
                                const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) ||
                                    "";
                                _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.typeError("MLG", MLG ?? null, "number", slicedError ?? "NULL");
                            }
                            if (targInpPGC instanceof HTMLInputElement &&
                                targInpPGC.type === "number") {
                                PGC = parseFloat(parseFloat(targInpPGC?.value || "0").toFixed(4));
                                if (typeof PGC === "number") {
                                    if (PGCInps.length > 0) {
                                        PGCInps.forEach((PGCInp) => {
                                            if (PGCInp instanceof HTMLInputElement) {
                                                PGCInp.addEventListener("input", () => {
                                                    const returnedPGC = _global_scripts_src_gHandlers__WEBPACK_IMPORTED_MODULE_3__.updateSimpleProperty(PGCInp) ?? 0;
                                                    if (typeof returnedPGC === "number") {
                                                        PGC = parseFloat(returnedPGC.toFixed(4));
                                                    }
                                                    else {
                                                        const slicedError = new Error().stack
                                                            ?.split("\n")[1]
                                                            ?.trim()
                                                            ?.slice(-7, -1) || "";
                                                        _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.typeError("update de PGC", returnedPGC ?? null, "number", slicedError ?? "NULL");
                                                    }
                                                });
                                            }
                                            else {
                                                const slicedError = new Error().stack
                                                    ?.split("\n")[1]
                                                    ?.trim()
                                                    ?.slice(-7, -1) || "";
                                                _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.inputNotFound(PGCInp?.id ?? null, "PGCInp", slicedError ?? "NULL");
                                            }
                                        });
                                    }
                                    else {
                                        const slicedError = new Error().stack
                                            ?.split("\n")[1]
                                            ?.trim()
                                            ?.slice(-7, -1) || "";
                                        _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.elementNotPopulated(PGCInps ?? null, "PGCInps", slicedError ?? "NULL");
                                    }
                                }
                                else {
                                    const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) ||
                                        "";
                                    _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.typeError("PGC", PGC ?? null, "number", slicedError ?? "NULL");
                                }
                            }
                            else {
                                const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) ||
                                    "";
                                _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.inputNotFound(targInpPGC ?? null, "targInpPGC", slicedError ?? "NULL");
                            }
                            if (typeof TMB === "number") {
                                if (TMBInps.length > 0) {
                                    TMBInps.forEach((TMBInp) => {
                                        TMBInp.addEventListener("input", () => {
                                            if (TMBInp instanceof HTMLInputElement) {
                                                const returnedTMB = _global_scripts_src_gHandlers__WEBPACK_IMPORTED_MODULE_3__.updateSimpleProperty(targInpTMB) ?? 0;
                                                if (typeof returnedTMB === "number") {
                                                    TMB = parseFloat(returnedTMB.toFixed(4));
                                                }
                                                else {
                                                    const slicedError = new Error().stack
                                                        ?.split("\n")[1]
                                                        ?.trim()
                                                        ?.slice(-7, -1) || "";
                                                    _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.typeError("update de TMB", returnedTMB ?? null, "number", slicedError ?? "NULL");
                                                }
                                                //sem autofill, dá update somente em TMB
                                                if (isAutoFillActive) {
                                                    numCol = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.getNumCol(TMBInp) ?? 0;
                                                    if (typeof numCol === "number" && numCol > 0) {
                                                        arrayTargInps = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.defineTargInps(numCol, "tab", consTablesFs);
                                                        [
                                                            targInpWeight,
                                                            targInpHeight,
                                                            targInpIMC,
                                                            targInpMLG,
                                                            targInpTMB,
                                                            targInpGET,
                                                        ] = arrayTargInps;
                                                        arrayWH = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.matchPersonPropertiesWH(person, targInpWeight, targInpHeight);
                                                        [person.weight, person.height] = arrayWH;
                                                        console.log("weight capturado " + person.weight);
                                                        console.log("height capturado " + person.height);
                                                        indexesArray =
                                                            _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.updateIndexesContexts(person, gordCorpLvl, targInpIMC, targInpMLG, targInpTMB, targInpGET, formTMBTypeElement, factorAtvLvl, factorAtleta);
                                                        [IMC, MLG, TMB, GET] = indexesArray;
                                                    }
                                                    else {
                                                        const slicedError = new Error().stack
                                                            ?.split("\n")[1]
                                                            ?.trim()
                                                            ?.slice(-7, -1) || "";
                                                        _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.typeError("obtendo Número de Coluna", numCol ?? null, "number (natural)", slicedError ?? "NULL");
                                                    }
                                                }
                                            }
                                            else {
                                                const slicedError = new Error().stack
                                                    ?.split("\n")[1]
                                                    ?.trim()
                                                    ?.slice(-7, -1) || "";
                                                _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.elementNotFound(TMBInp?.id ?? null, "TMBInp", slicedError ?? "NULL");
                                            }
                                        });
                                    });
                                }
                                else {
                                    const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) ||
                                        "";
                                    _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.elementNotPopulated(TMBInps ?? null, "TMBInps", slicedError ?? "NULL");
                                }
                            }
                            else {
                                const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) ||
                                    "";
                                _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.typeError("TMB", TMB ?? null, "number", slicedError ?? "NULL");
                            }
                            if (typeof GET === "number") {
                                if (GETInps.length > 0) {
                                    GETInps.forEach((GETInp) => {
                                        GETInp.addEventListener("input", () => {
                                            if (GETInp instanceof HTMLInputElement) {
                                                const returnedGET = _global_scripts_src_gHandlers__WEBPACK_IMPORTED_MODULE_3__.updateSimpleProperty(targInpGET) ?? 0;
                                                if (typeof returnedGET === "number") {
                                                    GET = parseFloat(returnedGET.toFixed(4));
                                                }
                                                else {
                                                    const slicedError = new Error().stack
                                                        ?.split("\n")[1]
                                                        ?.trim()
                                                        ?.slice(-7, -1) || "";
                                                    _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.typeError("update de GET", returnedGET ?? null, "number", slicedError ?? "NULL");
                                                }
                                                //sem autofill, dá update somente em GET
                                                if (isAutoFillActive) {
                                                    numCol = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.getNumCol(GETInp) ?? 0;
                                                    if (typeof numCol === "number" && numCol > 0) {
                                                        arrayTargInps = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.defineTargInps(numCol, "tab", consTablesFs);
                                                        [
                                                            targInpWeight,
                                                            targInpHeight,
                                                            targInpIMC,
                                                            targInpMLG,
                                                            targInpTMB,
                                                            targInpGET,
                                                        ] = arrayTargInps;
                                                        arrayWH = _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.matchPersonPropertiesWH(person, targInpWeight, targInpHeight);
                                                        [person.weight, person.height] = arrayWH;
                                                        console.log("weight capturado " + person.weight);
                                                        console.log("height capturado " + person.height);
                                                        indexesArray =
                                                            _edFisNutHandler__WEBPACK_IMPORTED_MODULE_1__.updateIndexesContexts(person, gordCorpLvl, targInpIMC, targInpMLG, targInpTMB, targInpGET, formTMBTypeElement, factorAtvLvl, factorAtleta);
                                                        [IMC, MLG, TMB, GET] = indexesArray;
                                                    }
                                                    else {
                                                        const slicedError = new Error().stack
                                                            ?.split("\n")[1]
                                                            ?.trim()
                                                            ?.slice(-7, -1) || "";
                                                        _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.typeError("obtendo Número de Coluna", numCol ?? null, "number (natural)", slicedError ?? "NULL");
                                                    }
                                                }
                                            }
                                            else {
                                                const slicedError = new Error().stack
                                                    ?.split("\n")[1]
                                                    ?.trim()
                                                    ?.slice(-7, -1) || "";
                                                _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.inputNotFound(GETInp?.id ?? null, "GETInp", slicedError ?? "NULL");
                                            }
                                        });
                                    });
                                }
                                else {
                                    const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) ||
                                        "";
                                    _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.elementNotPopulated(GETInps ?? null, "GETInps", slicedError);
                                }
                            }
                            else {
                                const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) ||
                                    "";
                                _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.typeError("GET", GET ?? null, "number", slicedError ?? "NULL");
                            }
                        }
                        else {
                            const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
                            _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.multipleElementsNotFound(slicedError ?? "NULL", "Target Inputs e/ou Select para Fórmula de TMB", targInpIMC ?? null, targInpMLG ?? null, targInpTMB ?? null, targInpGET ?? null, formTMBTypeElement ?? null);
                        }
                    }
                    else {
                        const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
                        _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.elementWithObjectError("validando person", person ?? null, gordCorpLvl ?? null, gordCorpLvl?.id ?? null, slicedError ?? "NULL");
                    }
                }
                else {
                    console.warn(`Todos os campos de identidade de gênero validados: ${areAllGenContChecked.toString() ?? "false"}`);
                    const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
                    _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.multipleElementsNotFound(slicedError ?? "NULL", "Campos de Gênero e/ou Tipo Corporal e/ou Protocolo", protocolo ?? null, genElement ?? null, genTrans ?? null, genFisAlin ?? null, textBodytype ?? null);
                }
            }
        }
        else {
            console.warn(`Col Groups similares: ${areColGroupsSimilar}`);
            const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
            _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.elementNotFound(numConsElement ?? null, "numConsElement", slicedError ?? "NULL");
            _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.elementNotFound(gordCorpLvl ?? null, "numConsElement", slicedError ?? "NULL");
        }
    }
    else {
        const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
        _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.multipleElementsNotFound(slicedError ?? "NULL", "Tabelas de Medidas Antropométricas", tabSVi ?? null, tabMedAnt ?? null, tabIndPerc ?? null);
    }
}
else {
    const slicedError = new Error().stack?.split("\n")[1]?.trim()?.slice(-7, -1) || "";
    _global_scripts_src_errorHandler__WEBPACK_IMPORTED_MODULE_4__.multipleElementsNotFound(slicedError ?? "NULL", "Tabelas de Medidas", tabMedAnt ?? null, tabIndPerc ?? null);
}

})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,